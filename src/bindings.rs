/* automatically generated by rust-bindgen 0.54.1 */

pub const __gles2_gl2_h_: u32 = 1;
pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 31;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __LONG_DOUBLE_USES_FLOAT128: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const __TIMESIZE: u32 = 64;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const KHRONOS_SUPPORT_INT64: u32 = 1;
pub const KHRONOS_SUPPORT_FLOAT: u32 = 1;
pub const KHRONOS_MAX_ENUM: u32 = 2147483647;
pub const GL_GLES_PROTOTYPES: u32 = 1;
pub const GL_ES_VERSION_2_0: u32 = 1;
pub const GL_DEPTH_BUFFER_BIT: u32 = 256;
pub const GL_STENCIL_BUFFER_BIT: u32 = 1024;
pub const GL_COLOR_BUFFER_BIT: u32 = 16384;
pub const GL_FALSE: u32 = 0;
pub const GL_TRUE: u32 = 1;
pub const GL_POINTS: u32 = 0;
pub const GL_LINES: u32 = 1;
pub const GL_LINE_LOOP: u32 = 2;
pub const GL_LINE_STRIP: u32 = 3;
pub const GL_TRIANGLES: u32 = 4;
pub const GL_TRIANGLE_STRIP: u32 = 5;
pub const GL_TRIANGLE_FAN: u32 = 6;
pub const GL_ZERO: u32 = 0;
pub const GL_ONE: u32 = 1;
pub const GL_SRC_COLOR: u32 = 768;
pub const GL_ONE_MINUS_SRC_COLOR: u32 = 769;
pub const GL_SRC_ALPHA: u32 = 770;
pub const GL_ONE_MINUS_SRC_ALPHA: u32 = 771;
pub const GL_DST_ALPHA: u32 = 772;
pub const GL_ONE_MINUS_DST_ALPHA: u32 = 773;
pub const GL_DST_COLOR: u32 = 774;
pub const GL_ONE_MINUS_DST_COLOR: u32 = 775;
pub const GL_SRC_ALPHA_SATURATE: u32 = 776;
pub const GL_FUNC_ADD: u32 = 32774;
pub const GL_BLEND_EQUATION: u32 = 32777;
pub const GL_BLEND_EQUATION_RGB: u32 = 32777;
pub const GL_BLEND_EQUATION_ALPHA: u32 = 34877;
pub const GL_FUNC_SUBTRACT: u32 = 32778;
pub const GL_FUNC_REVERSE_SUBTRACT: u32 = 32779;
pub const GL_BLEND_DST_RGB: u32 = 32968;
pub const GL_BLEND_SRC_RGB: u32 = 32969;
pub const GL_BLEND_DST_ALPHA: u32 = 32970;
pub const GL_BLEND_SRC_ALPHA: u32 = 32971;
pub const GL_CONSTANT_COLOR: u32 = 32769;
pub const GL_ONE_MINUS_CONSTANT_COLOR: u32 = 32770;
pub const GL_CONSTANT_ALPHA: u32 = 32771;
pub const GL_ONE_MINUS_CONSTANT_ALPHA: u32 = 32772;
pub const GL_BLEND_COLOR: u32 = 32773;
pub const GL_ARRAY_BUFFER: u32 = 34962;
pub const GL_ELEMENT_ARRAY_BUFFER: u32 = 34963;
pub const GL_ARRAY_BUFFER_BINDING: u32 = 34964;
pub const GL_ELEMENT_ARRAY_BUFFER_BINDING: u32 = 34965;
pub const GL_STREAM_DRAW: u32 = 35040;
pub const GL_STATIC_DRAW: u32 = 35044;
pub const GL_DYNAMIC_DRAW: u32 = 35048;
pub const GL_BUFFER_SIZE: u32 = 34660;
pub const GL_BUFFER_USAGE: u32 = 34661;
pub const GL_CURRENT_VERTEX_ATTRIB: u32 = 34342;
pub const GL_FRONT: u32 = 1028;
pub const GL_BACK: u32 = 1029;
pub const GL_FRONT_AND_BACK: u32 = 1032;
pub const GL_TEXTURE_2D: u32 = 3553;
pub const GL_CULL_FACE: u32 = 2884;
pub const GL_BLEND: u32 = 3042;
pub const GL_DITHER: u32 = 3024;
pub const GL_STENCIL_TEST: u32 = 2960;
pub const GL_DEPTH_TEST: u32 = 2929;
pub const GL_SCISSOR_TEST: u32 = 3089;
pub const GL_POLYGON_OFFSET_FILL: u32 = 32823;
pub const GL_SAMPLE_ALPHA_TO_COVERAGE: u32 = 32926;
pub const GL_SAMPLE_COVERAGE: u32 = 32928;
pub const GL_NO_ERROR: u32 = 0;
pub const GL_INVALID_ENUM: u32 = 1280;
pub const GL_INVALID_VALUE: u32 = 1281;
pub const GL_INVALID_OPERATION: u32 = 1282;
pub const GL_OUT_OF_MEMORY: u32 = 1285;
pub const GL_CW: u32 = 2304;
pub const GL_CCW: u32 = 2305;
pub const GL_LINE_WIDTH: u32 = 2849;
pub const GL_ALIASED_POINT_SIZE_RANGE: u32 = 33901;
pub const GL_ALIASED_LINE_WIDTH_RANGE: u32 = 33902;
pub const GL_CULL_FACE_MODE: u32 = 2885;
pub const GL_FRONT_FACE: u32 = 2886;
pub const GL_DEPTH_RANGE: u32 = 2928;
pub const GL_DEPTH_WRITEMASK: u32 = 2930;
pub const GL_DEPTH_CLEAR_VALUE: u32 = 2931;
pub const GL_DEPTH_FUNC: u32 = 2932;
pub const GL_STENCIL_CLEAR_VALUE: u32 = 2961;
pub const GL_STENCIL_FUNC: u32 = 2962;
pub const GL_STENCIL_FAIL: u32 = 2964;
pub const GL_STENCIL_PASS_DEPTH_FAIL: u32 = 2965;
pub const GL_STENCIL_PASS_DEPTH_PASS: u32 = 2966;
pub const GL_STENCIL_REF: u32 = 2967;
pub const GL_STENCIL_VALUE_MASK: u32 = 2963;
pub const GL_STENCIL_WRITEMASK: u32 = 2968;
pub const GL_STENCIL_BACK_FUNC: u32 = 34816;
pub const GL_STENCIL_BACK_FAIL: u32 = 34817;
pub const GL_STENCIL_BACK_PASS_DEPTH_FAIL: u32 = 34818;
pub const GL_STENCIL_BACK_PASS_DEPTH_PASS: u32 = 34819;
pub const GL_STENCIL_BACK_REF: u32 = 36003;
pub const GL_STENCIL_BACK_VALUE_MASK: u32 = 36004;
pub const GL_STENCIL_BACK_WRITEMASK: u32 = 36005;
pub const GL_VIEWPORT: u32 = 2978;
pub const GL_SCISSOR_BOX: u32 = 3088;
pub const GL_COLOR_CLEAR_VALUE: u32 = 3106;
pub const GL_COLOR_WRITEMASK: u32 = 3107;
pub const GL_UNPACK_ALIGNMENT: u32 = 3317;
pub const GL_PACK_ALIGNMENT: u32 = 3333;
pub const GL_MAX_TEXTURE_SIZE: u32 = 3379;
pub const GL_MAX_VIEWPORT_DIMS: u32 = 3386;
pub const GL_SUBPIXEL_BITS: u32 = 3408;
pub const GL_RED_BITS: u32 = 3410;
pub const GL_GREEN_BITS: u32 = 3411;
pub const GL_BLUE_BITS: u32 = 3412;
pub const GL_ALPHA_BITS: u32 = 3413;
pub const GL_DEPTH_BITS: u32 = 3414;
pub const GL_STENCIL_BITS: u32 = 3415;
pub const GL_POLYGON_OFFSET_UNITS: u32 = 10752;
pub const GL_POLYGON_OFFSET_FACTOR: u32 = 32824;
pub const GL_TEXTURE_BINDING_2D: u32 = 32873;
pub const GL_SAMPLE_BUFFERS: u32 = 32936;
pub const GL_SAMPLES: u32 = 32937;
pub const GL_SAMPLE_COVERAGE_VALUE: u32 = 32938;
pub const GL_SAMPLE_COVERAGE_INVERT: u32 = 32939;
pub const GL_NUM_COMPRESSED_TEXTURE_FORMATS: u32 = 34466;
pub const GL_COMPRESSED_TEXTURE_FORMATS: u32 = 34467;
pub const GL_DONT_CARE: u32 = 4352;
pub const GL_FASTEST: u32 = 4353;
pub const GL_NICEST: u32 = 4354;
pub const GL_GENERATE_MIPMAP_HINT: u32 = 33170;
pub const GL_BYTE: u32 = 5120;
pub const GL_UNSIGNED_BYTE: u32 = 5121;
pub const GL_SHORT: u32 = 5122;
pub const GL_UNSIGNED_SHORT: u32 = 5123;
pub const GL_INT: u32 = 5124;
pub const GL_UNSIGNED_INT: u32 = 5125;
pub const GL_FLOAT: u32 = 5126;
pub const GL_FIXED: u32 = 5132;
pub const GL_DEPTH_COMPONENT: u32 = 6402;
pub const GL_ALPHA: u32 = 6406;
pub const GL_RGB: u32 = 6407;
pub const GL_RGBA: u32 = 6408;
pub const GL_LUMINANCE: u32 = 6409;
pub const GL_LUMINANCE_ALPHA: u32 = 6410;
pub const GL_UNSIGNED_SHORT_4_4_4_4: u32 = 32819;
pub const GL_UNSIGNED_SHORT_5_5_5_1: u32 = 32820;
pub const GL_UNSIGNED_SHORT_5_6_5: u32 = 33635;
pub const GL_FRAGMENT_SHADER: u32 = 35632;
pub const GL_VERTEX_SHADER: u32 = 35633;
pub const GL_MAX_VERTEX_ATTRIBS: u32 = 34921;
pub const GL_MAX_VERTEX_UNIFORM_VECTORS: u32 = 36347;
pub const GL_MAX_VARYING_VECTORS: u32 = 36348;
pub const GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS: u32 = 35661;
pub const GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS: u32 = 35660;
pub const GL_MAX_TEXTURE_IMAGE_UNITS: u32 = 34930;
pub const GL_MAX_FRAGMENT_UNIFORM_VECTORS: u32 = 36349;
pub const GL_SHADER_TYPE: u32 = 35663;
pub const GL_DELETE_STATUS: u32 = 35712;
pub const GL_LINK_STATUS: u32 = 35714;
pub const GL_VALIDATE_STATUS: u32 = 35715;
pub const GL_ATTACHED_SHADERS: u32 = 35717;
pub const GL_ACTIVE_UNIFORMS: u32 = 35718;
pub const GL_ACTIVE_UNIFORM_MAX_LENGTH: u32 = 35719;
pub const GL_ACTIVE_ATTRIBUTES: u32 = 35721;
pub const GL_ACTIVE_ATTRIBUTE_MAX_LENGTH: u32 = 35722;
pub const GL_SHADING_LANGUAGE_VERSION: u32 = 35724;
pub const GL_CURRENT_PROGRAM: u32 = 35725;
pub const GL_NEVER: u32 = 512;
pub const GL_LESS: u32 = 513;
pub const GL_EQUAL: u32 = 514;
pub const GL_LEQUAL: u32 = 515;
pub const GL_GREATER: u32 = 516;
pub const GL_NOTEQUAL: u32 = 517;
pub const GL_GEQUAL: u32 = 518;
pub const GL_ALWAYS: u32 = 519;
pub const GL_KEEP: u32 = 7680;
pub const GL_REPLACE: u32 = 7681;
pub const GL_INCR: u32 = 7682;
pub const GL_DECR: u32 = 7683;
pub const GL_INVERT: u32 = 5386;
pub const GL_INCR_WRAP: u32 = 34055;
pub const GL_DECR_WRAP: u32 = 34056;
pub const GL_VENDOR: u32 = 7936;
pub const GL_RENDERER: u32 = 7937;
pub const GL_VERSION: u32 = 7938;
pub const GL_EXTENSIONS: u32 = 7939;
pub const GL_NEAREST: u32 = 9728;
pub const GL_LINEAR: u32 = 9729;
pub const GL_NEAREST_MIPMAP_NEAREST: u32 = 9984;
pub const GL_LINEAR_MIPMAP_NEAREST: u32 = 9985;
pub const GL_NEAREST_MIPMAP_LINEAR: u32 = 9986;
pub const GL_LINEAR_MIPMAP_LINEAR: u32 = 9987;
pub const GL_TEXTURE_MAG_FILTER: u32 = 10240;
pub const GL_TEXTURE_MIN_FILTER: u32 = 10241;
pub const GL_TEXTURE_WRAP_S: u32 = 10242;
pub const GL_TEXTURE_WRAP_T: u32 = 10243;
pub const GL_TEXTURE: u32 = 5890;
pub const GL_TEXTURE_CUBE_MAP: u32 = 34067;
pub const GL_TEXTURE_BINDING_CUBE_MAP: u32 = 34068;
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_X: u32 = 34069;
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_X: u32 = 34070;
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_Y: u32 = 34071;
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_Y: u32 = 34072;
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_Z: u32 = 34073;
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_Z: u32 = 34074;
pub const GL_MAX_CUBE_MAP_TEXTURE_SIZE: u32 = 34076;
pub const GL_TEXTURE0: u32 = 33984;
pub const GL_TEXTURE1: u32 = 33985;
pub const GL_TEXTURE2: u32 = 33986;
pub const GL_TEXTURE3: u32 = 33987;
pub const GL_TEXTURE4: u32 = 33988;
pub const GL_TEXTURE5: u32 = 33989;
pub const GL_TEXTURE6: u32 = 33990;
pub const GL_TEXTURE7: u32 = 33991;
pub const GL_TEXTURE8: u32 = 33992;
pub const GL_TEXTURE9: u32 = 33993;
pub const GL_TEXTURE10: u32 = 33994;
pub const GL_TEXTURE11: u32 = 33995;
pub const GL_TEXTURE12: u32 = 33996;
pub const GL_TEXTURE13: u32 = 33997;
pub const GL_TEXTURE14: u32 = 33998;
pub const GL_TEXTURE15: u32 = 33999;
pub const GL_TEXTURE16: u32 = 34000;
pub const GL_TEXTURE17: u32 = 34001;
pub const GL_TEXTURE18: u32 = 34002;
pub const GL_TEXTURE19: u32 = 34003;
pub const GL_TEXTURE20: u32 = 34004;
pub const GL_TEXTURE21: u32 = 34005;
pub const GL_TEXTURE22: u32 = 34006;
pub const GL_TEXTURE23: u32 = 34007;
pub const GL_TEXTURE24: u32 = 34008;
pub const GL_TEXTURE25: u32 = 34009;
pub const GL_TEXTURE26: u32 = 34010;
pub const GL_TEXTURE27: u32 = 34011;
pub const GL_TEXTURE28: u32 = 34012;
pub const GL_TEXTURE29: u32 = 34013;
pub const GL_TEXTURE30: u32 = 34014;
pub const GL_TEXTURE31: u32 = 34015;
pub const GL_ACTIVE_TEXTURE: u32 = 34016;
pub const GL_REPEAT: u32 = 10497;
pub const GL_CLAMP_TO_EDGE: u32 = 33071;
pub const GL_MIRRORED_REPEAT: u32 = 33648;
pub const GL_FLOAT_VEC2: u32 = 35664;
pub const GL_FLOAT_VEC3: u32 = 35665;
pub const GL_FLOAT_VEC4: u32 = 35666;
pub const GL_INT_VEC2: u32 = 35667;
pub const GL_INT_VEC3: u32 = 35668;
pub const GL_INT_VEC4: u32 = 35669;
pub const GL_BOOL: u32 = 35670;
pub const GL_BOOL_VEC2: u32 = 35671;
pub const GL_BOOL_VEC3: u32 = 35672;
pub const GL_BOOL_VEC4: u32 = 35673;
pub const GL_FLOAT_MAT2: u32 = 35674;
pub const GL_FLOAT_MAT3: u32 = 35675;
pub const GL_FLOAT_MAT4: u32 = 35676;
pub const GL_SAMPLER_2D: u32 = 35678;
pub const GL_SAMPLER_CUBE: u32 = 35680;
pub const GL_VERTEX_ATTRIB_ARRAY_ENABLED: u32 = 34338;
pub const GL_VERTEX_ATTRIB_ARRAY_SIZE: u32 = 34339;
pub const GL_VERTEX_ATTRIB_ARRAY_STRIDE: u32 = 34340;
pub const GL_VERTEX_ATTRIB_ARRAY_TYPE: u32 = 34341;
pub const GL_VERTEX_ATTRIB_ARRAY_NORMALIZED: u32 = 34922;
pub const GL_VERTEX_ATTRIB_ARRAY_POINTER: u32 = 34373;
pub const GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: u32 = 34975;
pub const GL_IMPLEMENTATION_COLOR_READ_TYPE: u32 = 35738;
pub const GL_IMPLEMENTATION_COLOR_READ_FORMAT: u32 = 35739;
pub const GL_COMPILE_STATUS: u32 = 35713;
pub const GL_INFO_LOG_LENGTH: u32 = 35716;
pub const GL_SHADER_SOURCE_LENGTH: u32 = 35720;
pub const GL_SHADER_COMPILER: u32 = 36346;
pub const GL_SHADER_BINARY_FORMATS: u32 = 36344;
pub const GL_NUM_SHADER_BINARY_FORMATS: u32 = 36345;
pub const GL_LOW_FLOAT: u32 = 36336;
pub const GL_MEDIUM_FLOAT: u32 = 36337;
pub const GL_HIGH_FLOAT: u32 = 36338;
pub const GL_LOW_INT: u32 = 36339;
pub const GL_MEDIUM_INT: u32 = 36340;
pub const GL_HIGH_INT: u32 = 36341;
pub const GL_FRAMEBUFFER: u32 = 36160;
pub const GL_RENDERBUFFER: u32 = 36161;
pub const GL_RGBA4: u32 = 32854;
pub const GL_RGB5_A1: u32 = 32855;
pub const GL_RGB565: u32 = 36194;
pub const GL_DEPTH_COMPONENT16: u32 = 33189;
pub const GL_STENCIL_INDEX8: u32 = 36168;
pub const GL_RENDERBUFFER_WIDTH: u32 = 36162;
pub const GL_RENDERBUFFER_HEIGHT: u32 = 36163;
pub const GL_RENDERBUFFER_INTERNAL_FORMAT: u32 = 36164;
pub const GL_RENDERBUFFER_RED_SIZE: u32 = 36176;
pub const GL_RENDERBUFFER_GREEN_SIZE: u32 = 36177;
pub const GL_RENDERBUFFER_BLUE_SIZE: u32 = 36178;
pub const GL_RENDERBUFFER_ALPHA_SIZE: u32 = 36179;
pub const GL_RENDERBUFFER_DEPTH_SIZE: u32 = 36180;
pub const GL_RENDERBUFFER_STENCIL_SIZE: u32 = 36181;
pub const GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: u32 = 36048;
pub const GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: u32 = 36049;
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: u32 = 36050;
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: u32 = 36051;
pub const GL_COLOR_ATTACHMENT0: u32 = 36064;
pub const GL_DEPTH_ATTACHMENT: u32 = 36096;
pub const GL_STENCIL_ATTACHMENT: u32 = 36128;
pub const GL_NONE: u32 = 0;
pub const GL_FRAMEBUFFER_COMPLETE: u32 = 36053;
pub const GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT: u32 = 36054;
pub const GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: u32 = 36055;
pub const GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS: u32 = 36057;
pub const GL_FRAMEBUFFER_UNSUPPORTED: u32 = 36061;
pub const GL_FRAMEBUFFER_BINDING: u32 = 36006;
pub const GL_RENDERBUFFER_BINDING: u32 = 36007;
pub const GL_MAX_RENDERBUFFER_SIZE: u32 = 34024;
pub const GL_INVALID_FRAMEBUFFER_OPERATION: u32 = 1286;
pub const __gles2_gl2ext_h_: u32 = 1;
pub const GL_KHR_blend_equation_advanced: u32 = 1;
pub const GL_MULTIPLY_KHR: u32 = 37524;
pub const GL_SCREEN_KHR: u32 = 37525;
pub const GL_OVERLAY_KHR: u32 = 37526;
pub const GL_DARKEN_KHR: u32 = 37527;
pub const GL_LIGHTEN_KHR: u32 = 37528;
pub const GL_COLORDODGE_KHR: u32 = 37529;
pub const GL_COLORBURN_KHR: u32 = 37530;
pub const GL_HARDLIGHT_KHR: u32 = 37531;
pub const GL_SOFTLIGHT_KHR: u32 = 37532;
pub const GL_DIFFERENCE_KHR: u32 = 37534;
pub const GL_EXCLUSION_KHR: u32 = 37536;
pub const GL_HSL_HUE_KHR: u32 = 37549;
pub const GL_HSL_SATURATION_KHR: u32 = 37550;
pub const GL_HSL_COLOR_KHR: u32 = 37551;
pub const GL_HSL_LUMINOSITY_KHR: u32 = 37552;
pub const GL_KHR_blend_equation_advanced_coherent: u32 = 1;
pub const GL_BLEND_ADVANCED_COHERENT_KHR: u32 = 37509;
pub const GL_KHR_context_flush_control: u32 = 1;
pub const GL_CONTEXT_RELEASE_BEHAVIOR_KHR: u32 = 33531;
pub const GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH_KHR: u32 = 33532;
pub const GL_KHR_debug: u32 = 1;
pub const GL_SAMPLER: u32 = 33510;
pub const GL_DEBUG_OUTPUT_SYNCHRONOUS_KHR: u32 = 33346;
pub const GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_KHR: u32 = 33347;
pub const GL_DEBUG_CALLBACK_FUNCTION_KHR: u32 = 33348;
pub const GL_DEBUG_CALLBACK_USER_PARAM_KHR: u32 = 33349;
pub const GL_DEBUG_SOURCE_API_KHR: u32 = 33350;
pub const GL_DEBUG_SOURCE_WINDOW_SYSTEM_KHR: u32 = 33351;
pub const GL_DEBUG_SOURCE_SHADER_COMPILER_KHR: u32 = 33352;
pub const GL_DEBUG_SOURCE_THIRD_PARTY_KHR: u32 = 33353;
pub const GL_DEBUG_SOURCE_APPLICATION_KHR: u32 = 33354;
pub const GL_DEBUG_SOURCE_OTHER_KHR: u32 = 33355;
pub const GL_DEBUG_TYPE_ERROR_KHR: u32 = 33356;
pub const GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_KHR: u32 = 33357;
pub const GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_KHR: u32 = 33358;
pub const GL_DEBUG_TYPE_PORTABILITY_KHR: u32 = 33359;
pub const GL_DEBUG_TYPE_PERFORMANCE_KHR: u32 = 33360;
pub const GL_DEBUG_TYPE_OTHER_KHR: u32 = 33361;
pub const GL_DEBUG_TYPE_MARKER_KHR: u32 = 33384;
pub const GL_DEBUG_TYPE_PUSH_GROUP_KHR: u32 = 33385;
pub const GL_DEBUG_TYPE_POP_GROUP_KHR: u32 = 33386;
pub const GL_DEBUG_SEVERITY_NOTIFICATION_KHR: u32 = 33387;
pub const GL_MAX_DEBUG_GROUP_STACK_DEPTH_KHR: u32 = 33388;
pub const GL_DEBUG_GROUP_STACK_DEPTH_KHR: u32 = 33389;
pub const GL_BUFFER_KHR: u32 = 33504;
pub const GL_SHADER_KHR: u32 = 33505;
pub const GL_PROGRAM_KHR: u32 = 33506;
pub const GL_VERTEX_ARRAY_KHR: u32 = 32884;
pub const GL_QUERY_KHR: u32 = 33507;
pub const GL_PROGRAM_PIPELINE_KHR: u32 = 33508;
pub const GL_SAMPLER_KHR: u32 = 33510;
pub const GL_MAX_LABEL_LENGTH_KHR: u32 = 33512;
pub const GL_MAX_DEBUG_MESSAGE_LENGTH_KHR: u32 = 37187;
pub const GL_MAX_DEBUG_LOGGED_MESSAGES_KHR: u32 = 37188;
pub const GL_DEBUG_LOGGED_MESSAGES_KHR: u32 = 37189;
pub const GL_DEBUG_SEVERITY_HIGH_KHR: u32 = 37190;
pub const GL_DEBUG_SEVERITY_MEDIUM_KHR: u32 = 37191;
pub const GL_DEBUG_SEVERITY_LOW_KHR: u32 = 37192;
pub const GL_DEBUG_OUTPUT_KHR: u32 = 37600;
pub const GL_CONTEXT_FLAG_DEBUG_BIT_KHR: u32 = 2;
pub const GL_STACK_OVERFLOW_KHR: u32 = 1283;
pub const GL_STACK_UNDERFLOW_KHR: u32 = 1284;
pub const GL_KHR_no_error: u32 = 1;
pub const GL_CONTEXT_FLAG_NO_ERROR_BIT_KHR: u32 = 8;
pub const GL_KHR_parallel_shader_compile: u32 = 1;
pub const GL_MAX_SHADER_COMPILER_THREADS_KHR: u32 = 37296;
pub const GL_COMPLETION_STATUS_KHR: u32 = 37297;
pub const GL_KHR_robust_buffer_access_behavior: u32 = 1;
pub const GL_KHR_robustness: u32 = 1;
pub const GL_CONTEXT_ROBUST_ACCESS_KHR: u32 = 37107;
pub const GL_LOSE_CONTEXT_ON_RESET_KHR: u32 = 33362;
pub const GL_GUILTY_CONTEXT_RESET_KHR: u32 = 33363;
pub const GL_INNOCENT_CONTEXT_RESET_KHR: u32 = 33364;
pub const GL_UNKNOWN_CONTEXT_RESET_KHR: u32 = 33365;
pub const GL_RESET_NOTIFICATION_STRATEGY_KHR: u32 = 33366;
pub const GL_NO_RESET_NOTIFICATION_KHR: u32 = 33377;
pub const GL_CONTEXT_LOST_KHR: u32 = 1287;
pub const GL_KHR_texture_compression_astc_hdr: u32 = 1;
pub const GL_COMPRESSED_RGBA_ASTC_4x4_KHR: u32 = 37808;
pub const GL_COMPRESSED_RGBA_ASTC_5x4_KHR: u32 = 37809;
pub const GL_COMPRESSED_RGBA_ASTC_5x5_KHR: u32 = 37810;
pub const GL_COMPRESSED_RGBA_ASTC_6x5_KHR: u32 = 37811;
pub const GL_COMPRESSED_RGBA_ASTC_6x6_KHR: u32 = 37812;
pub const GL_COMPRESSED_RGBA_ASTC_8x5_KHR: u32 = 37813;
pub const GL_COMPRESSED_RGBA_ASTC_8x6_KHR: u32 = 37814;
pub const GL_COMPRESSED_RGBA_ASTC_8x8_KHR: u32 = 37815;
pub const GL_COMPRESSED_RGBA_ASTC_10x5_KHR: u32 = 37816;
pub const GL_COMPRESSED_RGBA_ASTC_10x6_KHR: u32 = 37817;
pub const GL_COMPRESSED_RGBA_ASTC_10x8_KHR: u32 = 37818;
pub const GL_COMPRESSED_RGBA_ASTC_10x10_KHR: u32 = 37819;
pub const GL_COMPRESSED_RGBA_ASTC_12x10_KHR: u32 = 37820;
pub const GL_COMPRESSED_RGBA_ASTC_12x12_KHR: u32 = 37821;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR: u32 = 37840;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR: u32 = 37841;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR: u32 = 37842;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR: u32 = 37843;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR: u32 = 37844;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR: u32 = 37845;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR: u32 = 37846;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR: u32 = 37847;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR: u32 = 37848;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR: u32 = 37849;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR: u32 = 37850;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR: u32 = 37851;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR: u32 = 37852;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR: u32 = 37853;
pub const GL_KHR_texture_compression_astc_ldr: u32 = 1;
pub const GL_KHR_texture_compression_astc_sliced_3d: u32 = 1;
pub const GL_OES_EGL_image: u32 = 1;
pub const GL_OES_EGL_image_external: u32 = 1;
pub const GL_TEXTURE_EXTERNAL_OES: u32 = 36197;
pub const GL_TEXTURE_BINDING_EXTERNAL_OES: u32 = 36199;
pub const GL_REQUIRED_TEXTURE_IMAGE_UNITS_OES: u32 = 36200;
pub const GL_SAMPLER_EXTERNAL_OES: u32 = 36198;
pub const GL_OES_EGL_image_external_essl3: u32 = 1;
pub const GL_OES_compressed_ETC1_RGB8_sub_texture: u32 = 1;
pub const GL_OES_compressed_ETC1_RGB8_texture: u32 = 1;
pub const GL_ETC1_RGB8_OES: u32 = 36196;
pub const GL_OES_compressed_paletted_texture: u32 = 1;
pub const GL_PALETTE4_RGB8_OES: u32 = 35728;
pub const GL_PALETTE4_RGBA8_OES: u32 = 35729;
pub const GL_PALETTE4_R5_G6_B5_OES: u32 = 35730;
pub const GL_PALETTE4_RGBA4_OES: u32 = 35731;
pub const GL_PALETTE4_RGB5_A1_OES: u32 = 35732;
pub const GL_PALETTE8_RGB8_OES: u32 = 35733;
pub const GL_PALETTE8_RGBA8_OES: u32 = 35734;
pub const GL_PALETTE8_R5_G6_B5_OES: u32 = 35735;
pub const GL_PALETTE8_RGBA4_OES: u32 = 35736;
pub const GL_PALETTE8_RGB5_A1_OES: u32 = 35737;
pub const GL_OES_copy_image: u32 = 1;
pub const GL_OES_depth24: u32 = 1;
pub const GL_DEPTH_COMPONENT24_OES: u32 = 33190;
pub const GL_OES_depth32: u32 = 1;
pub const GL_DEPTH_COMPONENT32_OES: u32 = 33191;
pub const GL_OES_depth_texture: u32 = 1;
pub const GL_OES_draw_buffers_indexed: u32 = 1;
pub const GL_MIN: u32 = 32775;
pub const GL_MAX: u32 = 32776;
pub const GL_OES_draw_elements_base_vertex: u32 = 1;
pub const GL_OES_element_index_uint: u32 = 1;
pub const GL_OES_fbo_render_mipmap: u32 = 1;
pub const GL_OES_fragment_precision_high: u32 = 1;
pub const GL_OES_geometry_point_size: u32 = 1;
pub const GL_OES_geometry_shader: u32 = 1;
pub const GL_GEOMETRY_SHADER_OES: u32 = 36313;
pub const GL_GEOMETRY_SHADER_BIT_OES: u32 = 4;
pub const GL_GEOMETRY_LINKED_VERTICES_OUT_OES: u32 = 35094;
pub const GL_GEOMETRY_LINKED_INPUT_TYPE_OES: u32 = 35095;
pub const GL_GEOMETRY_LINKED_OUTPUT_TYPE_OES: u32 = 35096;
pub const GL_GEOMETRY_SHADER_INVOCATIONS_OES: u32 = 34943;
pub const GL_LAYER_PROVOKING_VERTEX_OES: u32 = 33374;
pub const GL_LINES_ADJACENCY_OES: u32 = 10;
pub const GL_LINE_STRIP_ADJACENCY_OES: u32 = 11;
pub const GL_TRIANGLES_ADJACENCY_OES: u32 = 12;
pub const GL_TRIANGLE_STRIP_ADJACENCY_OES: u32 = 13;
pub const GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_OES: u32 = 36319;
pub const GL_MAX_GEOMETRY_UNIFORM_BLOCKS_OES: u32 = 35372;
pub const GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS_OES: u32 = 35378;
pub const GL_MAX_GEOMETRY_INPUT_COMPONENTS_OES: u32 = 37155;
pub const GL_MAX_GEOMETRY_OUTPUT_COMPONENTS_OES: u32 = 37156;
pub const GL_MAX_GEOMETRY_OUTPUT_VERTICES_OES: u32 = 36320;
pub const GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_OES: u32 = 36321;
pub const GL_MAX_GEOMETRY_SHADER_INVOCATIONS_OES: u32 = 36442;
pub const GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_OES: u32 = 35881;
pub const GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS_OES: u32 = 37583;
pub const GL_MAX_GEOMETRY_ATOMIC_COUNTERS_OES: u32 = 37589;
pub const GL_MAX_GEOMETRY_IMAGE_UNIFORMS_OES: u32 = 37069;
pub const GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS_OES: u32 = 37079;
pub const GL_FIRST_VERTEX_CONVENTION_OES: u32 = 36429;
pub const GL_LAST_VERTEX_CONVENTION_OES: u32 = 36430;
pub const GL_UNDEFINED_VERTEX_OES: u32 = 33376;
pub const GL_PRIMITIVES_GENERATED_OES: u32 = 35975;
pub const GL_FRAMEBUFFER_DEFAULT_LAYERS_OES: u32 = 37650;
pub const GL_MAX_FRAMEBUFFER_LAYERS_OES: u32 = 37655;
pub const GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_OES: u32 = 36264;
pub const GL_FRAMEBUFFER_ATTACHMENT_LAYERED_OES: u32 = 36263;
pub const GL_REFERENCED_BY_GEOMETRY_SHADER_OES: u32 = 37641;
pub const GL_OES_get_program_binary: u32 = 1;
pub const GL_PROGRAM_BINARY_LENGTH_OES: u32 = 34625;
pub const GL_NUM_PROGRAM_BINARY_FORMATS_OES: u32 = 34814;
pub const GL_PROGRAM_BINARY_FORMATS_OES: u32 = 34815;
pub const GL_OES_gpu_shader5: u32 = 1;
pub const GL_OES_mapbuffer: u32 = 1;
pub const GL_WRITE_ONLY_OES: u32 = 35001;
pub const GL_BUFFER_ACCESS_OES: u32 = 35003;
pub const GL_BUFFER_MAPPED_OES: u32 = 35004;
pub const GL_BUFFER_MAP_POINTER_OES: u32 = 35005;
pub const GL_OES_packed_depth_stencil: u32 = 1;
pub const GL_DEPTH_STENCIL_OES: u32 = 34041;
pub const GL_UNSIGNED_INT_24_8_OES: u32 = 34042;
pub const GL_DEPTH24_STENCIL8_OES: u32 = 35056;
pub const GL_OES_primitive_bounding_box: u32 = 1;
pub const GL_PRIMITIVE_BOUNDING_BOX_OES: u32 = 37566;
pub const GL_OES_required_internalformat: u32 = 1;
pub const GL_ALPHA8_OES: u32 = 32828;
pub const GL_DEPTH_COMPONENT16_OES: u32 = 33189;
pub const GL_LUMINANCE4_ALPHA4_OES: u32 = 32835;
pub const GL_LUMINANCE8_ALPHA8_OES: u32 = 32837;
pub const GL_LUMINANCE8_OES: u32 = 32832;
pub const GL_RGBA4_OES: u32 = 32854;
pub const GL_RGB5_A1_OES: u32 = 32855;
pub const GL_RGB565_OES: u32 = 36194;
pub const GL_RGB8_OES: u32 = 32849;
pub const GL_RGBA8_OES: u32 = 32856;
pub const GL_RGB10_EXT: u32 = 32850;
pub const GL_RGB10_A2_EXT: u32 = 32857;
pub const GL_OES_rgb8_rgba8: u32 = 1;
pub const GL_OES_sample_shading: u32 = 1;
pub const GL_SAMPLE_SHADING_OES: u32 = 35894;
pub const GL_MIN_SAMPLE_SHADING_VALUE_OES: u32 = 35895;
pub const GL_OES_sample_variables: u32 = 1;
pub const GL_OES_shader_image_atomic: u32 = 1;
pub const GL_OES_shader_io_blocks: u32 = 1;
pub const GL_OES_shader_multisample_interpolation: u32 = 1;
pub const GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_OES: u32 = 36443;
pub const GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_OES: u32 = 36444;
pub const GL_FRAGMENT_INTERPOLATION_OFFSET_BITS_OES: u32 = 36445;
pub const GL_OES_standard_derivatives: u32 = 1;
pub const GL_FRAGMENT_SHADER_DERIVATIVE_HINT_OES: u32 = 35723;
pub const GL_OES_stencil1: u32 = 1;
pub const GL_STENCIL_INDEX1_OES: u32 = 36166;
pub const GL_OES_stencil4: u32 = 1;
pub const GL_STENCIL_INDEX4_OES: u32 = 36167;
pub const GL_OES_surfaceless_context: u32 = 1;
pub const GL_FRAMEBUFFER_UNDEFINED_OES: u32 = 33305;
pub const GL_OES_tessellation_point_size: u32 = 1;
pub const GL_OES_tessellation_shader: u32 = 1;
pub const GL_PATCHES_OES: u32 = 14;
pub const GL_PATCH_VERTICES_OES: u32 = 36466;
pub const GL_TESS_CONTROL_OUTPUT_VERTICES_OES: u32 = 36469;
pub const GL_TESS_GEN_MODE_OES: u32 = 36470;
pub const GL_TESS_GEN_SPACING_OES: u32 = 36471;
pub const GL_TESS_GEN_VERTEX_ORDER_OES: u32 = 36472;
pub const GL_TESS_GEN_POINT_MODE_OES: u32 = 36473;
pub const GL_ISOLINES_OES: u32 = 36474;
pub const GL_QUADS_OES: u32 = 7;
pub const GL_FRACTIONAL_ODD_OES: u32 = 36475;
pub const GL_FRACTIONAL_EVEN_OES: u32 = 36476;
pub const GL_MAX_PATCH_VERTICES_OES: u32 = 36477;
pub const GL_MAX_TESS_GEN_LEVEL_OES: u32 = 36478;
pub const GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS_OES: u32 = 36479;
pub const GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS_OES: u32 = 36480;
pub const GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS_OES: u32 = 36481;
pub const GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS_OES: u32 = 36482;
pub const GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS_OES: u32 = 36483;
pub const GL_MAX_TESS_PATCH_COMPONENTS_OES: u32 = 36484;
pub const GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS_OES: u32 = 36485;
pub const GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS_OES: u32 = 36486;
pub const GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS_OES: u32 = 36489;
pub const GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS_OES: u32 = 36490;
pub const GL_MAX_TESS_CONTROL_INPUT_COMPONENTS_OES: u32 = 34924;
pub const GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS_OES: u32 = 34925;
pub const GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS_OES: u32 = 36382;
pub const GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS_OES: u32 = 36383;
pub const GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS_OES: u32 = 37581;
pub const GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS_OES: u32 = 37582;
pub const GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS_OES: u32 = 37587;
pub const GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS_OES: u32 = 37588;
pub const GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS_OES: u32 = 37067;
pub const GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS_OES: u32 = 37068;
pub const GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS_OES: u32 = 37080;
pub const GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS_OES: u32 = 37081;
pub const GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED_OES: u32 = 33313;
pub const GL_IS_PER_PATCH_OES: u32 = 37607;
pub const GL_REFERENCED_BY_TESS_CONTROL_SHADER_OES: u32 = 37639;
pub const GL_REFERENCED_BY_TESS_EVALUATION_SHADER_OES: u32 = 37640;
pub const GL_TESS_CONTROL_SHADER_OES: u32 = 36488;
pub const GL_TESS_EVALUATION_SHADER_OES: u32 = 36487;
pub const GL_TESS_CONTROL_SHADER_BIT_OES: u32 = 8;
pub const GL_TESS_EVALUATION_SHADER_BIT_OES: u32 = 16;
pub const GL_OES_texture_3D: u32 = 1;
pub const GL_TEXTURE_WRAP_R_OES: u32 = 32882;
pub const GL_TEXTURE_3D_OES: u32 = 32879;
pub const GL_TEXTURE_BINDING_3D_OES: u32 = 32874;
pub const GL_MAX_3D_TEXTURE_SIZE_OES: u32 = 32883;
pub const GL_SAMPLER_3D_OES: u32 = 35679;
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_OES: u32 = 36052;
pub const GL_OES_texture_border_clamp: u32 = 1;
pub const GL_TEXTURE_BORDER_COLOR_OES: u32 = 4100;
pub const GL_CLAMP_TO_BORDER_OES: u32 = 33069;
pub const GL_OES_texture_buffer: u32 = 1;
pub const GL_TEXTURE_BUFFER_OES: u32 = 35882;
pub const GL_TEXTURE_BUFFER_BINDING_OES: u32 = 35882;
pub const GL_MAX_TEXTURE_BUFFER_SIZE_OES: u32 = 35883;
pub const GL_TEXTURE_BINDING_BUFFER_OES: u32 = 35884;
pub const GL_TEXTURE_BUFFER_DATA_STORE_BINDING_OES: u32 = 35885;
pub const GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT_OES: u32 = 37279;
pub const GL_SAMPLER_BUFFER_OES: u32 = 36290;
pub const GL_INT_SAMPLER_BUFFER_OES: u32 = 36304;
pub const GL_UNSIGNED_INT_SAMPLER_BUFFER_OES: u32 = 36312;
pub const GL_IMAGE_BUFFER_OES: u32 = 36945;
pub const GL_INT_IMAGE_BUFFER_OES: u32 = 36956;
pub const GL_UNSIGNED_INT_IMAGE_BUFFER_OES: u32 = 36967;
pub const GL_TEXTURE_BUFFER_OFFSET_OES: u32 = 37277;
pub const GL_TEXTURE_BUFFER_SIZE_OES: u32 = 37278;
pub const GL_OES_texture_compression_astc: u32 = 1;
pub const GL_COMPRESSED_RGBA_ASTC_3x3x3_OES: u32 = 37824;
pub const GL_COMPRESSED_RGBA_ASTC_4x3x3_OES: u32 = 37825;
pub const GL_COMPRESSED_RGBA_ASTC_4x4x3_OES: u32 = 37826;
pub const GL_COMPRESSED_RGBA_ASTC_4x4x4_OES: u32 = 37827;
pub const GL_COMPRESSED_RGBA_ASTC_5x4x4_OES: u32 = 37828;
pub const GL_COMPRESSED_RGBA_ASTC_5x5x4_OES: u32 = 37829;
pub const GL_COMPRESSED_RGBA_ASTC_5x5x5_OES: u32 = 37830;
pub const GL_COMPRESSED_RGBA_ASTC_6x5x5_OES: u32 = 37831;
pub const GL_COMPRESSED_RGBA_ASTC_6x6x5_OES: u32 = 37832;
pub const GL_COMPRESSED_RGBA_ASTC_6x6x6_OES: u32 = 37833;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_3x3x3_OES: u32 = 37856;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x3x3_OES: u32 = 37857;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4x3_OES: u32 = 37858;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4x4_OES: u32 = 37859;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4x4_OES: u32 = 37860;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5x4_OES: u32 = 37861;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5x5_OES: u32 = 37862;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5x5_OES: u32 = 37863;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6x5_OES: u32 = 37864;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6x6_OES: u32 = 37865;
pub const GL_OES_texture_cube_map_array: u32 = 1;
pub const GL_TEXTURE_CUBE_MAP_ARRAY_OES: u32 = 36873;
pub const GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_OES: u32 = 36874;
pub const GL_SAMPLER_CUBE_MAP_ARRAY_OES: u32 = 36876;
pub const GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_OES: u32 = 36877;
pub const GL_INT_SAMPLER_CUBE_MAP_ARRAY_OES: u32 = 36878;
pub const GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_OES: u32 = 36879;
pub const GL_IMAGE_CUBE_MAP_ARRAY_OES: u32 = 36948;
pub const GL_INT_IMAGE_CUBE_MAP_ARRAY_OES: u32 = 36959;
pub const GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_OES: u32 = 36970;
pub const GL_OES_texture_float: u32 = 1;
pub const GL_OES_texture_float_linear: u32 = 1;
pub const GL_OES_texture_half_float: u32 = 1;
pub const GL_HALF_FLOAT_OES: u32 = 36193;
pub const GL_OES_texture_half_float_linear: u32 = 1;
pub const GL_OES_texture_npot: u32 = 1;
pub const GL_OES_texture_stencil8: u32 = 1;
pub const GL_STENCIL_INDEX_OES: u32 = 6401;
pub const GL_STENCIL_INDEX8_OES: u32 = 36168;
pub const GL_OES_texture_storage_multisample_2d_array: u32 = 1;
pub const GL_TEXTURE_2D_MULTISAMPLE_ARRAY_OES: u32 = 37122;
pub const GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY_OES: u32 = 37125;
pub const GL_SAMPLER_2D_MULTISAMPLE_ARRAY_OES: u32 = 37131;
pub const GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY_OES: u32 = 37132;
pub const GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY_OES: u32 = 37133;
pub const GL_OES_texture_view: u32 = 1;
pub const GL_TEXTURE_VIEW_MIN_LEVEL_OES: u32 = 33499;
pub const GL_TEXTURE_VIEW_NUM_LEVELS_OES: u32 = 33500;
pub const GL_TEXTURE_VIEW_MIN_LAYER_OES: u32 = 33501;
pub const GL_TEXTURE_VIEW_NUM_LAYERS_OES: u32 = 33502;
pub const GL_TEXTURE_IMMUTABLE_LEVELS: u32 = 33503;
pub const GL_OES_vertex_array_object: u32 = 1;
pub const GL_VERTEX_ARRAY_BINDING_OES: u32 = 34229;
pub const GL_OES_vertex_half_float: u32 = 1;
pub const GL_OES_vertex_type_10_10_10_2: u32 = 1;
pub const GL_UNSIGNED_INT_10_10_10_2_OES: u32 = 36342;
pub const GL_INT_10_10_10_2_OES: u32 = 36343;
pub const GL_OES_viewport_array: u32 = 1;
pub const GL_MAX_VIEWPORTS_OES: u32 = 33371;
pub const GL_VIEWPORT_SUBPIXEL_BITS_OES: u32 = 33372;
pub const GL_VIEWPORT_BOUNDS_RANGE_OES: u32 = 33373;
pub const GL_VIEWPORT_INDEX_PROVOKING_VERTEX_OES: u32 = 33375;
pub const GL_AMD_compressed_3DC_texture: u32 = 1;
pub const GL_3DC_X_AMD: u32 = 34809;
pub const GL_3DC_XY_AMD: u32 = 34810;
pub const GL_AMD_compressed_ATC_texture: u32 = 1;
pub const GL_ATC_RGB_AMD: u32 = 35986;
pub const GL_ATC_RGBA_EXPLICIT_ALPHA_AMD: u32 = 35987;
pub const GL_ATC_RGBA_INTERPOLATED_ALPHA_AMD: u32 = 34798;
pub const GL_AMD_framebuffer_multisample_advanced: u32 = 1;
pub const GL_RENDERBUFFER_STORAGE_SAMPLES_AMD: u32 = 37298;
pub const GL_MAX_COLOR_FRAMEBUFFER_SAMPLES_AMD: u32 = 37299;
pub const GL_MAX_COLOR_FRAMEBUFFER_STORAGE_SAMPLES_AMD: u32 = 37300;
pub const GL_MAX_DEPTH_STENCIL_FRAMEBUFFER_SAMPLES_AMD: u32 = 37301;
pub const GL_NUM_SUPPORTED_MULTISAMPLE_MODES_AMD: u32 = 37302;
pub const GL_SUPPORTED_MULTISAMPLE_MODES_AMD: u32 = 37303;
pub const GL_AMD_performance_monitor: u32 = 1;
pub const GL_COUNTER_TYPE_AMD: u32 = 35776;
pub const GL_COUNTER_RANGE_AMD: u32 = 35777;
pub const GL_UNSIGNED_INT64_AMD: u32 = 35778;
pub const GL_PERCENTAGE_AMD: u32 = 35779;
pub const GL_PERFMON_RESULT_AVAILABLE_AMD: u32 = 35780;
pub const GL_PERFMON_RESULT_SIZE_AMD: u32 = 35781;
pub const GL_PERFMON_RESULT_AMD: u32 = 35782;
pub const GL_AMD_program_binary_Z400: u32 = 1;
pub const GL_Z400_BINARY_AMD: u32 = 34624;
pub const GL_ANDROID_extension_pack_es31a: u32 = 1;
pub const GL_ANGLE_depth_texture: u32 = 1;
pub const GL_ANGLE_framebuffer_blit: u32 = 1;
pub const GL_READ_FRAMEBUFFER_ANGLE: u32 = 36008;
pub const GL_DRAW_FRAMEBUFFER_ANGLE: u32 = 36009;
pub const GL_DRAW_FRAMEBUFFER_BINDING_ANGLE: u32 = 36006;
pub const GL_READ_FRAMEBUFFER_BINDING_ANGLE: u32 = 36010;
pub const GL_ANGLE_framebuffer_multisample: u32 = 1;
pub const GL_RENDERBUFFER_SAMPLES_ANGLE: u32 = 36011;
pub const GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_ANGLE: u32 = 36182;
pub const GL_MAX_SAMPLES_ANGLE: u32 = 36183;
pub const GL_ANGLE_instanced_arrays: u32 = 1;
pub const GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE: u32 = 35070;
pub const GL_ANGLE_pack_reverse_row_order: u32 = 1;
pub const GL_PACK_REVERSE_ROW_ORDER_ANGLE: u32 = 37796;
pub const GL_ANGLE_program_binary: u32 = 1;
pub const GL_PROGRAM_BINARY_ANGLE: u32 = 37798;
pub const GL_ANGLE_texture_compression_dxt3: u32 = 1;
pub const GL_COMPRESSED_RGBA_S3TC_DXT3_ANGLE: u32 = 33778;
pub const GL_ANGLE_texture_compression_dxt5: u32 = 1;
pub const GL_COMPRESSED_RGBA_S3TC_DXT5_ANGLE: u32 = 33779;
pub const GL_ANGLE_texture_usage: u32 = 1;
pub const GL_TEXTURE_USAGE_ANGLE: u32 = 37794;
pub const GL_FRAMEBUFFER_ATTACHMENT_ANGLE: u32 = 37795;
pub const GL_ANGLE_translated_shader_source: u32 = 1;
pub const GL_TRANSLATED_SHADER_SOURCE_LENGTH_ANGLE: u32 = 37792;
pub const GL_APPLE_clip_distance: u32 = 1;
pub const GL_MAX_CLIP_DISTANCES_APPLE: u32 = 3378;
pub const GL_CLIP_DISTANCE0_APPLE: u32 = 12288;
pub const GL_CLIP_DISTANCE1_APPLE: u32 = 12289;
pub const GL_CLIP_DISTANCE2_APPLE: u32 = 12290;
pub const GL_CLIP_DISTANCE3_APPLE: u32 = 12291;
pub const GL_CLIP_DISTANCE4_APPLE: u32 = 12292;
pub const GL_CLIP_DISTANCE5_APPLE: u32 = 12293;
pub const GL_CLIP_DISTANCE6_APPLE: u32 = 12294;
pub const GL_CLIP_DISTANCE7_APPLE: u32 = 12295;
pub const GL_APPLE_color_buffer_packed_float: u32 = 1;
pub const GL_APPLE_copy_texture_levels: u32 = 1;
pub const GL_APPLE_framebuffer_multisample: u32 = 1;
pub const GL_RENDERBUFFER_SAMPLES_APPLE: u32 = 36011;
pub const GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_APPLE: u32 = 36182;
pub const GL_MAX_SAMPLES_APPLE: u32 = 36183;
pub const GL_READ_FRAMEBUFFER_APPLE: u32 = 36008;
pub const GL_DRAW_FRAMEBUFFER_APPLE: u32 = 36009;
pub const GL_DRAW_FRAMEBUFFER_BINDING_APPLE: u32 = 36006;
pub const GL_READ_FRAMEBUFFER_BINDING_APPLE: u32 = 36010;
pub const GL_APPLE_rgb_422: u32 = 1;
pub const GL_RGB_422_APPLE: u32 = 35359;
pub const GL_UNSIGNED_SHORT_8_8_APPLE: u32 = 34234;
pub const GL_UNSIGNED_SHORT_8_8_REV_APPLE: u32 = 34235;
pub const GL_RGB_RAW_422_APPLE: u32 = 35409;
pub const GL_APPLE_sync: u32 = 1;
pub const GL_SYNC_OBJECT_APPLE: u32 = 35411;
pub const GL_MAX_SERVER_WAIT_TIMEOUT_APPLE: u32 = 37137;
pub const GL_OBJECT_TYPE_APPLE: u32 = 37138;
pub const GL_SYNC_CONDITION_APPLE: u32 = 37139;
pub const GL_SYNC_STATUS_APPLE: u32 = 37140;
pub const GL_SYNC_FLAGS_APPLE: u32 = 37141;
pub const GL_SYNC_FENCE_APPLE: u32 = 37142;
pub const GL_SYNC_GPU_COMMANDS_COMPLETE_APPLE: u32 = 37143;
pub const GL_UNSIGNALED_APPLE: u32 = 37144;
pub const GL_SIGNALED_APPLE: u32 = 37145;
pub const GL_ALREADY_SIGNALED_APPLE: u32 = 37146;
pub const GL_TIMEOUT_EXPIRED_APPLE: u32 = 37147;
pub const GL_CONDITION_SATISFIED_APPLE: u32 = 37148;
pub const GL_WAIT_FAILED_APPLE: u32 = 37149;
pub const GL_SYNC_FLUSH_COMMANDS_BIT_APPLE: u32 = 1;
pub const GL_TIMEOUT_IGNORED_APPLE: i32 = -1;
pub const GL_APPLE_texture_format_BGRA8888: u32 = 1;
pub const GL_BGRA_EXT: u32 = 32993;
pub const GL_BGRA8_EXT: u32 = 37793;
pub const GL_APPLE_texture_max_level: u32 = 1;
pub const GL_TEXTURE_MAX_LEVEL_APPLE: u32 = 33085;
pub const GL_APPLE_texture_packed_float: u32 = 1;
pub const GL_UNSIGNED_INT_10F_11F_11F_REV_APPLE: u32 = 35899;
pub const GL_UNSIGNED_INT_5_9_9_9_REV_APPLE: u32 = 35902;
pub const GL_R11F_G11F_B10F_APPLE: u32 = 35898;
pub const GL_RGB9_E5_APPLE: u32 = 35901;
pub const GL_ARM_mali_program_binary: u32 = 1;
pub const GL_MALI_PROGRAM_BINARY_ARM: u32 = 36705;
pub const GL_ARM_mali_shader_binary: u32 = 1;
pub const GL_MALI_SHADER_BINARY_ARM: u32 = 36704;
pub const GL_ARM_rgba8: u32 = 1;
pub const GL_ARM_shader_framebuffer_fetch: u32 = 1;
pub const GL_FETCH_PER_SAMPLE_ARM: u32 = 36709;
pub const GL_FRAGMENT_SHADER_FRAMEBUFFER_FETCH_MRT_ARM: u32 = 36710;
pub const GL_ARM_shader_framebuffer_fetch_depth_stencil: u32 = 1;
pub const GL_DMP_program_binary: u32 = 1;
pub const GL_SMAPHS30_PROGRAM_BINARY_DMP: u32 = 37457;
pub const GL_SMAPHS_PROGRAM_BINARY_DMP: u32 = 37458;
pub const GL_DMP_PROGRAM_BINARY_DMP: u32 = 37459;
pub const GL_DMP_shader_binary: u32 = 1;
pub const GL_SHADER_BINARY_DMP: u32 = 37456;
pub const GL_EXT_EGL_image_array: u32 = 1;
pub const GL_EXT_EGL_image_storage: u32 = 1;
pub const GL_EXT_YUV_target: u32 = 1;
pub const GL_SAMPLER_EXTERNAL_2D_Y2Y_EXT: u32 = 35815;
pub const GL_EXT_base_instance: u32 = 1;
pub const GL_EXT_blend_func_extended: u32 = 1;
pub const GL_SRC1_COLOR_EXT: u32 = 35065;
pub const GL_SRC1_ALPHA_EXT: u32 = 34185;
pub const GL_ONE_MINUS_SRC1_COLOR_EXT: u32 = 35066;
pub const GL_ONE_MINUS_SRC1_ALPHA_EXT: u32 = 35067;
pub const GL_SRC_ALPHA_SATURATE_EXT: u32 = 776;
pub const GL_LOCATION_INDEX_EXT: u32 = 37647;
pub const GL_MAX_DUAL_SOURCE_DRAW_BUFFERS_EXT: u32 = 35068;
pub const GL_EXT_blend_minmax: u32 = 1;
pub const GL_MIN_EXT: u32 = 32775;
pub const GL_MAX_EXT: u32 = 32776;
pub const GL_EXT_buffer_storage: u32 = 1;
pub const GL_MAP_READ_BIT: u32 = 1;
pub const GL_MAP_WRITE_BIT: u32 = 2;
pub const GL_MAP_PERSISTENT_BIT_EXT: u32 = 64;
pub const GL_MAP_COHERENT_BIT_EXT: u32 = 128;
pub const GL_DYNAMIC_STORAGE_BIT_EXT: u32 = 256;
pub const GL_CLIENT_STORAGE_BIT_EXT: u32 = 512;
pub const GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT_EXT: u32 = 16384;
pub const GL_BUFFER_IMMUTABLE_STORAGE_EXT: u32 = 33311;
pub const GL_BUFFER_STORAGE_FLAGS_EXT: u32 = 33312;
pub const GL_EXT_clear_texture: u32 = 1;
pub const GL_EXT_clip_control: u32 = 1;
pub const GL_LOWER_LEFT_EXT: u32 = 36001;
pub const GL_UPPER_LEFT_EXT: u32 = 36002;
pub const GL_NEGATIVE_ONE_TO_ONE_EXT: u32 = 37726;
pub const GL_ZERO_TO_ONE_EXT: u32 = 37727;
pub const GL_CLIP_ORIGIN_EXT: u32 = 37724;
pub const GL_CLIP_DEPTH_MODE_EXT: u32 = 37725;
pub const GL_EXT_clip_cull_distance: u32 = 1;
pub const GL_MAX_CLIP_DISTANCES_EXT: u32 = 3378;
pub const GL_MAX_CULL_DISTANCES_EXT: u32 = 33529;
pub const GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES_EXT: u32 = 33530;
pub const GL_CLIP_DISTANCE0_EXT: u32 = 12288;
pub const GL_CLIP_DISTANCE1_EXT: u32 = 12289;
pub const GL_CLIP_DISTANCE2_EXT: u32 = 12290;
pub const GL_CLIP_DISTANCE3_EXT: u32 = 12291;
pub const GL_CLIP_DISTANCE4_EXT: u32 = 12292;
pub const GL_CLIP_DISTANCE5_EXT: u32 = 12293;
pub const GL_CLIP_DISTANCE6_EXT: u32 = 12294;
pub const GL_CLIP_DISTANCE7_EXT: u32 = 12295;
pub const GL_EXT_color_buffer_float: u32 = 1;
pub const GL_EXT_color_buffer_half_float: u32 = 1;
pub const GL_RGBA16F_EXT: u32 = 34842;
pub const GL_RGB16F_EXT: u32 = 34843;
pub const GL_RG16F_EXT: u32 = 33327;
pub const GL_R16F_EXT: u32 = 33325;
pub const GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT: u32 = 33297;
pub const GL_UNSIGNED_NORMALIZED_EXT: u32 = 35863;
pub const GL_EXT_conservative_depth: u32 = 1;
pub const GL_EXT_copy_image: u32 = 1;
pub const GL_EXT_debug_label: u32 = 1;
pub const GL_PROGRAM_PIPELINE_OBJECT_EXT: u32 = 35407;
pub const GL_PROGRAM_OBJECT_EXT: u32 = 35648;
pub const GL_SHADER_OBJECT_EXT: u32 = 35656;
pub const GL_BUFFER_OBJECT_EXT: u32 = 37201;
pub const GL_QUERY_OBJECT_EXT: u32 = 37203;
pub const GL_VERTEX_ARRAY_OBJECT_EXT: u32 = 37204;
pub const GL_TRANSFORM_FEEDBACK: u32 = 36386;
pub const GL_EXT_debug_marker: u32 = 1;
pub const GL_EXT_depth_clamp: u32 = 1;
pub const GL_DEPTH_CLAMP_EXT: u32 = 34383;
pub const GL_EXT_discard_framebuffer: u32 = 1;
pub const GL_COLOR_EXT: u32 = 6144;
pub const GL_DEPTH_EXT: u32 = 6145;
pub const GL_STENCIL_EXT: u32 = 6146;
pub const GL_EXT_disjoint_timer_query: u32 = 1;
pub const GL_QUERY_COUNTER_BITS_EXT: u32 = 34916;
pub const GL_CURRENT_QUERY_EXT: u32 = 34917;
pub const GL_QUERY_RESULT_EXT: u32 = 34918;
pub const GL_QUERY_RESULT_AVAILABLE_EXT: u32 = 34919;
pub const GL_TIME_ELAPSED_EXT: u32 = 35007;
pub const GL_TIMESTAMP_EXT: u32 = 36392;
pub const GL_GPU_DISJOINT_EXT: u32 = 36795;
pub const GL_EXT_draw_buffers: u32 = 1;
pub const GL_MAX_COLOR_ATTACHMENTS_EXT: u32 = 36063;
pub const GL_MAX_DRAW_BUFFERS_EXT: u32 = 34852;
pub const GL_DRAW_BUFFER0_EXT: u32 = 34853;
pub const GL_DRAW_BUFFER1_EXT: u32 = 34854;
pub const GL_DRAW_BUFFER2_EXT: u32 = 34855;
pub const GL_DRAW_BUFFER3_EXT: u32 = 34856;
pub const GL_DRAW_BUFFER4_EXT: u32 = 34857;
pub const GL_DRAW_BUFFER5_EXT: u32 = 34858;
pub const GL_DRAW_BUFFER6_EXT: u32 = 34859;
pub const GL_DRAW_BUFFER7_EXT: u32 = 34860;
pub const GL_DRAW_BUFFER8_EXT: u32 = 34861;
pub const GL_DRAW_BUFFER9_EXT: u32 = 34862;
pub const GL_DRAW_BUFFER10_EXT: u32 = 34863;
pub const GL_DRAW_BUFFER11_EXT: u32 = 34864;
pub const GL_DRAW_BUFFER12_EXT: u32 = 34865;
pub const GL_DRAW_BUFFER13_EXT: u32 = 34866;
pub const GL_DRAW_BUFFER14_EXT: u32 = 34867;
pub const GL_DRAW_BUFFER15_EXT: u32 = 34868;
pub const GL_COLOR_ATTACHMENT0_EXT: u32 = 36064;
pub const GL_COLOR_ATTACHMENT1_EXT: u32 = 36065;
pub const GL_COLOR_ATTACHMENT2_EXT: u32 = 36066;
pub const GL_COLOR_ATTACHMENT3_EXT: u32 = 36067;
pub const GL_COLOR_ATTACHMENT4_EXT: u32 = 36068;
pub const GL_COLOR_ATTACHMENT5_EXT: u32 = 36069;
pub const GL_COLOR_ATTACHMENT6_EXT: u32 = 36070;
pub const GL_COLOR_ATTACHMENT7_EXT: u32 = 36071;
pub const GL_COLOR_ATTACHMENT8_EXT: u32 = 36072;
pub const GL_COLOR_ATTACHMENT9_EXT: u32 = 36073;
pub const GL_COLOR_ATTACHMENT10_EXT: u32 = 36074;
pub const GL_COLOR_ATTACHMENT11_EXT: u32 = 36075;
pub const GL_COLOR_ATTACHMENT12_EXT: u32 = 36076;
pub const GL_COLOR_ATTACHMENT13_EXT: u32 = 36077;
pub const GL_COLOR_ATTACHMENT14_EXT: u32 = 36078;
pub const GL_COLOR_ATTACHMENT15_EXT: u32 = 36079;
pub const GL_EXT_draw_buffers_indexed: u32 = 1;
pub const GL_EXT_draw_elements_base_vertex: u32 = 1;
pub const GL_EXT_draw_instanced: u32 = 1;
pub const GL_EXT_draw_transform_feedback: u32 = 1;
pub const GL_EXT_external_buffer: u32 = 1;
pub const GL_EXT_float_blend: u32 = 1;
pub const GL_EXT_geometry_point_size: u32 = 1;
pub const GL_EXT_geometry_shader: u32 = 1;
pub const GL_GEOMETRY_SHADER_EXT: u32 = 36313;
pub const GL_GEOMETRY_SHADER_BIT_EXT: u32 = 4;
pub const GL_GEOMETRY_LINKED_VERTICES_OUT_EXT: u32 = 35094;
pub const GL_GEOMETRY_LINKED_INPUT_TYPE_EXT: u32 = 35095;
pub const GL_GEOMETRY_LINKED_OUTPUT_TYPE_EXT: u32 = 35096;
pub const GL_GEOMETRY_SHADER_INVOCATIONS_EXT: u32 = 34943;
pub const GL_LAYER_PROVOKING_VERTEX_EXT: u32 = 33374;
pub const GL_LINES_ADJACENCY_EXT: u32 = 10;
pub const GL_LINE_STRIP_ADJACENCY_EXT: u32 = 11;
pub const GL_TRIANGLES_ADJACENCY_EXT: u32 = 12;
pub const GL_TRIANGLE_STRIP_ADJACENCY_EXT: u32 = 13;
pub const GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT: u32 = 36319;
pub const GL_MAX_GEOMETRY_UNIFORM_BLOCKS_EXT: u32 = 35372;
pub const GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS_EXT: u32 = 35378;
pub const GL_MAX_GEOMETRY_INPUT_COMPONENTS_EXT: u32 = 37155;
pub const GL_MAX_GEOMETRY_OUTPUT_COMPONENTS_EXT: u32 = 37156;
pub const GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT: u32 = 36320;
pub const GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT: u32 = 36321;
pub const GL_MAX_GEOMETRY_SHADER_INVOCATIONS_EXT: u32 = 36442;
pub const GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT: u32 = 35881;
pub const GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS_EXT: u32 = 37583;
pub const GL_MAX_GEOMETRY_ATOMIC_COUNTERS_EXT: u32 = 37589;
pub const GL_MAX_GEOMETRY_IMAGE_UNIFORMS_EXT: u32 = 37069;
pub const GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS_EXT: u32 = 37079;
pub const GL_FIRST_VERTEX_CONVENTION_EXT: u32 = 36429;
pub const GL_LAST_VERTEX_CONVENTION_EXT: u32 = 36430;
pub const GL_UNDEFINED_VERTEX_EXT: u32 = 33376;
pub const GL_PRIMITIVES_GENERATED_EXT: u32 = 35975;
pub const GL_FRAMEBUFFER_DEFAULT_LAYERS_EXT: u32 = 37650;
pub const GL_MAX_FRAMEBUFFER_LAYERS_EXT: u32 = 37655;
pub const GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT: u32 = 36264;
pub const GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT: u32 = 36263;
pub const GL_REFERENCED_BY_GEOMETRY_SHADER_EXT: u32 = 37641;
pub const GL_EXT_gpu_shader5: u32 = 1;
pub const GL_EXT_instanced_arrays: u32 = 1;
pub const GL_VERTEX_ATTRIB_ARRAY_DIVISOR_EXT: u32 = 35070;
pub const GL_EXT_map_buffer_range: u32 = 1;
pub const GL_MAP_READ_BIT_EXT: u32 = 1;
pub const GL_MAP_WRITE_BIT_EXT: u32 = 2;
pub const GL_MAP_INVALIDATE_RANGE_BIT_EXT: u32 = 4;
pub const GL_MAP_INVALIDATE_BUFFER_BIT_EXT: u32 = 8;
pub const GL_MAP_FLUSH_EXPLICIT_BIT_EXT: u32 = 16;
pub const GL_MAP_UNSYNCHRONIZED_BIT_EXT: u32 = 32;
pub const GL_EXT_memory_object: u32 = 1;
pub const GL_TEXTURE_TILING_EXT: u32 = 38272;
pub const GL_DEDICATED_MEMORY_OBJECT_EXT: u32 = 38273;
pub const GL_PROTECTED_MEMORY_OBJECT_EXT: u32 = 38299;
pub const GL_NUM_TILING_TYPES_EXT: u32 = 38274;
pub const GL_TILING_TYPES_EXT: u32 = 38275;
pub const GL_OPTIMAL_TILING_EXT: u32 = 38276;
pub const GL_LINEAR_TILING_EXT: u32 = 38277;
pub const GL_NUM_DEVICE_UUIDS_EXT: u32 = 38294;
pub const GL_DEVICE_UUID_EXT: u32 = 38295;
pub const GL_DRIVER_UUID_EXT: u32 = 38296;
pub const GL_UUID_SIZE_EXT: u32 = 16;
pub const GL_EXT_memory_object_fd: u32 = 1;
pub const GL_HANDLE_TYPE_OPAQUE_FD_EXT: u32 = 38278;
pub const GL_EXT_memory_object_win32: u32 = 1;
pub const GL_HANDLE_TYPE_OPAQUE_WIN32_EXT: u32 = 38279;
pub const GL_HANDLE_TYPE_OPAQUE_WIN32_KMT_EXT: u32 = 38280;
pub const GL_DEVICE_LUID_EXT: u32 = 38297;
pub const GL_DEVICE_NODE_MASK_EXT: u32 = 38298;
pub const GL_LUID_SIZE_EXT: u32 = 8;
pub const GL_HANDLE_TYPE_D3D12_TILEPOOL_EXT: u32 = 38281;
pub const GL_HANDLE_TYPE_D3D12_RESOURCE_EXT: u32 = 38282;
pub const GL_HANDLE_TYPE_D3D11_IMAGE_EXT: u32 = 38283;
pub const GL_HANDLE_TYPE_D3D11_IMAGE_KMT_EXT: u32 = 38284;
pub const GL_EXT_multi_draw_arrays: u32 = 1;
pub const GL_EXT_multi_draw_indirect: u32 = 1;
pub const GL_EXT_multisampled_compatibility: u32 = 1;
pub const GL_MULTISAMPLE_EXT: u32 = 32925;
pub const GL_SAMPLE_ALPHA_TO_ONE_EXT: u32 = 32927;
pub const GL_EXT_multisampled_render_to_texture: u32 = 1;
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_SAMPLES_EXT: u32 = 36204;
pub const GL_RENDERBUFFER_SAMPLES_EXT: u32 = 36011;
pub const GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT: u32 = 36182;
pub const GL_MAX_SAMPLES_EXT: u32 = 36183;
pub const GL_EXT_multiview_draw_buffers: u32 = 1;
pub const GL_COLOR_ATTACHMENT_EXT: u32 = 37104;
pub const GL_MULTIVIEW_EXT: u32 = 37105;
pub const GL_DRAW_BUFFER_EXT: u32 = 3073;
pub const GL_READ_BUFFER_EXT: u32 = 3074;
pub const GL_MAX_MULTIVIEW_BUFFERS_EXT: u32 = 37106;
pub const GL_EXT_multiview_tessellation_geometry_shader: u32 = 1;
pub const GL_EXT_multiview_texture_multisample: u32 = 1;
pub const GL_EXT_multiview_timer_query: u32 = 1;
pub const GL_EXT_occlusion_query_boolean: u32 = 1;
pub const GL_ANY_SAMPLES_PASSED_EXT: u32 = 35887;
pub const GL_ANY_SAMPLES_PASSED_CONSERVATIVE_EXT: u32 = 36202;
pub const GL_EXT_polygon_offset_clamp: u32 = 1;
pub const GL_POLYGON_OFFSET_CLAMP_EXT: u32 = 36379;
pub const GL_EXT_post_depth_coverage: u32 = 1;
pub const GL_EXT_primitive_bounding_box: u32 = 1;
pub const GL_PRIMITIVE_BOUNDING_BOX_EXT: u32 = 37566;
pub const GL_EXT_protected_textures: u32 = 1;
pub const GL_CONTEXT_FLAG_PROTECTED_CONTENT_BIT_EXT: u32 = 16;
pub const GL_TEXTURE_PROTECTED_EXT: u32 = 35834;
pub const GL_EXT_pvrtc_sRGB: u32 = 1;
pub const GL_COMPRESSED_SRGB_PVRTC_2BPPV1_EXT: u32 = 35412;
pub const GL_COMPRESSED_SRGB_PVRTC_4BPPV1_EXT: u32 = 35413;
pub const GL_COMPRESSED_SRGB_ALPHA_PVRTC_2BPPV1_EXT: u32 = 35414;
pub const GL_COMPRESSED_SRGB_ALPHA_PVRTC_4BPPV1_EXT: u32 = 35415;
pub const GL_COMPRESSED_SRGB_ALPHA_PVRTC_2BPPV2_IMG: u32 = 37872;
pub const GL_COMPRESSED_SRGB_ALPHA_PVRTC_4BPPV2_IMG: u32 = 37873;
pub const GL_EXT_raster_multisample: u32 = 1;
pub const GL_RASTER_MULTISAMPLE_EXT: u32 = 37671;
pub const GL_RASTER_SAMPLES_EXT: u32 = 37672;
pub const GL_MAX_RASTER_SAMPLES_EXT: u32 = 37673;
pub const GL_RASTER_FIXED_SAMPLE_LOCATIONS_EXT: u32 = 37674;
pub const GL_MULTISAMPLE_RASTERIZATION_ALLOWED_EXT: u32 = 37675;
pub const GL_EFFECTIVE_RASTER_SAMPLES_EXT: u32 = 37676;
pub const GL_EXT_read_format_bgra: u32 = 1;
pub const GL_UNSIGNED_SHORT_4_4_4_4_REV_EXT: u32 = 33637;
pub const GL_UNSIGNED_SHORT_1_5_5_5_REV_EXT: u32 = 33638;
pub const GL_EXT_render_snorm: u32 = 1;
pub const GL_R8_SNORM: u32 = 36756;
pub const GL_RG8_SNORM: u32 = 36757;
pub const GL_RGBA8_SNORM: u32 = 36759;
pub const GL_R16_SNORM_EXT: u32 = 36760;
pub const GL_RG16_SNORM_EXT: u32 = 36761;
pub const GL_RGBA16_SNORM_EXT: u32 = 36763;
pub const GL_EXT_robustness: u32 = 1;
pub const GL_GUILTY_CONTEXT_RESET_EXT: u32 = 33363;
pub const GL_INNOCENT_CONTEXT_RESET_EXT: u32 = 33364;
pub const GL_UNKNOWN_CONTEXT_RESET_EXT: u32 = 33365;
pub const GL_CONTEXT_ROBUST_ACCESS_EXT: u32 = 37107;
pub const GL_RESET_NOTIFICATION_STRATEGY_EXT: u32 = 33366;
pub const GL_LOSE_CONTEXT_ON_RESET_EXT: u32 = 33362;
pub const GL_NO_RESET_NOTIFICATION_EXT: u32 = 33377;
pub const GL_EXT_sRGB: u32 = 1;
pub const GL_SRGB_EXT: u32 = 35904;
pub const GL_SRGB_ALPHA_EXT: u32 = 35906;
pub const GL_SRGB8_ALPHA8_EXT: u32 = 35907;
pub const GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT: u32 = 33296;
pub const GL_EXT_sRGB_write_control: u32 = 1;
pub const GL_FRAMEBUFFER_SRGB_EXT: u32 = 36281;
pub const GL_EXT_semaphore: u32 = 1;
pub const GL_LAYOUT_GENERAL_EXT: u32 = 38285;
pub const GL_LAYOUT_COLOR_ATTACHMENT_EXT: u32 = 38286;
pub const GL_LAYOUT_DEPTH_STENCIL_ATTACHMENT_EXT: u32 = 38287;
pub const GL_LAYOUT_DEPTH_STENCIL_READ_ONLY_EXT: u32 = 38288;
pub const GL_LAYOUT_SHADER_READ_ONLY_EXT: u32 = 38289;
pub const GL_LAYOUT_TRANSFER_SRC_EXT: u32 = 38290;
pub const GL_LAYOUT_TRANSFER_DST_EXT: u32 = 38291;
pub const GL_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_EXT: u32 = 38192;
pub const GL_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_EXT: u32 = 38193;
pub const GL_EXT_semaphore_fd: u32 = 1;
pub const GL_EXT_semaphore_win32: u32 = 1;
pub const GL_HANDLE_TYPE_D3D12_FENCE_EXT: u32 = 38292;
pub const GL_D3D12_FENCE_VALUE_EXT: u32 = 38293;
pub const GL_EXT_separate_shader_objects: u32 = 1;
pub const GL_ACTIVE_PROGRAM_EXT: u32 = 33369;
pub const GL_VERTEX_SHADER_BIT_EXT: u32 = 1;
pub const GL_FRAGMENT_SHADER_BIT_EXT: u32 = 2;
pub const GL_ALL_SHADER_BITS_EXT: u32 = 4294967295;
pub const GL_PROGRAM_SEPARABLE_EXT: u32 = 33368;
pub const GL_PROGRAM_PIPELINE_BINDING_EXT: u32 = 33370;
pub const GL_EXT_shader_framebuffer_fetch: u32 = 1;
pub const GL_FRAGMENT_SHADER_DISCARDS_SAMPLES_EXT: u32 = 35410;
pub const GL_EXT_shader_framebuffer_fetch_non_coherent: u32 = 1;
pub const GL_EXT_shader_group_vote: u32 = 1;
pub const GL_EXT_shader_implicit_conversions: u32 = 1;
pub const GL_EXT_shader_integer_mix: u32 = 1;
pub const GL_EXT_shader_io_blocks: u32 = 1;
pub const GL_EXT_shader_non_constant_global_initializers: u32 = 1;
pub const GL_EXT_shader_pixel_local_storage: u32 = 1;
pub const GL_MAX_SHADER_PIXEL_LOCAL_STORAGE_FAST_SIZE_EXT: u32 = 36707;
pub const GL_MAX_SHADER_PIXEL_LOCAL_STORAGE_SIZE_EXT: u32 = 36711;
pub const GL_SHADER_PIXEL_LOCAL_STORAGE_EXT: u32 = 36708;
pub const GL_EXT_shader_pixel_local_storage2: u32 = 1;
pub const GL_MAX_SHADER_COMBINED_LOCAL_STORAGE_FAST_SIZE_EXT: u32 = 38480;
pub const GL_MAX_SHADER_COMBINED_LOCAL_STORAGE_SIZE_EXT: u32 = 38481;
pub const GL_FRAMEBUFFER_INCOMPLETE_INSUFFICIENT_SHADER_COMBINED_LOCAL_STORAGE_EXT: u32 = 38482;
pub const GL_EXT_shader_texture_lod: u32 = 1;
pub const GL_EXT_shadow_samplers: u32 = 1;
pub const GL_TEXTURE_COMPARE_MODE_EXT: u32 = 34892;
pub const GL_TEXTURE_COMPARE_FUNC_EXT: u32 = 34893;
pub const GL_COMPARE_REF_TO_TEXTURE_EXT: u32 = 34894;
pub const GL_SAMPLER_2D_SHADOW_EXT: u32 = 35682;
pub const GL_EXT_sparse_texture: u32 = 1;
pub const GL_TEXTURE_SPARSE_EXT: u32 = 37286;
pub const GL_VIRTUAL_PAGE_SIZE_INDEX_EXT: u32 = 37287;
pub const GL_NUM_SPARSE_LEVELS_EXT: u32 = 37290;
pub const GL_NUM_VIRTUAL_PAGE_SIZES_EXT: u32 = 37288;
pub const GL_VIRTUAL_PAGE_SIZE_X_EXT: u32 = 37269;
pub const GL_VIRTUAL_PAGE_SIZE_Y_EXT: u32 = 37270;
pub const GL_VIRTUAL_PAGE_SIZE_Z_EXT: u32 = 37271;
pub const GL_TEXTURE_2D_ARRAY: u32 = 35866;
pub const GL_TEXTURE_3D: u32 = 32879;
pub const GL_MAX_SPARSE_TEXTURE_SIZE_EXT: u32 = 37272;
pub const GL_MAX_SPARSE_3D_TEXTURE_SIZE_EXT: u32 = 37273;
pub const GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS_EXT: u32 = 37274;
pub const GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_EXT: u32 = 37289;
pub const GL_EXT_sparse_texture2: u32 = 1;
pub const GL_EXT_tessellation_point_size: u32 = 1;
pub const GL_EXT_tessellation_shader: u32 = 1;
pub const GL_PATCHES_EXT: u32 = 14;
pub const GL_PATCH_VERTICES_EXT: u32 = 36466;
pub const GL_TESS_CONTROL_OUTPUT_VERTICES_EXT: u32 = 36469;
pub const GL_TESS_GEN_MODE_EXT: u32 = 36470;
pub const GL_TESS_GEN_SPACING_EXT: u32 = 36471;
pub const GL_TESS_GEN_VERTEX_ORDER_EXT: u32 = 36472;
pub const GL_TESS_GEN_POINT_MODE_EXT: u32 = 36473;
pub const GL_ISOLINES_EXT: u32 = 36474;
pub const GL_QUADS_EXT: u32 = 7;
pub const GL_FRACTIONAL_ODD_EXT: u32 = 36475;
pub const GL_FRACTIONAL_EVEN_EXT: u32 = 36476;
pub const GL_MAX_PATCH_VERTICES_EXT: u32 = 36477;
pub const GL_MAX_TESS_GEN_LEVEL_EXT: u32 = 36478;
pub const GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS_EXT: u32 = 36479;
pub const GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS_EXT: u32 = 36480;
pub const GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS_EXT: u32 = 36481;
pub const GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS_EXT: u32 = 36482;
pub const GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS_EXT: u32 = 36483;
pub const GL_MAX_TESS_PATCH_COMPONENTS_EXT: u32 = 36484;
pub const GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS_EXT: u32 = 36485;
pub const GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS_EXT: u32 = 36486;
pub const GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS_EXT: u32 = 36489;
pub const GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS_EXT: u32 = 36490;
pub const GL_MAX_TESS_CONTROL_INPUT_COMPONENTS_EXT: u32 = 34924;
pub const GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS_EXT: u32 = 34925;
pub const GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS_EXT: u32 = 36382;
pub const GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS_EXT: u32 = 36383;
pub const GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS_EXT: u32 = 37581;
pub const GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS_EXT: u32 = 37582;
pub const GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS_EXT: u32 = 37587;
pub const GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS_EXT: u32 = 37588;
pub const GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS_EXT: u32 = 37067;
pub const GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS_EXT: u32 = 37068;
pub const GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS_EXT: u32 = 37080;
pub const GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS_EXT: u32 = 37081;
pub const GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED: u32 = 33313;
pub const GL_IS_PER_PATCH_EXT: u32 = 37607;
pub const GL_REFERENCED_BY_TESS_CONTROL_SHADER_EXT: u32 = 37639;
pub const GL_REFERENCED_BY_TESS_EVALUATION_SHADER_EXT: u32 = 37640;
pub const GL_TESS_CONTROL_SHADER_EXT: u32 = 36488;
pub const GL_TESS_EVALUATION_SHADER_EXT: u32 = 36487;
pub const GL_TESS_CONTROL_SHADER_BIT_EXT: u32 = 8;
pub const GL_TESS_EVALUATION_SHADER_BIT_EXT: u32 = 16;
pub const GL_EXT_texture_border_clamp: u32 = 1;
pub const GL_TEXTURE_BORDER_COLOR_EXT: u32 = 4100;
pub const GL_CLAMP_TO_BORDER_EXT: u32 = 33069;
pub const GL_EXT_texture_buffer: u32 = 1;
pub const GL_TEXTURE_BUFFER_EXT: u32 = 35882;
pub const GL_TEXTURE_BUFFER_BINDING_EXT: u32 = 35882;
pub const GL_MAX_TEXTURE_BUFFER_SIZE_EXT: u32 = 35883;
pub const GL_TEXTURE_BINDING_BUFFER_EXT: u32 = 35884;
pub const GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT: u32 = 35885;
pub const GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT_EXT: u32 = 37279;
pub const GL_SAMPLER_BUFFER_EXT: u32 = 36290;
pub const GL_INT_SAMPLER_BUFFER_EXT: u32 = 36304;
pub const GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT: u32 = 36312;
pub const GL_IMAGE_BUFFER_EXT: u32 = 36945;
pub const GL_INT_IMAGE_BUFFER_EXT: u32 = 36956;
pub const GL_UNSIGNED_INT_IMAGE_BUFFER_EXT: u32 = 36967;
pub const GL_TEXTURE_BUFFER_OFFSET_EXT: u32 = 37277;
pub const GL_TEXTURE_BUFFER_SIZE_EXT: u32 = 37278;
pub const GL_EXT_texture_compression_astc_decode_mode: u32 = 1;
pub const GL_TEXTURE_ASTC_DECODE_PRECISION_EXT: u32 = 36713;
pub const GL_EXT_texture_compression_bptc: u32 = 1;
pub const GL_COMPRESSED_RGBA_BPTC_UNORM_EXT: u32 = 36492;
pub const GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT: u32 = 36493;
pub const GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT: u32 = 36494;
pub const GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT: u32 = 36495;
pub const GL_EXT_texture_compression_dxt1: u32 = 1;
pub const GL_COMPRESSED_RGB_S3TC_DXT1_EXT: u32 = 33776;
pub const GL_COMPRESSED_RGBA_S3TC_DXT1_EXT: u32 = 33777;
pub const GL_EXT_texture_compression_rgtc: u32 = 1;
pub const GL_COMPRESSED_RED_RGTC1_EXT: u32 = 36283;
pub const GL_COMPRESSED_SIGNED_RED_RGTC1_EXT: u32 = 36284;
pub const GL_COMPRESSED_RED_GREEN_RGTC2_EXT: u32 = 36285;
pub const GL_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT: u32 = 36286;
pub const GL_EXT_texture_compression_s3tc: u32 = 1;
pub const GL_COMPRESSED_RGBA_S3TC_DXT3_EXT: u32 = 33778;
pub const GL_COMPRESSED_RGBA_S3TC_DXT5_EXT: u32 = 33779;
pub const GL_EXT_texture_compression_s3tc_srgb: u32 = 1;
pub const GL_COMPRESSED_SRGB_S3TC_DXT1_EXT: u32 = 35916;
pub const GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT: u32 = 35917;
pub const GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT: u32 = 35918;
pub const GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT: u32 = 35919;
pub const GL_EXT_texture_cube_map_array: u32 = 1;
pub const GL_TEXTURE_CUBE_MAP_ARRAY_EXT: u32 = 36873;
pub const GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_EXT: u32 = 36874;
pub const GL_SAMPLER_CUBE_MAP_ARRAY_EXT: u32 = 36876;
pub const GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_EXT: u32 = 36877;
pub const GL_INT_SAMPLER_CUBE_MAP_ARRAY_EXT: u32 = 36878;
pub const GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_EXT: u32 = 36879;
pub const GL_IMAGE_CUBE_MAP_ARRAY_EXT: u32 = 36948;
pub const GL_INT_IMAGE_CUBE_MAP_ARRAY_EXT: u32 = 36959;
pub const GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXT: u32 = 36970;
pub const GL_EXT_texture_filter_anisotropic: u32 = 1;
pub const GL_TEXTURE_MAX_ANISOTROPY_EXT: u32 = 34046;
pub const GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT: u32 = 34047;
pub const GL_EXT_texture_filter_minmax: u32 = 1;
pub const GL_TEXTURE_REDUCTION_MODE_EXT: u32 = 37734;
pub const GL_WEIGHTED_AVERAGE_EXT: u32 = 37735;
pub const GL_EXT_texture_format_BGRA8888: u32 = 1;
pub const GL_EXT_texture_format_sRGB_override: u32 = 1;
pub const GL_TEXTURE_FORMAT_SRGB_OVERRIDE_EXT: u32 = 36799;
pub const GL_EXT_texture_mirror_clamp_to_edge: u32 = 1;
pub const GL_MIRROR_CLAMP_TO_EDGE_EXT: u32 = 34627;
pub const GL_EXT_texture_norm16: u32 = 1;
pub const GL_R16_EXT: u32 = 33322;
pub const GL_RG16_EXT: u32 = 33324;
pub const GL_RGBA16_EXT: u32 = 32859;
pub const GL_RGB16_EXT: u32 = 32852;
pub const GL_RGB16_SNORM_EXT: u32 = 36762;
pub const GL_EXT_texture_query_lod: u32 = 1;
pub const GL_EXT_texture_rg: u32 = 1;
pub const GL_RED_EXT: u32 = 6403;
pub const GL_RG_EXT: u32 = 33319;
pub const GL_R8_EXT: u32 = 33321;
pub const GL_RG8_EXT: u32 = 33323;
pub const GL_EXT_texture_sRGB_R8: u32 = 1;
pub const GL_SR8_EXT: u32 = 36797;
pub const GL_EXT_texture_sRGB_RG8: u32 = 1;
pub const GL_SRG8_EXT: u32 = 36798;
pub const GL_EXT_texture_sRGB_decode: u32 = 1;
pub const GL_TEXTURE_SRGB_DECODE_EXT: u32 = 35400;
pub const GL_DECODE_EXT: u32 = 35401;
pub const GL_SKIP_DECODE_EXT: u32 = 35402;
pub const GL_EXT_texture_shadow_lod: u32 = 1;
pub const GL_EXT_texture_storage: u32 = 1;
pub const GL_TEXTURE_IMMUTABLE_FORMAT_EXT: u32 = 37167;
pub const GL_ALPHA8_EXT: u32 = 32828;
pub const GL_LUMINANCE8_EXT: u32 = 32832;
pub const GL_LUMINANCE8_ALPHA8_EXT: u32 = 32837;
pub const GL_RGBA32F_EXT: u32 = 34836;
pub const GL_RGB32F_EXT: u32 = 34837;
pub const GL_ALPHA32F_EXT: u32 = 34838;
pub const GL_LUMINANCE32F_EXT: u32 = 34840;
pub const GL_LUMINANCE_ALPHA32F_EXT: u32 = 34841;
pub const GL_ALPHA16F_EXT: u32 = 34844;
pub const GL_LUMINANCE16F_EXT: u32 = 34846;
pub const GL_LUMINANCE_ALPHA16F_EXT: u32 = 34847;
pub const GL_R32F_EXT: u32 = 33326;
pub const GL_RG32F_EXT: u32 = 33328;
pub const GL_EXT_texture_type_2_10_10_10_REV: u32 = 1;
pub const GL_UNSIGNED_INT_2_10_10_10_REV_EXT: u32 = 33640;
pub const GL_EXT_texture_view: u32 = 1;
pub const GL_TEXTURE_VIEW_MIN_LEVEL_EXT: u32 = 33499;
pub const GL_TEXTURE_VIEW_NUM_LEVELS_EXT: u32 = 33500;
pub const GL_TEXTURE_VIEW_MIN_LAYER_EXT: u32 = 33501;
pub const GL_TEXTURE_VIEW_NUM_LAYERS_EXT: u32 = 33502;
pub const GL_EXT_unpack_subimage: u32 = 1;
pub const GL_UNPACK_ROW_LENGTH_EXT: u32 = 3314;
pub const GL_UNPACK_SKIP_ROWS_EXT: u32 = 3315;
pub const GL_UNPACK_SKIP_PIXELS_EXT: u32 = 3316;
pub const GL_EXT_win32_keyed_mutex: u32 = 1;
pub const GL_EXT_window_rectangles: u32 = 1;
pub const GL_INCLUSIVE_EXT: u32 = 36624;
pub const GL_EXCLUSIVE_EXT: u32 = 36625;
pub const GL_WINDOW_RECTANGLE_EXT: u32 = 36626;
pub const GL_WINDOW_RECTANGLE_MODE_EXT: u32 = 36627;
pub const GL_MAX_WINDOW_RECTANGLES_EXT: u32 = 36628;
pub const GL_NUM_WINDOW_RECTANGLES_EXT: u32 = 36629;
pub const GL_FJ_shader_binary_GCCSO: u32 = 1;
pub const GL_GCCSO_SHADER_BINARY_FJ: u32 = 37472;
pub const GL_IMG_bindless_texture: u32 = 1;
pub const GL_IMG_framebuffer_downsample: u32 = 1;
pub const GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_AND_DOWNSAMPLE_IMG: u32 = 37180;
pub const GL_NUM_DOWNSAMPLE_SCALES_IMG: u32 = 37181;
pub const GL_DOWNSAMPLE_SCALES_IMG: u32 = 37182;
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_SCALE_IMG: u32 = 37183;
pub const GL_IMG_multisampled_render_to_texture: u32 = 1;
pub const GL_RENDERBUFFER_SAMPLES_IMG: u32 = 37171;
pub const GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_IMG: u32 = 37172;
pub const GL_MAX_SAMPLES_IMG: u32 = 37173;
pub const GL_TEXTURE_SAMPLES_IMG: u32 = 37174;
pub const GL_IMG_program_binary: u32 = 1;
pub const GL_SGX_PROGRAM_BINARY_IMG: u32 = 37168;
pub const GL_IMG_read_format: u32 = 1;
pub const GL_BGRA_IMG: u32 = 32993;
pub const GL_UNSIGNED_SHORT_4_4_4_4_REV_IMG: u32 = 33637;
pub const GL_IMG_shader_binary: u32 = 1;
pub const GL_SGX_BINARY_IMG: u32 = 35850;
pub const GL_IMG_texture_compression_pvrtc: u32 = 1;
pub const GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG: u32 = 35840;
pub const GL_COMPRESSED_RGB_PVRTC_2BPPV1_IMG: u32 = 35841;
pub const GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG: u32 = 35842;
pub const GL_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG: u32 = 35843;
pub const GL_IMG_texture_compression_pvrtc2: u32 = 1;
pub const GL_COMPRESSED_RGBA_PVRTC_2BPPV2_IMG: u32 = 37175;
pub const GL_COMPRESSED_RGBA_PVRTC_4BPPV2_IMG: u32 = 37176;
pub const GL_IMG_texture_filter_cubic: u32 = 1;
pub const GL_CUBIC_IMG: u32 = 37177;
pub const GL_CUBIC_MIPMAP_NEAREST_IMG: u32 = 37178;
pub const GL_CUBIC_MIPMAP_LINEAR_IMG: u32 = 37179;
pub const GL_INTEL_blackhole_render: u32 = 1;
pub const GL_BLACKHOLE_RENDER_INTEL: u32 = 33788;
pub const GL_INTEL_conservative_rasterization: u32 = 1;
pub const GL_CONSERVATIVE_RASTERIZATION_INTEL: u32 = 33790;
pub const GL_INTEL_framebuffer_CMAA: u32 = 1;
pub const GL_INTEL_performance_query: u32 = 1;
pub const GL_PERFQUERY_SINGLE_CONTEXT_INTEL: u32 = 0;
pub const GL_PERFQUERY_GLOBAL_CONTEXT_INTEL: u32 = 1;
pub const GL_PERFQUERY_WAIT_INTEL: u32 = 33787;
pub const GL_PERFQUERY_FLUSH_INTEL: u32 = 33786;
pub const GL_PERFQUERY_DONOT_FLUSH_INTEL: u32 = 33785;
pub const GL_PERFQUERY_COUNTER_EVENT_INTEL: u32 = 38128;
pub const GL_PERFQUERY_COUNTER_DURATION_NORM_INTEL: u32 = 38129;
pub const GL_PERFQUERY_COUNTER_DURATION_RAW_INTEL: u32 = 38130;
pub const GL_PERFQUERY_COUNTER_THROUGHPUT_INTEL: u32 = 38131;
pub const GL_PERFQUERY_COUNTER_RAW_INTEL: u32 = 38132;
pub const GL_PERFQUERY_COUNTER_TIMESTAMP_INTEL: u32 = 38133;
pub const GL_PERFQUERY_COUNTER_DATA_UINT32_INTEL: u32 = 38136;
pub const GL_PERFQUERY_COUNTER_DATA_UINT64_INTEL: u32 = 38137;
pub const GL_PERFQUERY_COUNTER_DATA_FLOAT_INTEL: u32 = 38138;
pub const GL_PERFQUERY_COUNTER_DATA_DOUBLE_INTEL: u32 = 38139;
pub const GL_PERFQUERY_COUNTER_DATA_BOOL32_INTEL: u32 = 38140;
pub const GL_PERFQUERY_QUERY_NAME_LENGTH_MAX_INTEL: u32 = 38141;
pub const GL_PERFQUERY_COUNTER_NAME_LENGTH_MAX_INTEL: u32 = 38142;
pub const GL_PERFQUERY_COUNTER_DESC_LENGTH_MAX_INTEL: u32 = 38143;
pub const GL_PERFQUERY_GPA_EXTENDED_COUNTERS_INTEL: u32 = 38144;
pub const GL_MESA_framebuffer_flip_y: u32 = 1;
pub const GL_FRAMEBUFFER_FLIP_Y_MESA: u32 = 35771;
pub const GL_MESA_program_binary_formats: u32 = 1;
pub const GL_PROGRAM_BINARY_FORMAT_MESA: u32 = 34655;
pub const GL_MESA_shader_integer_functions: u32 = 1;
pub const GL_NVX_blend_equation_advanced_multi_draw_buffers: u32 = 1;
pub const GL_NV_bindless_texture: u32 = 1;
pub const GL_NV_blend_equation_advanced: u32 = 1;
pub const GL_BLEND_OVERLAP_NV: u32 = 37505;
pub const GL_BLEND_PREMULTIPLIED_SRC_NV: u32 = 37504;
pub const GL_BLUE_NV: u32 = 6405;
pub const GL_COLORBURN_NV: u32 = 37530;
pub const GL_COLORDODGE_NV: u32 = 37529;
pub const GL_CONJOINT_NV: u32 = 37508;
pub const GL_CONTRAST_NV: u32 = 37537;
pub const GL_DARKEN_NV: u32 = 37527;
pub const GL_DIFFERENCE_NV: u32 = 37534;
pub const GL_DISJOINT_NV: u32 = 37507;
pub const GL_DST_ATOP_NV: u32 = 37519;
pub const GL_DST_IN_NV: u32 = 37515;
pub const GL_DST_NV: u32 = 37511;
pub const GL_DST_OUT_NV: u32 = 37517;
pub const GL_DST_OVER_NV: u32 = 37513;
pub const GL_EXCLUSION_NV: u32 = 37536;
pub const GL_GREEN_NV: u32 = 6404;
pub const GL_HARDLIGHT_NV: u32 = 37531;
pub const GL_HARDMIX_NV: u32 = 37545;
pub const GL_HSL_COLOR_NV: u32 = 37551;
pub const GL_HSL_HUE_NV: u32 = 37549;
pub const GL_HSL_LUMINOSITY_NV: u32 = 37552;
pub const GL_HSL_SATURATION_NV: u32 = 37550;
pub const GL_INVERT_OVG_NV: u32 = 37556;
pub const GL_INVERT_RGB_NV: u32 = 37539;
pub const GL_LIGHTEN_NV: u32 = 37528;
pub const GL_LINEARBURN_NV: u32 = 37541;
pub const GL_LINEARDODGE_NV: u32 = 37540;
pub const GL_LINEARLIGHT_NV: u32 = 37543;
pub const GL_MINUS_CLAMPED_NV: u32 = 37555;
pub const GL_MINUS_NV: u32 = 37535;
pub const GL_MULTIPLY_NV: u32 = 37524;
pub const GL_OVERLAY_NV: u32 = 37526;
pub const GL_PINLIGHT_NV: u32 = 37544;
pub const GL_PLUS_CLAMPED_ALPHA_NV: u32 = 37554;
pub const GL_PLUS_CLAMPED_NV: u32 = 37553;
pub const GL_PLUS_DARKER_NV: u32 = 37522;
pub const GL_PLUS_NV: u32 = 37521;
pub const GL_RED_NV: u32 = 6403;
pub const GL_SCREEN_NV: u32 = 37525;
pub const GL_SOFTLIGHT_NV: u32 = 37532;
pub const GL_SRC_ATOP_NV: u32 = 37518;
pub const GL_SRC_IN_NV: u32 = 37514;
pub const GL_SRC_NV: u32 = 37510;
pub const GL_SRC_OUT_NV: u32 = 37516;
pub const GL_SRC_OVER_NV: u32 = 37512;
pub const GL_UNCORRELATED_NV: u32 = 37506;
pub const GL_VIVIDLIGHT_NV: u32 = 37542;
pub const GL_XOR_NV: u32 = 5382;
pub const GL_NV_blend_equation_advanced_coherent: u32 = 1;
pub const GL_BLEND_ADVANCED_COHERENT_NV: u32 = 37509;
pub const GL_NV_blend_minmax_factor: u32 = 1;
pub const GL_FACTOR_MIN_AMD: u32 = 36892;
pub const GL_FACTOR_MAX_AMD: u32 = 36893;
pub const GL_NV_clip_space_w_scaling: u32 = 1;
pub const GL_VIEWPORT_POSITION_W_SCALE_NV: u32 = 37756;
pub const GL_VIEWPORT_POSITION_W_SCALE_X_COEFF_NV: u32 = 37757;
pub const GL_VIEWPORT_POSITION_W_SCALE_Y_COEFF_NV: u32 = 37758;
pub const GL_NV_compute_shader_derivatives: u32 = 1;
pub const GL_NV_conditional_render: u32 = 1;
pub const GL_QUERY_WAIT_NV: u32 = 36371;
pub const GL_QUERY_NO_WAIT_NV: u32 = 36372;
pub const GL_QUERY_BY_REGION_WAIT_NV: u32 = 36373;
pub const GL_QUERY_BY_REGION_NO_WAIT_NV: u32 = 36374;
pub const GL_NV_conservative_raster: u32 = 1;
pub const GL_CONSERVATIVE_RASTERIZATION_NV: u32 = 37702;
pub const GL_SUBPIXEL_PRECISION_BIAS_X_BITS_NV: u32 = 37703;
pub const GL_SUBPIXEL_PRECISION_BIAS_Y_BITS_NV: u32 = 37704;
pub const GL_MAX_SUBPIXEL_PRECISION_BIAS_BITS_NV: u32 = 37705;
pub const GL_NV_conservative_raster_pre_snap: u32 = 1;
pub const GL_CONSERVATIVE_RASTER_MODE_PRE_SNAP_NV: u32 = 38224;
pub const GL_NV_conservative_raster_pre_snap_triangles: u32 = 1;
pub const GL_CONSERVATIVE_RASTER_MODE_NV: u32 = 38221;
pub const GL_CONSERVATIVE_RASTER_MODE_POST_SNAP_NV: u32 = 38222;
pub const GL_CONSERVATIVE_RASTER_MODE_PRE_SNAP_TRIANGLES_NV: u32 = 38223;
pub const GL_NV_copy_buffer: u32 = 1;
pub const GL_COPY_READ_BUFFER_NV: u32 = 36662;
pub const GL_COPY_WRITE_BUFFER_NV: u32 = 36663;
pub const GL_NV_coverage_sample: u32 = 1;
pub const GL_COVERAGE_COMPONENT_NV: u32 = 36560;
pub const GL_COVERAGE_COMPONENT4_NV: u32 = 36561;
pub const GL_COVERAGE_ATTACHMENT_NV: u32 = 36562;
pub const GL_COVERAGE_BUFFERS_NV: u32 = 36563;
pub const GL_COVERAGE_SAMPLES_NV: u32 = 36564;
pub const GL_COVERAGE_ALL_FRAGMENTS_NV: u32 = 36565;
pub const GL_COVERAGE_EDGE_FRAGMENTS_NV: u32 = 36566;
pub const GL_COVERAGE_AUTOMATIC_NV: u32 = 36567;
pub const GL_COVERAGE_BUFFER_BIT_NV: u32 = 32768;
pub const GL_NV_depth_nonlinear: u32 = 1;
pub const GL_DEPTH_COMPONENT16_NONLINEAR_NV: u32 = 36396;
pub const GL_NV_draw_buffers: u32 = 1;
pub const GL_MAX_DRAW_BUFFERS_NV: u32 = 34852;
pub const GL_DRAW_BUFFER0_NV: u32 = 34853;
pub const GL_DRAW_BUFFER1_NV: u32 = 34854;
pub const GL_DRAW_BUFFER2_NV: u32 = 34855;
pub const GL_DRAW_BUFFER3_NV: u32 = 34856;
pub const GL_DRAW_BUFFER4_NV: u32 = 34857;
pub const GL_DRAW_BUFFER5_NV: u32 = 34858;
pub const GL_DRAW_BUFFER6_NV: u32 = 34859;
pub const GL_DRAW_BUFFER7_NV: u32 = 34860;
pub const GL_DRAW_BUFFER8_NV: u32 = 34861;
pub const GL_DRAW_BUFFER9_NV: u32 = 34862;
pub const GL_DRAW_BUFFER10_NV: u32 = 34863;
pub const GL_DRAW_BUFFER11_NV: u32 = 34864;
pub const GL_DRAW_BUFFER12_NV: u32 = 34865;
pub const GL_DRAW_BUFFER13_NV: u32 = 34866;
pub const GL_DRAW_BUFFER14_NV: u32 = 34867;
pub const GL_DRAW_BUFFER15_NV: u32 = 34868;
pub const GL_COLOR_ATTACHMENT0_NV: u32 = 36064;
pub const GL_COLOR_ATTACHMENT1_NV: u32 = 36065;
pub const GL_COLOR_ATTACHMENT2_NV: u32 = 36066;
pub const GL_COLOR_ATTACHMENT3_NV: u32 = 36067;
pub const GL_COLOR_ATTACHMENT4_NV: u32 = 36068;
pub const GL_COLOR_ATTACHMENT5_NV: u32 = 36069;
pub const GL_COLOR_ATTACHMENT6_NV: u32 = 36070;
pub const GL_COLOR_ATTACHMENT7_NV: u32 = 36071;
pub const GL_COLOR_ATTACHMENT8_NV: u32 = 36072;
pub const GL_COLOR_ATTACHMENT9_NV: u32 = 36073;
pub const GL_COLOR_ATTACHMENT10_NV: u32 = 36074;
pub const GL_COLOR_ATTACHMENT11_NV: u32 = 36075;
pub const GL_COLOR_ATTACHMENT12_NV: u32 = 36076;
pub const GL_COLOR_ATTACHMENT13_NV: u32 = 36077;
pub const GL_COLOR_ATTACHMENT14_NV: u32 = 36078;
pub const GL_COLOR_ATTACHMENT15_NV: u32 = 36079;
pub const GL_NV_draw_instanced: u32 = 1;
pub const GL_NV_draw_vulkan_image: u32 = 1;
pub const GL_NV_explicit_attrib_location: u32 = 1;
pub const GL_NV_fbo_color_attachments: u32 = 1;
pub const GL_MAX_COLOR_ATTACHMENTS_NV: u32 = 36063;
pub const GL_NV_fence: u32 = 1;
pub const GL_ALL_COMPLETED_NV: u32 = 34034;
pub const GL_FENCE_STATUS_NV: u32 = 34035;
pub const GL_FENCE_CONDITION_NV: u32 = 34036;
pub const GL_NV_fill_rectangle: u32 = 1;
pub const GL_FILL_RECTANGLE_NV: u32 = 37692;
pub const GL_NV_fragment_coverage_to_color: u32 = 1;
pub const GL_FRAGMENT_COVERAGE_TO_COLOR_NV: u32 = 37597;
pub const GL_FRAGMENT_COVERAGE_COLOR_NV: u32 = 37598;
pub const GL_NV_fragment_shader_barycentric: u32 = 1;
pub const GL_NV_fragment_shader_interlock: u32 = 1;
pub const GL_NV_framebuffer_blit: u32 = 1;
pub const GL_READ_FRAMEBUFFER_NV: u32 = 36008;
pub const GL_DRAW_FRAMEBUFFER_NV: u32 = 36009;
pub const GL_DRAW_FRAMEBUFFER_BINDING_NV: u32 = 36006;
pub const GL_READ_FRAMEBUFFER_BINDING_NV: u32 = 36010;
pub const GL_NV_framebuffer_mixed_samples: u32 = 1;
pub const GL_COVERAGE_MODULATION_TABLE_NV: u32 = 37681;
pub const GL_COLOR_SAMPLES_NV: u32 = 36384;
pub const GL_DEPTH_SAMPLES_NV: u32 = 37677;
pub const GL_STENCIL_SAMPLES_NV: u32 = 37678;
pub const GL_MIXED_DEPTH_SAMPLES_SUPPORTED_NV: u32 = 37679;
pub const GL_MIXED_STENCIL_SAMPLES_SUPPORTED_NV: u32 = 37680;
pub const GL_COVERAGE_MODULATION_NV: u32 = 37682;
pub const GL_COVERAGE_MODULATION_TABLE_SIZE_NV: u32 = 37683;
pub const GL_NV_framebuffer_multisample: u32 = 1;
pub const GL_RENDERBUFFER_SAMPLES_NV: u32 = 36011;
pub const GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_NV: u32 = 36182;
pub const GL_MAX_SAMPLES_NV: u32 = 36183;
pub const GL_NV_generate_mipmap_sRGB: u32 = 1;
pub const GL_NV_geometry_shader_passthrough: u32 = 1;
pub const GL_NV_gpu_shader5: u32 = 1;
pub const GL_INT64_NV: u32 = 5134;
pub const GL_UNSIGNED_INT64_NV: u32 = 5135;
pub const GL_INT8_NV: u32 = 36832;
pub const GL_INT8_VEC2_NV: u32 = 36833;
pub const GL_INT8_VEC3_NV: u32 = 36834;
pub const GL_INT8_VEC4_NV: u32 = 36835;
pub const GL_INT16_NV: u32 = 36836;
pub const GL_INT16_VEC2_NV: u32 = 36837;
pub const GL_INT16_VEC3_NV: u32 = 36838;
pub const GL_INT16_VEC4_NV: u32 = 36839;
pub const GL_INT64_VEC2_NV: u32 = 36841;
pub const GL_INT64_VEC3_NV: u32 = 36842;
pub const GL_INT64_VEC4_NV: u32 = 36843;
pub const GL_UNSIGNED_INT8_NV: u32 = 36844;
pub const GL_UNSIGNED_INT8_VEC2_NV: u32 = 36845;
pub const GL_UNSIGNED_INT8_VEC3_NV: u32 = 36846;
pub const GL_UNSIGNED_INT8_VEC4_NV: u32 = 36847;
pub const GL_UNSIGNED_INT16_NV: u32 = 36848;
pub const GL_UNSIGNED_INT16_VEC2_NV: u32 = 36849;
pub const GL_UNSIGNED_INT16_VEC3_NV: u32 = 36850;
pub const GL_UNSIGNED_INT16_VEC4_NV: u32 = 36851;
pub const GL_UNSIGNED_INT64_VEC2_NV: u32 = 36853;
pub const GL_UNSIGNED_INT64_VEC3_NV: u32 = 36854;
pub const GL_UNSIGNED_INT64_VEC4_NV: u32 = 36855;
pub const GL_FLOAT16_NV: u32 = 36856;
pub const GL_FLOAT16_VEC2_NV: u32 = 36857;
pub const GL_FLOAT16_VEC3_NV: u32 = 36858;
pub const GL_FLOAT16_VEC4_NV: u32 = 36859;
pub const GL_PATCHES: u32 = 14;
pub const GL_NV_image_formats: u32 = 1;
pub const GL_NV_instanced_arrays: u32 = 1;
pub const GL_VERTEX_ATTRIB_ARRAY_DIVISOR_NV: u32 = 35070;
pub const GL_NV_internalformat_sample_query: u32 = 1;
pub const GL_TEXTURE_2D_MULTISAMPLE: u32 = 37120;
pub const GL_TEXTURE_2D_MULTISAMPLE_ARRAY: u32 = 37122;
pub const GL_MULTISAMPLES_NV: u32 = 37745;
pub const GL_SUPERSAMPLE_SCALE_X_NV: u32 = 37746;
pub const GL_SUPERSAMPLE_SCALE_Y_NV: u32 = 37747;
pub const GL_CONFORMANT_NV: u32 = 37748;
pub const GL_NV_memory_attachment: u32 = 1;
pub const GL_ATTACHED_MEMORY_OBJECT_NV: u32 = 38308;
pub const GL_ATTACHED_MEMORY_OFFSET_NV: u32 = 38309;
pub const GL_MEMORY_ATTACHABLE_ALIGNMENT_NV: u32 = 38310;
pub const GL_MEMORY_ATTACHABLE_SIZE_NV: u32 = 38311;
pub const GL_MEMORY_ATTACHABLE_NV: u32 = 38312;
pub const GL_DETACHED_MEMORY_INCARNATION_NV: u32 = 38313;
pub const GL_DETACHED_TEXTURES_NV: u32 = 38314;
pub const GL_DETACHED_BUFFERS_NV: u32 = 38315;
pub const GL_MAX_DETACHED_TEXTURES_NV: u32 = 38316;
pub const GL_MAX_DETACHED_BUFFERS_NV: u32 = 38317;
pub const GL_NV_mesh_shader: u32 = 1;
pub const GL_MESH_SHADER_NV: u32 = 38233;
pub const GL_TASK_SHADER_NV: u32 = 38234;
pub const GL_MAX_MESH_UNIFORM_BLOCKS_NV: u32 = 36448;
pub const GL_MAX_MESH_TEXTURE_IMAGE_UNITS_NV: u32 = 36449;
pub const GL_MAX_MESH_IMAGE_UNIFORMS_NV: u32 = 36450;
pub const GL_MAX_MESH_UNIFORM_COMPONENTS_NV: u32 = 36451;
pub const GL_MAX_MESH_ATOMIC_COUNTER_BUFFERS_NV: u32 = 36452;
pub const GL_MAX_MESH_ATOMIC_COUNTERS_NV: u32 = 36453;
pub const GL_MAX_MESH_SHADER_STORAGE_BLOCKS_NV: u32 = 36454;
pub const GL_MAX_COMBINED_MESH_UNIFORM_COMPONENTS_NV: u32 = 36455;
pub const GL_MAX_TASK_UNIFORM_BLOCKS_NV: u32 = 36456;
pub const GL_MAX_TASK_TEXTURE_IMAGE_UNITS_NV: u32 = 36457;
pub const GL_MAX_TASK_IMAGE_UNIFORMS_NV: u32 = 36458;
pub const GL_MAX_TASK_UNIFORM_COMPONENTS_NV: u32 = 36459;
pub const GL_MAX_TASK_ATOMIC_COUNTER_BUFFERS_NV: u32 = 36460;
pub const GL_MAX_TASK_ATOMIC_COUNTERS_NV: u32 = 36461;
pub const GL_MAX_TASK_SHADER_STORAGE_BLOCKS_NV: u32 = 36462;
pub const GL_MAX_COMBINED_TASK_UNIFORM_COMPONENTS_NV: u32 = 36463;
pub const GL_MAX_MESH_WORK_GROUP_INVOCATIONS_NV: u32 = 38306;
pub const GL_MAX_TASK_WORK_GROUP_INVOCATIONS_NV: u32 = 38307;
pub const GL_MAX_MESH_TOTAL_MEMORY_SIZE_NV: u32 = 38198;
pub const GL_MAX_TASK_TOTAL_MEMORY_SIZE_NV: u32 = 38199;
pub const GL_MAX_MESH_OUTPUT_VERTICES_NV: u32 = 38200;
pub const GL_MAX_MESH_OUTPUT_PRIMITIVES_NV: u32 = 38201;
pub const GL_MAX_TASK_OUTPUT_COUNT_NV: u32 = 38202;
pub const GL_MAX_DRAW_MESH_TASKS_COUNT_NV: u32 = 38205;
pub const GL_MAX_MESH_VIEWS_NV: u32 = 38231;
pub const GL_MESH_OUTPUT_PER_VERTEX_GRANULARITY_NV: u32 = 37599;
pub const GL_MESH_OUTPUT_PER_PRIMITIVE_GRANULARITY_NV: u32 = 38211;
pub const GL_MAX_MESH_WORK_GROUP_SIZE_NV: u32 = 38203;
pub const GL_MAX_TASK_WORK_GROUP_SIZE_NV: u32 = 38204;
pub const GL_MESH_WORK_GROUP_SIZE_NV: u32 = 38206;
pub const GL_TASK_WORK_GROUP_SIZE_NV: u32 = 38207;
pub const GL_MESH_VERTICES_OUT_NV: u32 = 38265;
pub const GL_MESH_PRIMITIVES_OUT_NV: u32 = 38266;
pub const GL_MESH_OUTPUT_TYPE_NV: u32 = 38267;
pub const GL_UNIFORM_BLOCK_REFERENCED_BY_MESH_SHADER_NV: u32 = 38300;
pub const GL_UNIFORM_BLOCK_REFERENCED_BY_TASK_SHADER_NV: u32 = 38301;
pub const GL_REFERENCED_BY_MESH_SHADER_NV: u32 = 38304;
pub const GL_REFERENCED_BY_TASK_SHADER_NV: u32 = 38305;
pub const GL_MESH_SHADER_BIT_NV: u32 = 64;
pub const GL_TASK_SHADER_BIT_NV: u32 = 128;
pub const GL_MESH_SUBROUTINE_NV: u32 = 38268;
pub const GL_TASK_SUBROUTINE_NV: u32 = 38269;
pub const GL_MESH_SUBROUTINE_UNIFORM_NV: u32 = 38270;
pub const GL_TASK_SUBROUTINE_UNIFORM_NV: u32 = 38271;
pub const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_MESH_SHADER_NV: u32 = 38302;
pub const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TASK_SHADER_NV: u32 = 38303;
pub const GL_NV_non_square_matrices: u32 = 1;
pub const GL_FLOAT_MAT2x3_NV: u32 = 35685;
pub const GL_FLOAT_MAT2x4_NV: u32 = 35686;
pub const GL_FLOAT_MAT3x2_NV: u32 = 35687;
pub const GL_FLOAT_MAT3x4_NV: u32 = 35688;
pub const GL_FLOAT_MAT4x2_NV: u32 = 35689;
pub const GL_FLOAT_MAT4x3_NV: u32 = 35690;
pub const GL_NV_path_rendering: u32 = 1;
pub const GL_PATH_FORMAT_SVG_NV: u32 = 36976;
pub const GL_PATH_FORMAT_PS_NV: u32 = 36977;
pub const GL_STANDARD_FONT_NAME_NV: u32 = 36978;
pub const GL_SYSTEM_FONT_NAME_NV: u32 = 36979;
pub const GL_FILE_NAME_NV: u32 = 36980;
pub const GL_PATH_STROKE_WIDTH_NV: u32 = 36981;
pub const GL_PATH_END_CAPS_NV: u32 = 36982;
pub const GL_PATH_INITIAL_END_CAP_NV: u32 = 36983;
pub const GL_PATH_TERMINAL_END_CAP_NV: u32 = 36984;
pub const GL_PATH_JOIN_STYLE_NV: u32 = 36985;
pub const GL_PATH_MITER_LIMIT_NV: u32 = 36986;
pub const GL_PATH_DASH_CAPS_NV: u32 = 36987;
pub const GL_PATH_INITIAL_DASH_CAP_NV: u32 = 36988;
pub const GL_PATH_TERMINAL_DASH_CAP_NV: u32 = 36989;
pub const GL_PATH_DASH_OFFSET_NV: u32 = 36990;
pub const GL_PATH_CLIENT_LENGTH_NV: u32 = 36991;
pub const GL_PATH_FILL_MODE_NV: u32 = 36992;
pub const GL_PATH_FILL_MASK_NV: u32 = 36993;
pub const GL_PATH_FILL_COVER_MODE_NV: u32 = 36994;
pub const GL_PATH_STROKE_COVER_MODE_NV: u32 = 36995;
pub const GL_PATH_STROKE_MASK_NV: u32 = 36996;
pub const GL_COUNT_UP_NV: u32 = 37000;
pub const GL_COUNT_DOWN_NV: u32 = 37001;
pub const GL_PATH_OBJECT_BOUNDING_BOX_NV: u32 = 37002;
pub const GL_CONVEX_HULL_NV: u32 = 37003;
pub const GL_BOUNDING_BOX_NV: u32 = 37005;
pub const GL_TRANSLATE_X_NV: u32 = 37006;
pub const GL_TRANSLATE_Y_NV: u32 = 37007;
pub const GL_TRANSLATE_2D_NV: u32 = 37008;
pub const GL_TRANSLATE_3D_NV: u32 = 37009;
pub const GL_AFFINE_2D_NV: u32 = 37010;
pub const GL_AFFINE_3D_NV: u32 = 37012;
pub const GL_TRANSPOSE_AFFINE_2D_NV: u32 = 37014;
pub const GL_TRANSPOSE_AFFINE_3D_NV: u32 = 37016;
pub const GL_UTF8_NV: u32 = 37018;
pub const GL_UTF16_NV: u32 = 37019;
pub const GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV: u32 = 37020;
pub const GL_PATH_COMMAND_COUNT_NV: u32 = 37021;
pub const GL_PATH_COORD_COUNT_NV: u32 = 37022;
pub const GL_PATH_DASH_ARRAY_COUNT_NV: u32 = 37023;
pub const GL_PATH_COMPUTED_LENGTH_NV: u32 = 37024;
pub const GL_PATH_FILL_BOUNDING_BOX_NV: u32 = 37025;
pub const GL_PATH_STROKE_BOUNDING_BOX_NV: u32 = 37026;
pub const GL_SQUARE_NV: u32 = 37027;
pub const GL_ROUND_NV: u32 = 37028;
pub const GL_TRIANGULAR_NV: u32 = 37029;
pub const GL_BEVEL_NV: u32 = 37030;
pub const GL_MITER_REVERT_NV: u32 = 37031;
pub const GL_MITER_TRUNCATE_NV: u32 = 37032;
pub const GL_SKIP_MISSING_GLYPH_NV: u32 = 37033;
pub const GL_USE_MISSING_GLYPH_NV: u32 = 37034;
pub const GL_PATH_ERROR_POSITION_NV: u32 = 37035;
pub const GL_ACCUM_ADJACENT_PAIRS_NV: u32 = 37037;
pub const GL_ADJACENT_PAIRS_NV: u32 = 37038;
pub const GL_FIRST_TO_REST_NV: u32 = 37039;
pub const GL_PATH_GEN_MODE_NV: u32 = 37040;
pub const GL_PATH_GEN_COEFF_NV: u32 = 37041;
pub const GL_PATH_GEN_COMPONENTS_NV: u32 = 37043;
pub const GL_PATH_STENCIL_FUNC_NV: u32 = 37047;
pub const GL_PATH_STENCIL_REF_NV: u32 = 37048;
pub const GL_PATH_STENCIL_VALUE_MASK_NV: u32 = 37049;
pub const GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV: u32 = 37053;
pub const GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV: u32 = 37054;
pub const GL_PATH_COVER_DEPTH_FUNC_NV: u32 = 37055;
pub const GL_PATH_DASH_OFFSET_RESET_NV: u32 = 37044;
pub const GL_MOVE_TO_RESETS_NV: u32 = 37045;
pub const GL_MOVE_TO_CONTINUES_NV: u32 = 37046;
pub const GL_CLOSE_PATH_NV: u32 = 0;
pub const GL_MOVE_TO_NV: u32 = 2;
pub const GL_RELATIVE_MOVE_TO_NV: u32 = 3;
pub const GL_LINE_TO_NV: u32 = 4;
pub const GL_RELATIVE_LINE_TO_NV: u32 = 5;
pub const GL_HORIZONTAL_LINE_TO_NV: u32 = 6;
pub const GL_RELATIVE_HORIZONTAL_LINE_TO_NV: u32 = 7;
pub const GL_VERTICAL_LINE_TO_NV: u32 = 8;
pub const GL_RELATIVE_VERTICAL_LINE_TO_NV: u32 = 9;
pub const GL_QUADRATIC_CURVE_TO_NV: u32 = 10;
pub const GL_RELATIVE_QUADRATIC_CURVE_TO_NV: u32 = 11;
pub const GL_CUBIC_CURVE_TO_NV: u32 = 12;
pub const GL_RELATIVE_CUBIC_CURVE_TO_NV: u32 = 13;
pub const GL_SMOOTH_QUADRATIC_CURVE_TO_NV: u32 = 14;
pub const GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV: u32 = 15;
pub const GL_SMOOTH_CUBIC_CURVE_TO_NV: u32 = 16;
pub const GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV: u32 = 17;
pub const GL_SMALL_CCW_ARC_TO_NV: u32 = 18;
pub const GL_RELATIVE_SMALL_CCW_ARC_TO_NV: u32 = 19;
pub const GL_SMALL_CW_ARC_TO_NV: u32 = 20;
pub const GL_RELATIVE_SMALL_CW_ARC_TO_NV: u32 = 21;
pub const GL_LARGE_CCW_ARC_TO_NV: u32 = 22;
pub const GL_RELATIVE_LARGE_CCW_ARC_TO_NV: u32 = 23;
pub const GL_LARGE_CW_ARC_TO_NV: u32 = 24;
pub const GL_RELATIVE_LARGE_CW_ARC_TO_NV: u32 = 25;
pub const GL_RESTART_PATH_NV: u32 = 240;
pub const GL_DUP_FIRST_CUBIC_CURVE_TO_NV: u32 = 242;
pub const GL_DUP_LAST_CUBIC_CURVE_TO_NV: u32 = 244;
pub const GL_RECT_NV: u32 = 246;
pub const GL_CIRCULAR_CCW_ARC_TO_NV: u32 = 248;
pub const GL_CIRCULAR_CW_ARC_TO_NV: u32 = 250;
pub const GL_CIRCULAR_TANGENT_ARC_TO_NV: u32 = 252;
pub const GL_ARC_TO_NV: u32 = 254;
pub const GL_RELATIVE_ARC_TO_NV: u32 = 255;
pub const GL_BOLD_BIT_NV: u32 = 1;
pub const GL_ITALIC_BIT_NV: u32 = 2;
pub const GL_GLYPH_WIDTH_BIT_NV: u32 = 1;
pub const GL_GLYPH_HEIGHT_BIT_NV: u32 = 2;
pub const GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV: u32 = 4;
pub const GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV: u32 = 8;
pub const GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV: u32 = 16;
pub const GL_GLYPH_VERTICAL_BEARING_X_BIT_NV: u32 = 32;
pub const GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV: u32 = 64;
pub const GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV: u32 = 128;
pub const GL_GLYPH_HAS_KERNING_BIT_NV: u32 = 256;
pub const GL_FONT_X_MIN_BOUNDS_BIT_NV: u32 = 65536;
pub const GL_FONT_Y_MIN_BOUNDS_BIT_NV: u32 = 131072;
pub const GL_FONT_X_MAX_BOUNDS_BIT_NV: u32 = 262144;
pub const GL_FONT_Y_MAX_BOUNDS_BIT_NV: u32 = 524288;
pub const GL_FONT_UNITS_PER_EM_BIT_NV: u32 = 1048576;
pub const GL_FONT_ASCENDER_BIT_NV: u32 = 2097152;
pub const GL_FONT_DESCENDER_BIT_NV: u32 = 4194304;
pub const GL_FONT_HEIGHT_BIT_NV: u32 = 8388608;
pub const GL_FONT_MAX_ADVANCE_WIDTH_BIT_NV: u32 = 16777216;
pub const GL_FONT_MAX_ADVANCE_HEIGHT_BIT_NV: u32 = 33554432;
pub const GL_FONT_UNDERLINE_POSITION_BIT_NV: u32 = 67108864;
pub const GL_FONT_UNDERLINE_THICKNESS_BIT_NV: u32 = 134217728;
pub const GL_FONT_HAS_KERNING_BIT_NV: u32 = 268435456;
pub const GL_ROUNDED_RECT_NV: u32 = 232;
pub const GL_RELATIVE_ROUNDED_RECT_NV: u32 = 233;
pub const GL_ROUNDED_RECT2_NV: u32 = 234;
pub const GL_RELATIVE_ROUNDED_RECT2_NV: u32 = 235;
pub const GL_ROUNDED_RECT4_NV: u32 = 236;
pub const GL_RELATIVE_ROUNDED_RECT4_NV: u32 = 237;
pub const GL_ROUNDED_RECT8_NV: u32 = 238;
pub const GL_RELATIVE_ROUNDED_RECT8_NV: u32 = 239;
pub const GL_RELATIVE_RECT_NV: u32 = 247;
pub const GL_FONT_GLYPHS_AVAILABLE_NV: u32 = 37736;
pub const GL_FONT_TARGET_UNAVAILABLE_NV: u32 = 37737;
pub const GL_FONT_UNAVAILABLE_NV: u32 = 37738;
pub const GL_FONT_UNINTELLIGIBLE_NV: u32 = 37739;
pub const GL_CONIC_CURVE_TO_NV: u32 = 26;
pub const GL_RELATIVE_CONIC_CURVE_TO_NV: u32 = 27;
pub const GL_FONT_NUM_GLYPH_INDICES_BIT_NV: u32 = 536870912;
pub const GL_STANDARD_FONT_FORMAT_NV: u32 = 37740;
pub const GL_PATH_PROJECTION_NV: u32 = 5889;
pub const GL_PATH_MODELVIEW_NV: u32 = 5888;
pub const GL_PATH_MODELVIEW_STACK_DEPTH_NV: u32 = 2979;
pub const GL_PATH_MODELVIEW_MATRIX_NV: u32 = 2982;
pub const GL_PATH_MAX_MODELVIEW_STACK_DEPTH_NV: u32 = 3382;
pub const GL_PATH_TRANSPOSE_MODELVIEW_MATRIX_NV: u32 = 34019;
pub const GL_PATH_PROJECTION_STACK_DEPTH_NV: u32 = 2980;
pub const GL_PATH_PROJECTION_MATRIX_NV: u32 = 2983;
pub const GL_PATH_MAX_PROJECTION_STACK_DEPTH_NV: u32 = 3384;
pub const GL_PATH_TRANSPOSE_PROJECTION_MATRIX_NV: u32 = 34020;
pub const GL_FRAGMENT_INPUT_NV: u32 = 37741;
pub const GL_NV_path_rendering_shared_edge: u32 = 1;
pub const GL_SHARED_EDGE_NV: u32 = 192;
pub const GL_NV_pixel_buffer_object: u32 = 1;
pub const GL_PIXEL_PACK_BUFFER_NV: u32 = 35051;
pub const GL_PIXEL_UNPACK_BUFFER_NV: u32 = 35052;
pub const GL_PIXEL_PACK_BUFFER_BINDING_NV: u32 = 35053;
pub const GL_PIXEL_UNPACK_BUFFER_BINDING_NV: u32 = 35055;
pub const GL_NV_polygon_mode: u32 = 1;
pub const GL_POLYGON_MODE_NV: u32 = 2880;
pub const GL_POLYGON_OFFSET_POINT_NV: u32 = 10753;
pub const GL_POLYGON_OFFSET_LINE_NV: u32 = 10754;
pub const GL_POINT_NV: u32 = 6912;
pub const GL_LINE_NV: u32 = 6913;
pub const GL_FILL_NV: u32 = 6914;
pub const GL_NV_read_buffer: u32 = 1;
pub const GL_READ_BUFFER_NV: u32 = 3074;
pub const GL_NV_read_buffer_front: u32 = 1;
pub const GL_NV_read_depth: u32 = 1;
pub const GL_NV_read_depth_stencil: u32 = 1;
pub const GL_NV_read_stencil: u32 = 1;
pub const GL_NV_representative_fragment_test: u32 = 1;
pub const GL_REPRESENTATIVE_FRAGMENT_TEST_NV: u32 = 37759;
pub const GL_NV_sRGB_formats: u32 = 1;
pub const GL_SLUMINANCE_NV: u32 = 35910;
pub const GL_SLUMINANCE_ALPHA_NV: u32 = 35908;
pub const GL_SRGB8_NV: u32 = 35905;
pub const GL_SLUMINANCE8_NV: u32 = 35911;
pub const GL_SLUMINANCE8_ALPHA8_NV: u32 = 35909;
pub const GL_COMPRESSED_SRGB_S3TC_DXT1_NV: u32 = 35916;
pub const GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_NV: u32 = 35917;
pub const GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_NV: u32 = 35918;
pub const GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_NV: u32 = 35919;
pub const GL_ETC1_SRGB8_NV: u32 = 35054;
pub const GL_NV_sample_locations: u32 = 1;
pub const GL_SAMPLE_LOCATION_SUBPIXEL_BITS_NV: u32 = 37693;
pub const GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_NV: u32 = 37694;
pub const GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_NV: u32 = 37695;
pub const GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_NV: u32 = 37696;
pub const GL_SAMPLE_LOCATION_NV: u32 = 36432;
pub const GL_PROGRAMMABLE_SAMPLE_LOCATION_NV: u32 = 37697;
pub const GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_NV: u32 = 37698;
pub const GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_NV: u32 = 37699;
pub const GL_NV_sample_mask_override_coverage: u32 = 1;
pub const GL_NV_scissor_exclusive: u32 = 1;
pub const GL_SCISSOR_TEST_EXCLUSIVE_NV: u32 = 38229;
pub const GL_SCISSOR_BOX_EXCLUSIVE_NV: u32 = 38230;
pub const GL_NV_shader_atomic_fp16_vector: u32 = 1;
pub const GL_NV_shader_noperspective_interpolation: u32 = 1;
pub const GL_NV_shader_texture_footprint: u32 = 1;
pub const GL_NV_shading_rate_image: u32 = 1;
pub const GL_SHADING_RATE_IMAGE_NV: u32 = 38243;
pub const GL_SHADING_RATE_NO_INVOCATIONS_NV: u32 = 38244;
pub const GL_SHADING_RATE_1_INVOCATION_PER_PIXEL_NV: u32 = 38245;
pub const GL_SHADING_RATE_1_INVOCATION_PER_1X2_PIXELS_NV: u32 = 38246;
pub const GL_SHADING_RATE_1_INVOCATION_PER_2X1_PIXELS_NV: u32 = 38247;
pub const GL_SHADING_RATE_1_INVOCATION_PER_2X2_PIXELS_NV: u32 = 38248;
pub const GL_SHADING_RATE_1_INVOCATION_PER_2X4_PIXELS_NV: u32 = 38249;
pub const GL_SHADING_RATE_1_INVOCATION_PER_4X2_PIXELS_NV: u32 = 38250;
pub const GL_SHADING_RATE_1_INVOCATION_PER_4X4_PIXELS_NV: u32 = 38251;
pub const GL_SHADING_RATE_2_INVOCATIONS_PER_PIXEL_NV: u32 = 38252;
pub const GL_SHADING_RATE_4_INVOCATIONS_PER_PIXEL_NV: u32 = 38253;
pub const GL_SHADING_RATE_8_INVOCATIONS_PER_PIXEL_NV: u32 = 38254;
pub const GL_SHADING_RATE_16_INVOCATIONS_PER_PIXEL_NV: u32 = 38255;
pub const GL_SHADING_RATE_IMAGE_BINDING_NV: u32 = 38235;
pub const GL_SHADING_RATE_IMAGE_TEXEL_WIDTH_NV: u32 = 38236;
pub const GL_SHADING_RATE_IMAGE_TEXEL_HEIGHT_NV: u32 = 38237;
pub const GL_SHADING_RATE_IMAGE_PALETTE_SIZE_NV: u32 = 38238;
pub const GL_MAX_COARSE_FRAGMENT_SAMPLES_NV: u32 = 38239;
pub const GL_SHADING_RATE_SAMPLE_ORDER_DEFAULT_NV: u32 = 38318;
pub const GL_SHADING_RATE_SAMPLE_ORDER_PIXEL_MAJOR_NV: u32 = 38319;
pub const GL_SHADING_RATE_SAMPLE_ORDER_SAMPLE_MAJOR_NV: u32 = 38320;
pub const GL_NV_shadow_samplers_array: u32 = 1;
pub const GL_SAMPLER_2D_ARRAY_SHADOW_NV: u32 = 36292;
pub const GL_NV_shadow_samplers_cube: u32 = 1;
pub const GL_SAMPLER_CUBE_SHADOW_NV: u32 = 36293;
pub const GL_NV_stereo_view_rendering: u32 = 1;
pub const GL_NV_texture_border_clamp: u32 = 1;
pub const GL_TEXTURE_BORDER_COLOR_NV: u32 = 4100;
pub const GL_CLAMP_TO_BORDER_NV: u32 = 33069;
pub const GL_NV_texture_compression_s3tc_update: u32 = 1;
pub const GL_NV_texture_npot_2D_mipmap: u32 = 1;
pub const GL_NV_viewport_array: u32 = 1;
pub const GL_MAX_VIEWPORTS_NV: u32 = 33371;
pub const GL_VIEWPORT_SUBPIXEL_BITS_NV: u32 = 33372;
pub const GL_VIEWPORT_BOUNDS_RANGE_NV: u32 = 33373;
pub const GL_VIEWPORT_INDEX_PROVOKING_VERTEX_NV: u32 = 33375;
pub const GL_NV_viewport_array2: u32 = 1;
pub const GL_NV_viewport_swizzle: u32 = 1;
pub const GL_VIEWPORT_SWIZZLE_POSITIVE_X_NV: u32 = 37712;
pub const GL_VIEWPORT_SWIZZLE_NEGATIVE_X_NV: u32 = 37713;
pub const GL_VIEWPORT_SWIZZLE_POSITIVE_Y_NV: u32 = 37714;
pub const GL_VIEWPORT_SWIZZLE_NEGATIVE_Y_NV: u32 = 37715;
pub const GL_VIEWPORT_SWIZZLE_POSITIVE_Z_NV: u32 = 37716;
pub const GL_VIEWPORT_SWIZZLE_NEGATIVE_Z_NV: u32 = 37717;
pub const GL_VIEWPORT_SWIZZLE_POSITIVE_W_NV: u32 = 37718;
pub const GL_VIEWPORT_SWIZZLE_NEGATIVE_W_NV: u32 = 37719;
pub const GL_VIEWPORT_SWIZZLE_X_NV: u32 = 37720;
pub const GL_VIEWPORT_SWIZZLE_Y_NV: u32 = 37721;
pub const GL_VIEWPORT_SWIZZLE_Z_NV: u32 = 37722;
pub const GL_VIEWPORT_SWIZZLE_W_NV: u32 = 37723;
pub const GL_OVR_multiview: u32 = 1;
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR: u32 = 38448;
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR: u32 = 38450;
pub const GL_MAX_VIEWS_OVR: u32 = 38449;
pub const GL_FRAMEBUFFER_INCOMPLETE_VIEW_TARGETS_OVR: u32 = 38451;
pub const GL_OVR_multiview2: u32 = 1;
pub const GL_OVR_multiview_multisampled_render_to_texture: u32 = 1;
pub const GL_QCOM_YUV_texture_gather: u32 = 1;
pub const GL_QCOM_alpha_test: u32 = 1;
pub const GL_ALPHA_TEST_QCOM: u32 = 3008;
pub const GL_ALPHA_TEST_FUNC_QCOM: u32 = 3009;
pub const GL_ALPHA_TEST_REF_QCOM: u32 = 3010;
pub const GL_QCOM_binning_control: u32 = 1;
pub const GL_BINNING_CONTROL_HINT_QCOM: u32 = 36784;
pub const GL_CPU_OPTIMIZED_QCOM: u32 = 36785;
pub const GL_GPU_OPTIMIZED_QCOM: u32 = 36786;
pub const GL_RENDER_DIRECT_TO_FRAMEBUFFER_QCOM: u32 = 36787;
pub const GL_QCOM_driver_control: u32 = 1;
pub const GL_QCOM_extended_get: u32 = 1;
pub const GL_TEXTURE_WIDTH_QCOM: u32 = 35794;
pub const GL_TEXTURE_HEIGHT_QCOM: u32 = 35795;
pub const GL_TEXTURE_DEPTH_QCOM: u32 = 35796;
pub const GL_TEXTURE_INTERNAL_FORMAT_QCOM: u32 = 35797;
pub const GL_TEXTURE_FORMAT_QCOM: u32 = 35798;
pub const GL_TEXTURE_TYPE_QCOM: u32 = 35799;
pub const GL_TEXTURE_IMAGE_VALID_QCOM: u32 = 35800;
pub const GL_TEXTURE_NUM_LEVELS_QCOM: u32 = 35801;
pub const GL_TEXTURE_TARGET_QCOM: u32 = 35802;
pub const GL_TEXTURE_OBJECT_VALID_QCOM: u32 = 35803;
pub const GL_STATE_RESTORE: u32 = 35804;
pub const GL_QCOM_extended_get2: u32 = 1;
pub const GL_QCOM_framebuffer_foveated: u32 = 1;
pub const GL_FOVEATION_ENABLE_BIT_QCOM: u32 = 1;
pub const GL_FOVEATION_SCALED_BIN_METHOD_BIT_QCOM: u32 = 2;
pub const GL_QCOM_perfmon_global_mode: u32 = 1;
pub const GL_PERFMON_GLOBAL_MODE_QCOM: u32 = 36768;
pub const GL_QCOM_shader_framebuffer_fetch_noncoherent: u32 = 1;
pub const GL_FRAMEBUFFER_FETCH_NONCOHERENT_QCOM: u32 = 38562;
pub const GL_QCOM_shader_framebuffer_fetch_rate: u32 = 1;
pub const GL_QCOM_texture_foveated: u32 = 1;
pub const GL_TEXTURE_FOVEATED_FEATURE_BITS_QCOM: u32 = 35835;
pub const GL_TEXTURE_FOVEATED_MIN_PIXEL_DENSITY_QCOM: u32 = 35836;
pub const GL_TEXTURE_FOVEATED_FEATURE_QUERY_QCOM: u32 = 35837;
pub const GL_TEXTURE_FOVEATED_NUM_FOCAL_POINTS_QUERY_QCOM: u32 = 35838;
pub const GL_FRAMEBUFFER_INCOMPLETE_FOVEATION_QCOM: u32 = 35839;
pub const GL_QCOM_texture_foveated_subsampled_layout: u32 = 1;
pub const GL_FOVEATION_SUBSAMPLED_LAYOUT_METHOD_BIT_QCOM: u32 = 4;
pub const GL_MAX_SHADER_SUBSAMPLED_IMAGE_UNITS_QCOM: u32 = 36769;
pub const GL_QCOM_tiled_rendering: u32 = 1;
pub const GL_COLOR_BUFFER_BIT0_QCOM: u32 = 1;
pub const GL_COLOR_BUFFER_BIT1_QCOM: u32 = 2;
pub const GL_COLOR_BUFFER_BIT2_QCOM: u32 = 4;
pub const GL_COLOR_BUFFER_BIT3_QCOM: u32 = 8;
pub const GL_COLOR_BUFFER_BIT4_QCOM: u32 = 16;
pub const GL_COLOR_BUFFER_BIT5_QCOM: u32 = 32;
pub const GL_COLOR_BUFFER_BIT6_QCOM: u32 = 64;
pub const GL_COLOR_BUFFER_BIT7_QCOM: u32 = 128;
pub const GL_DEPTH_BUFFER_BIT0_QCOM: u32 = 256;
pub const GL_DEPTH_BUFFER_BIT1_QCOM: u32 = 512;
pub const GL_DEPTH_BUFFER_BIT2_QCOM: u32 = 1024;
pub const GL_DEPTH_BUFFER_BIT3_QCOM: u32 = 2048;
pub const GL_DEPTH_BUFFER_BIT4_QCOM: u32 = 4096;
pub const GL_DEPTH_BUFFER_BIT5_QCOM: u32 = 8192;
pub const GL_DEPTH_BUFFER_BIT6_QCOM: u32 = 16384;
pub const GL_DEPTH_BUFFER_BIT7_QCOM: u32 = 32768;
pub const GL_STENCIL_BUFFER_BIT0_QCOM: u32 = 65536;
pub const GL_STENCIL_BUFFER_BIT1_QCOM: u32 = 131072;
pub const GL_STENCIL_BUFFER_BIT2_QCOM: u32 = 262144;
pub const GL_STENCIL_BUFFER_BIT3_QCOM: u32 = 524288;
pub const GL_STENCIL_BUFFER_BIT4_QCOM: u32 = 1048576;
pub const GL_STENCIL_BUFFER_BIT5_QCOM: u32 = 2097152;
pub const GL_STENCIL_BUFFER_BIT6_QCOM: u32 = 4194304;
pub const GL_STENCIL_BUFFER_BIT7_QCOM: u32 = 8388608;
pub const GL_MULTISAMPLE_BUFFER_BIT0_QCOM: u32 = 16777216;
pub const GL_MULTISAMPLE_BUFFER_BIT1_QCOM: u32 = 33554432;
pub const GL_MULTISAMPLE_BUFFER_BIT2_QCOM: u32 = 67108864;
pub const GL_MULTISAMPLE_BUFFER_BIT3_QCOM: u32 = 134217728;
pub const GL_MULTISAMPLE_BUFFER_BIT4_QCOM: u32 = 268435456;
pub const GL_MULTISAMPLE_BUFFER_BIT5_QCOM: u32 = 536870912;
pub const GL_MULTISAMPLE_BUFFER_BIT6_QCOM: u32 = 1073741824;
pub const GL_MULTISAMPLE_BUFFER_BIT7_QCOM: u32 = 2147483648;
pub const GL_QCOM_writeonly_rendering: u32 = 1;
pub const GL_WRITEONLY_RENDERING_QCOM: u32 = 34851;
pub const GL_VIV_shader_binary: u32 = 1;
pub const GL_SHADER_BINARY_VIV: u32 = 36804;
pub type __u_char = rs_ctypes::c_uchar;
pub type __u_short = rs_ctypes::c_ushort;
pub type __u_int = rs_ctypes::c_uint;
pub type __u_long = rs_ctypes::c_ulong;
pub type __int8_t = rs_ctypes::c_schar;
pub type __uint8_t = rs_ctypes::c_uchar;
pub type __int16_t = rs_ctypes::c_short;
pub type __uint16_t = rs_ctypes::c_ushort;
pub type __int32_t = rs_ctypes::c_int;
pub type __uint32_t = rs_ctypes::c_uint;
pub type __int64_t = rs_ctypes::c_long;
pub type __uint64_t = rs_ctypes::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = rs_ctypes::c_long;
pub type __u_quad_t = rs_ctypes::c_ulong;
pub type __intmax_t = rs_ctypes::c_long;
pub type __uintmax_t = rs_ctypes::c_ulong;
pub type __dev_t = rs_ctypes::c_ulong;
pub type __uid_t = rs_ctypes::c_uint;
pub type __gid_t = rs_ctypes::c_uint;
pub type __ino_t = rs_ctypes::c_ulong;
pub type __ino64_t = rs_ctypes::c_ulong;
pub type __mode_t = rs_ctypes::c_uint;
pub type __nlink_t = rs_ctypes::c_ulong;
pub type __off_t = rs_ctypes::c_long;
pub type __off64_t = rs_ctypes::c_long;
pub type __pid_t = rs_ctypes::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [rs_ctypes::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::core::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::core::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<__fsid_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = rs_ctypes::c_long;
pub type __rlim_t = rs_ctypes::c_ulong;
pub type __rlim64_t = rs_ctypes::c_ulong;
pub type __id_t = rs_ctypes::c_uint;
pub type __time_t = rs_ctypes::c_long;
pub type __useconds_t = rs_ctypes::c_uint;
pub type __suseconds_t = rs_ctypes::c_long;
pub type __daddr_t = rs_ctypes::c_int;
pub type __key_t = rs_ctypes::c_int;
pub type __clockid_t = rs_ctypes::c_int;
pub type __timer_t = *mut rs_ctypes::c_void;
pub type __blksize_t = rs_ctypes::c_long;
pub type __blkcnt_t = rs_ctypes::c_long;
pub type __blkcnt64_t = rs_ctypes::c_long;
pub type __fsblkcnt_t = rs_ctypes::c_ulong;
pub type __fsblkcnt64_t = rs_ctypes::c_ulong;
pub type __fsfilcnt_t = rs_ctypes::c_ulong;
pub type __fsfilcnt64_t = rs_ctypes::c_ulong;
pub type __fsword_t = rs_ctypes::c_long;
pub type __ssize_t = rs_ctypes::c_long;
pub type __syscall_slong_t = rs_ctypes::c_long;
pub type __syscall_ulong_t = rs_ctypes::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut rs_ctypes::c_char;
pub type __intptr_t = rs_ctypes::c_long;
pub type __socklen_t = rs_ctypes::c_uint;
pub type __sig_atomic_t = rs_ctypes::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = rs_ctypes::c_schar;
pub type int_fast16_t = rs_ctypes::c_long;
pub type int_fast32_t = rs_ctypes::c_long;
pub type int_fast64_t = rs_ctypes::c_long;
pub type uint_fast8_t = rs_ctypes::c_uchar;
pub type uint_fast16_t = rs_ctypes::c_ulong;
pub type uint_fast32_t = rs_ctypes::c_ulong;
pub type uint_fast64_t = rs_ctypes::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type khronos_int32_t = i32;
pub type khronos_uint32_t = u32;
pub type khronos_int64_t = i64;
pub type khronos_uint64_t = u64;
pub type khronos_int8_t = rs_ctypes::c_schar;
pub type khronos_uint8_t = rs_ctypes::c_uchar;
pub type khronos_int16_t = rs_ctypes::c_short;
pub type khronos_uint16_t = rs_ctypes::c_ushort;
pub type khronos_intptr_t = rs_ctypes::c_long;
pub type khronos_uintptr_t = rs_ctypes::c_ulong;
pub type khronos_ssize_t = rs_ctypes::c_long;
pub type khronos_usize_t = rs_ctypes::c_ulong;
pub type khronos_float_t = f32;
pub type khronos_utime_nanoseconds_t = khronos_uint64_t;
pub type khronos_stime_nanoseconds_t = khronos_int64_t;
pub const khronos_boolean_enum_t_KHRONOS_FALSE: khronos_boolean_enum_t = 0;
pub const khronos_boolean_enum_t_KHRONOS_TRUE: khronos_boolean_enum_t = 1;
pub const khronos_boolean_enum_t_KHRONOS_BOOLEAN_ENUM_FORCE_SIZE: khronos_boolean_enum_t =
    2147483647;
pub type khronos_boolean_enum_t = u32;
pub type GLbyte = khronos_int8_t;
pub type GLclampf = khronos_float_t;
pub type GLfixed = khronos_int32_t;
pub type GLshort = khronos_int16_t;
pub type GLushort = khronos_uint16_t;
pub type GLvoid = rs_ctypes::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __GLsync {
    _unused: [u8; 0],
}
pub type GLsync = *mut __GLsync;
pub type GLint64 = khronos_int64_t;
pub type GLuint64 = khronos_uint64_t;
pub type GLenum = rs_ctypes::c_uint;
pub type GLuint = rs_ctypes::c_uint;
pub type GLchar = rs_ctypes::c_char;
pub type GLfloat = khronos_float_t;
pub type GLsizeiptr = khronos_ssize_t;
pub type GLintptr = khronos_intptr_t;
pub type GLbitfield = rs_ctypes::c_uint;
pub type GLint = rs_ctypes::c_int;
pub type GLboolean = rs_ctypes::c_uchar;
pub type GLsizei = rs_ctypes::c_int;
pub type GLubyte = khronos_uint8_t;
pub type PFNGLACTIVETEXTUREPROC = ::core::option::Option<unsafe extern "C" fn(texture: GLenum)>;
pub type PFNGLATTACHSHADERPROC =
    ::core::option::Option<unsafe extern "C" fn(program: GLuint, shader: GLuint)>;
pub type PFNGLBINDATTRIBLOCATIONPROC = ::core::option::Option<
    unsafe extern "C" fn(program: GLuint, index: GLuint, name: *const GLchar),
>;
pub type PFNGLBINDBUFFERPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, buffer: GLuint)>;
pub type PFNGLBINDFRAMEBUFFERPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, framebuffer: GLuint)>;
pub type PFNGLBINDRENDERBUFFERPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, renderbuffer: GLuint)>;
pub type PFNGLBINDTEXTUREPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, texture: GLuint)>;
pub type PFNGLBLENDCOLORPROC = ::core::option::Option<
    unsafe extern "C" fn(red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat),
>;
pub type PFNGLBLENDEQUATIONPROC = ::core::option::Option<unsafe extern "C" fn(mode: GLenum)>;
pub type PFNGLBLENDEQUATIONSEPARATEPROC =
    ::core::option::Option<unsafe extern "C" fn(modeRGB: GLenum, modeAlpha: GLenum)>;
pub type PFNGLBLENDFUNCPROC =
    ::core::option::Option<unsafe extern "C" fn(sfactor: GLenum, dfactor: GLenum)>;
pub type PFNGLBLENDFUNCSEPARATEPROC = ::core::option::Option<
    unsafe extern "C" fn(
        sfactorRGB: GLenum,
        dfactorRGB: GLenum,
        sfactorAlpha: GLenum,
        dfactorAlpha: GLenum,
    ),
>;
pub type PFNGLBUFFERDATAPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        size: GLsizeiptr,
        data: *const rs_ctypes::c_void,
        usage: GLenum,
    ),
>;
pub type PFNGLBUFFERSUBDATAPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        offset: GLintptr,
        size: GLsizeiptr,
        data: *const rs_ctypes::c_void,
    ),
>;
pub type PFNGLCHECKFRAMEBUFFERSTATUSPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum) -> GLenum>;
pub type PFNGLCLEARPROC = ::core::option::Option<unsafe extern "C" fn(mask: GLbitfield)>;
pub type PFNGLCLEARCOLORPROC = ::core::option::Option<
    unsafe extern "C" fn(red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat),
>;
pub type PFNGLCLEARDEPTHFPROC = ::core::option::Option<unsafe extern "C" fn(d: GLfloat)>;
pub type PFNGLCLEARSTENCILPROC = ::core::option::Option<unsafe extern "C" fn(s: GLint)>;
pub type PFNGLCOLORMASKPROC = ::core::option::Option<
    unsafe extern "C" fn(red: GLboolean, green: GLboolean, blue: GLboolean, alpha: GLboolean),
>;
pub type PFNGLCOMPILESHADERPROC = ::core::option::Option<unsafe extern "C" fn(shader: GLuint)>;
pub type PFNGLCOMPRESSEDTEXIMAGE2DPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        level: GLint,
        internalformat: GLenum,
        width: GLsizei,
        height: GLsizei,
        border: GLint,
        imageSize: GLsizei,
        data: *const rs_ctypes::c_void,
    ),
>;
pub type PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        level: GLint,
        xoffset: GLint,
        yoffset: GLint,
        width: GLsizei,
        height: GLsizei,
        format: GLenum,
        imageSize: GLsizei,
        data: *const rs_ctypes::c_void,
    ),
>;
pub type PFNGLCOPYTEXIMAGE2DPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        level: GLint,
        internalformat: GLenum,
        x: GLint,
        y: GLint,
        width: GLsizei,
        height: GLsizei,
        border: GLint,
    ),
>;
pub type PFNGLCOPYTEXSUBIMAGE2DPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        level: GLint,
        xoffset: GLint,
        yoffset: GLint,
        x: GLint,
        y: GLint,
        width: GLsizei,
        height: GLsizei,
    ),
>;
pub type PFNGLCREATEPROGRAMPROC = ::core::option::Option<unsafe extern "C" fn() -> GLuint>;
pub type PFNGLCREATESHADERPROC =
    ::core::option::Option<unsafe extern "C" fn(type_: GLenum) -> GLuint>;
pub type PFNGLCULLFACEPROC = ::core::option::Option<unsafe extern "C" fn(mode: GLenum)>;
pub type PFNGLDELETEBUFFERSPROC =
    ::core::option::Option<unsafe extern "C" fn(n: GLsizei, buffers: *const GLuint)>;
pub type PFNGLDELETEFRAMEBUFFERSPROC =
    ::core::option::Option<unsafe extern "C" fn(n: GLsizei, framebuffers: *const GLuint)>;
pub type PFNGLDELETEPROGRAMPROC = ::core::option::Option<unsafe extern "C" fn(program: GLuint)>;
pub type PFNGLDELETERENDERBUFFERSPROC =
    ::core::option::Option<unsafe extern "C" fn(n: GLsizei, renderbuffers: *const GLuint)>;
pub type PFNGLDELETESHADERPROC = ::core::option::Option<unsafe extern "C" fn(shader: GLuint)>;
pub type PFNGLDELETETEXTURESPROC =
    ::core::option::Option<unsafe extern "C" fn(n: GLsizei, textures: *const GLuint)>;
pub type PFNGLDEPTHFUNCPROC = ::core::option::Option<unsafe extern "C" fn(func: GLenum)>;
pub type PFNGLDEPTHMASKPROC = ::core::option::Option<unsafe extern "C" fn(flag: GLboolean)>;
pub type PFNGLDEPTHRANGEFPROC =
    ::core::option::Option<unsafe extern "C" fn(n: GLfloat, f: GLfloat)>;
pub type PFNGLDETACHSHADERPROC =
    ::core::option::Option<unsafe extern "C" fn(program: GLuint, shader: GLuint)>;
pub type PFNGLDISABLEPROC = ::core::option::Option<unsafe extern "C" fn(cap: GLenum)>;
pub type PFNGLDISABLEVERTEXATTRIBARRAYPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint)>;
pub type PFNGLDRAWARRAYSPROC =
    ::core::option::Option<unsafe extern "C" fn(mode: GLenum, first: GLint, count: GLsizei)>;
pub type PFNGLDRAWELEMENTSPROC = ::core::option::Option<
    unsafe extern "C" fn(
        mode: GLenum,
        count: GLsizei,
        type_: GLenum,
        indices: *const rs_ctypes::c_void,
    ),
>;
pub type PFNGLENABLEPROC = ::core::option::Option<unsafe extern "C" fn(cap: GLenum)>;
pub type PFNGLENABLEVERTEXATTRIBARRAYPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint)>;
pub type PFNGLFINISHPROC = ::core::option::Option<unsafe extern "C" fn()>;
pub type PFNGLFLUSHPROC = ::core::option::Option<unsafe extern "C" fn()>;
pub type PFNGLFRAMEBUFFERRENDERBUFFERPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        attachment: GLenum,
        renderbuffertarget: GLenum,
        renderbuffer: GLuint,
    ),
>;
pub type PFNGLFRAMEBUFFERTEXTURE2DPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        attachment: GLenum,
        textarget: GLenum,
        texture: GLuint,
        level: GLint,
    ),
>;
pub type PFNGLFRONTFACEPROC = ::core::option::Option<unsafe extern "C" fn(mode: GLenum)>;
pub type PFNGLGENBUFFERSPROC =
    ::core::option::Option<unsafe extern "C" fn(n: GLsizei, buffers: *mut GLuint)>;
pub type PFNGLGENERATEMIPMAPPROC = ::core::option::Option<unsafe extern "C" fn(target: GLenum)>;
pub type PFNGLGENFRAMEBUFFERSPROC =
    ::core::option::Option<unsafe extern "C" fn(n: GLsizei, framebuffers: *mut GLuint)>;
pub type PFNGLGENRENDERBUFFERSPROC =
    ::core::option::Option<unsafe extern "C" fn(n: GLsizei, renderbuffers: *mut GLuint)>;
pub type PFNGLGENTEXTURESPROC =
    ::core::option::Option<unsafe extern "C" fn(n: GLsizei, textures: *mut GLuint)>;
pub type PFNGLGETACTIVEATTRIBPROC = ::core::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        index: GLuint,
        bufSize: GLsizei,
        length: *mut GLsizei,
        size: *mut GLint,
        type_: *mut GLenum,
        name: *mut GLchar,
    ),
>;
pub type PFNGLGETACTIVEUNIFORMPROC = ::core::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        index: GLuint,
        bufSize: GLsizei,
        length: *mut GLsizei,
        size: *mut GLint,
        type_: *mut GLenum,
        name: *mut GLchar,
    ),
>;
pub type PFNGLGETATTACHEDSHADERSPROC = ::core::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        maxCount: GLsizei,
        count: *mut GLsizei,
        shaders: *mut GLuint,
    ),
>;
pub type PFNGLGETATTRIBLOCATIONPROC =
    ::core::option::Option<unsafe extern "C" fn(program: GLuint, name: *const GLchar) -> GLint>;
pub type PFNGLGETBOOLEANVPROC =
    ::core::option::Option<unsafe extern "C" fn(pname: GLenum, data: *mut GLboolean)>;
pub type PFNGLGETBUFFERPARAMETERIVPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *mut GLint)>;
pub type PFNGLGETERRORPROC = ::core::option::Option<unsafe extern "C" fn() -> GLenum>;
pub type PFNGLGETFLOATVPROC =
    ::core::option::Option<unsafe extern "C" fn(pname: GLenum, data: *mut GLfloat)>;
pub type PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, attachment: GLenum, pname: GLenum, params: *mut GLint),
>;
pub type PFNGLGETINTEGERVPROC =
    ::core::option::Option<unsafe extern "C" fn(pname: GLenum, data: *mut GLint)>;
pub type PFNGLGETPROGRAMIVPROC = ::core::option::Option<
    unsafe extern "C" fn(program: GLuint, pname: GLenum, params: *mut GLint),
>;
pub type PFNGLGETPROGRAMINFOLOGPROC = ::core::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        bufSize: GLsizei,
        length: *mut GLsizei,
        infoLog: *mut GLchar,
    ),
>;
pub type PFNGLGETRENDERBUFFERPARAMETERIVPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *mut GLint)>;
pub type PFNGLGETSHADERIVPROC =
    ::core::option::Option<unsafe extern "C" fn(shader: GLuint, pname: GLenum, params: *mut GLint)>;
pub type PFNGLGETSHADERINFOLOGPROC = ::core::option::Option<
    unsafe extern "C" fn(
        shader: GLuint,
        bufSize: GLsizei,
        length: *mut GLsizei,
        infoLog: *mut GLchar,
    ),
>;
pub type PFNGLGETSHADERPRECISIONFORMATPROC = ::core::option::Option<
    unsafe extern "C" fn(
        shadertype: GLenum,
        precisiontype: GLenum,
        range: *mut GLint,
        precision: *mut GLint,
    ),
>;
pub type PFNGLGETSHADERSOURCEPROC = ::core::option::Option<
    unsafe extern "C" fn(
        shader: GLuint,
        bufSize: GLsizei,
        length: *mut GLsizei,
        source: *mut GLchar,
    ),
>;
pub type PFNGLGETSTRINGPROC =
    ::core::option::Option<unsafe extern "C" fn(name: GLenum) -> *const GLubyte>;
pub type PFNGLGETTEXPARAMETERFVPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *mut GLfloat),
>;
pub type PFNGLGETTEXPARAMETERIVPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *mut GLint)>;
pub type PFNGLGETUNIFORMFVPROC = ::core::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, params: *mut GLfloat),
>;
pub type PFNGLGETUNIFORMIVPROC = ::core::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, params: *mut GLint),
>;
pub type PFNGLGETUNIFORMLOCATIONPROC =
    ::core::option::Option<unsafe extern "C" fn(program: GLuint, name: *const GLchar) -> GLint>;
pub type PFNGLGETVERTEXATTRIBFVPROC = ::core::option::Option<
    unsafe extern "C" fn(index: GLuint, pname: GLenum, params: *mut GLfloat),
>;
pub type PFNGLGETVERTEXATTRIBIVPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, pname: GLenum, params: *mut GLint)>;
pub type PFNGLGETVERTEXATTRIBPOINTERVPROC = ::core::option::Option<
    unsafe extern "C" fn(index: GLuint, pname: GLenum, pointer: *mut *mut rs_ctypes::c_void),
>;
pub type PFNGLHINTPROC = ::core::option::Option<unsafe extern "C" fn(target: GLenum, mode: GLenum)>;
pub type PFNGLISBUFFERPROC =
    ::core::option::Option<unsafe extern "C" fn(buffer: GLuint) -> GLboolean>;
pub type PFNGLISENABLEDPROC =
    ::core::option::Option<unsafe extern "C" fn(cap: GLenum) -> GLboolean>;
pub type PFNGLISFRAMEBUFFERPROC =
    ::core::option::Option<unsafe extern "C" fn(framebuffer: GLuint) -> GLboolean>;
pub type PFNGLISPROGRAMPROC =
    ::core::option::Option<unsafe extern "C" fn(program: GLuint) -> GLboolean>;
pub type PFNGLISRENDERBUFFERPROC =
    ::core::option::Option<unsafe extern "C" fn(renderbuffer: GLuint) -> GLboolean>;
pub type PFNGLISSHADERPROC =
    ::core::option::Option<unsafe extern "C" fn(shader: GLuint) -> GLboolean>;
pub type PFNGLISTEXTUREPROC =
    ::core::option::Option<unsafe extern "C" fn(texture: GLuint) -> GLboolean>;
pub type PFNGLLINEWIDTHPROC = ::core::option::Option<unsafe extern "C" fn(width: GLfloat)>;
pub type PFNGLLINKPROGRAMPROC = ::core::option::Option<unsafe extern "C" fn(program: GLuint)>;
pub type PFNGLPIXELSTOREIPROC =
    ::core::option::Option<unsafe extern "C" fn(pname: GLenum, param: GLint)>;
pub type PFNGLPOLYGONOFFSETPROC =
    ::core::option::Option<unsafe extern "C" fn(factor: GLfloat, units: GLfloat)>;
pub type PFNGLREADPIXELSPROC = ::core::option::Option<
    unsafe extern "C" fn(
        x: GLint,
        y: GLint,
        width: GLsizei,
        height: GLsizei,
        format: GLenum,
        type_: GLenum,
        pixels: *mut rs_ctypes::c_void,
    ),
>;
pub type PFNGLRELEASESHADERCOMPILERPROC = ::core::option::Option<unsafe extern "C" fn()>;
pub type PFNGLRENDERBUFFERSTORAGEPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei),
>;
pub type PFNGLSAMPLECOVERAGEPROC =
    ::core::option::Option<unsafe extern "C" fn(value: GLfloat, invert: GLboolean)>;
pub type PFNGLSCISSORPROC = ::core::option::Option<
    unsafe extern "C" fn(x: GLint, y: GLint, width: GLsizei, height: GLsizei),
>;
pub type PFNGLSHADERBINARYPROC = ::core::option::Option<
    unsafe extern "C" fn(
        count: GLsizei,
        shaders: *const GLuint,
        binaryformat: GLenum,
        binary: *const rs_ctypes::c_void,
        length: GLsizei,
    ),
>;
pub type PFNGLSHADERSOURCEPROC = ::core::option::Option<
    unsafe extern "C" fn(
        shader: GLuint,
        count: GLsizei,
        string: *const *const GLchar,
        length: *const GLint,
    ),
>;
pub type PFNGLSTENCILFUNCPROC =
    ::core::option::Option<unsafe extern "C" fn(func: GLenum, ref_: GLint, mask: GLuint)>;
pub type PFNGLSTENCILFUNCSEPARATEPROC = ::core::option::Option<
    unsafe extern "C" fn(face: GLenum, func: GLenum, ref_: GLint, mask: GLuint),
>;
pub type PFNGLSTENCILMASKPROC = ::core::option::Option<unsafe extern "C" fn(mask: GLuint)>;
pub type PFNGLSTENCILMASKSEPARATEPROC =
    ::core::option::Option<unsafe extern "C" fn(face: GLenum, mask: GLuint)>;
pub type PFNGLSTENCILOPPROC =
    ::core::option::Option<unsafe extern "C" fn(fail: GLenum, zfail: GLenum, zpass: GLenum)>;
pub type PFNGLSTENCILOPSEPARATEPROC = ::core::option::Option<
    unsafe extern "C" fn(face: GLenum, sfail: GLenum, dpfail: GLenum, dppass: GLenum),
>;
pub type PFNGLTEXIMAGE2DPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        level: GLint,
        internalformat: GLint,
        width: GLsizei,
        height: GLsizei,
        border: GLint,
        format: GLenum,
        type_: GLenum,
        pixels: *const rs_ctypes::c_void,
    ),
>;
pub type PFNGLTEXPARAMETERFPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, pname: GLenum, param: GLfloat)>;
pub type PFNGLTEXPARAMETERFVPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *const GLfloat),
>;
pub type PFNGLTEXPARAMETERIPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, pname: GLenum, param: GLint)>;
pub type PFNGLTEXPARAMETERIVPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *const GLint),
>;
pub type PFNGLTEXSUBIMAGE2DPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        level: GLint,
        xoffset: GLint,
        yoffset: GLint,
        width: GLsizei,
        height: GLsizei,
        format: GLenum,
        type_: GLenum,
        pixels: *const rs_ctypes::c_void,
    ),
>;
pub type PFNGLUNIFORM1FPROC =
    ::core::option::Option<unsafe extern "C" fn(location: GLint, v0: GLfloat)>;
pub type PFNGLUNIFORM1FVPROC = ::core::option::Option<
    unsafe extern "C" fn(location: GLint, count: GLsizei, value: *const GLfloat),
>;
pub type PFNGLUNIFORM1IPROC =
    ::core::option::Option<unsafe extern "C" fn(location: GLint, v0: GLint)>;
pub type PFNGLUNIFORM1IVPROC = ::core::option::Option<
    unsafe extern "C" fn(location: GLint, count: GLsizei, value: *const GLint),
>;
pub type PFNGLUNIFORM2FPROC =
    ::core::option::Option<unsafe extern "C" fn(location: GLint, v0: GLfloat, v1: GLfloat)>;
pub type PFNGLUNIFORM2FVPROC = ::core::option::Option<
    unsafe extern "C" fn(location: GLint, count: GLsizei, value: *const GLfloat),
>;
pub type PFNGLUNIFORM2IPROC =
    ::core::option::Option<unsafe extern "C" fn(location: GLint, v0: GLint, v1: GLint)>;
pub type PFNGLUNIFORM2IVPROC = ::core::option::Option<
    unsafe extern "C" fn(location: GLint, count: GLsizei, value: *const GLint),
>;
pub type PFNGLUNIFORM3FPROC = ::core::option::Option<
    unsafe extern "C" fn(location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat),
>;
pub type PFNGLUNIFORM3FVPROC = ::core::option::Option<
    unsafe extern "C" fn(location: GLint, count: GLsizei, value: *const GLfloat),
>;
pub type PFNGLUNIFORM3IPROC =
    ::core::option::Option<unsafe extern "C" fn(location: GLint, v0: GLint, v1: GLint, v2: GLint)>;
pub type PFNGLUNIFORM3IVPROC = ::core::option::Option<
    unsafe extern "C" fn(location: GLint, count: GLsizei, value: *const GLint),
>;
pub type PFNGLUNIFORM4FPROC = ::core::option::Option<
    unsafe extern "C" fn(location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat),
>;
pub type PFNGLUNIFORM4FVPROC = ::core::option::Option<
    unsafe extern "C" fn(location: GLint, count: GLsizei, value: *const GLfloat),
>;
pub type PFNGLUNIFORM4IPROC = ::core::option::Option<
    unsafe extern "C" fn(location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint),
>;
pub type PFNGLUNIFORM4IVPROC = ::core::option::Option<
    unsafe extern "C" fn(location: GLint, count: GLsizei, value: *const GLint),
>;
pub type PFNGLUNIFORMMATRIX2FVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    ),
>;
pub type PFNGLUNIFORMMATRIX3FVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    ),
>;
pub type PFNGLUNIFORMMATRIX4FVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    ),
>;
pub type PFNGLUSEPROGRAMPROC = ::core::option::Option<unsafe extern "C" fn(program: GLuint)>;
pub type PFNGLVALIDATEPROGRAMPROC = ::core::option::Option<unsafe extern "C" fn(program: GLuint)>;
pub type PFNGLVERTEXATTRIB1FPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, x: GLfloat)>;
pub type PFNGLVERTEXATTRIB1FVPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLfloat)>;
pub type PFNGLVERTEXATTRIB2FPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, x: GLfloat, y: GLfloat)>;
pub type PFNGLVERTEXATTRIB2FVPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLfloat)>;
pub type PFNGLVERTEXATTRIB3FPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat)>;
pub type PFNGLVERTEXATTRIB3FVPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLfloat)>;
pub type PFNGLVERTEXATTRIB4FPROC = ::core::option::Option<
    unsafe extern "C" fn(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat),
>;
pub type PFNGLVERTEXATTRIB4FVPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLfloat)>;
pub type PFNGLVERTEXATTRIBPOINTERPROC = ::core::option::Option<
    unsafe extern "C" fn(
        index: GLuint,
        size: GLint,
        type_: GLenum,
        normalized: GLboolean,
        stride: GLsizei,
        pointer: *const rs_ctypes::c_void,
    ),
>;
pub type PFNGLVIEWPORTPROC = ::core::option::Option<
    unsafe extern "C" fn(x: GLint, y: GLint, width: GLsizei, height: GLsizei),
>;
extern "C" {
    pub fn glActiveTexture(texture: GLenum);
}
extern "C" {
    pub fn glAttachShader(program: GLuint, shader: GLuint);
}
extern "C" {
    pub fn glBindAttribLocation(program: GLuint, index: GLuint, name: *const GLchar);
}
extern "C" {
    pub fn glBindBuffer(target: GLenum, buffer: GLuint);
}
extern "C" {
    pub fn glBindFramebuffer(target: GLenum, framebuffer: GLuint);
}
extern "C" {
    pub fn glBindRenderbuffer(target: GLenum, renderbuffer: GLuint);
}
extern "C" {
    pub fn glBindTexture(target: GLenum, texture: GLuint);
}
extern "C" {
    pub fn glBlendColor(red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat);
}
extern "C" {
    pub fn glBlendEquation(mode: GLenum);
}
extern "C" {
    pub fn glBlendEquationSeparate(modeRGB: GLenum, modeAlpha: GLenum);
}
extern "C" {
    pub fn glBlendFunc(sfactor: GLenum, dfactor: GLenum);
}
extern "C" {
    pub fn glBlendFuncSeparate(
        sfactorRGB: GLenum,
        dfactorRGB: GLenum,
        sfactorAlpha: GLenum,
        dfactorAlpha: GLenum,
    );
}
extern "C" {
    pub fn glBufferData(
        target: GLenum,
        size: GLsizeiptr,
        data: *const rs_ctypes::c_void,
        usage: GLenum,
    );
}
extern "C" {
    pub fn glBufferSubData(
        target: GLenum,
        offset: GLintptr,
        size: GLsizeiptr,
        data: *const rs_ctypes::c_void,
    );
}
extern "C" {
    pub fn glCheckFramebufferStatus(target: GLenum) -> GLenum;
}
extern "C" {
    pub fn glClear(mask: GLbitfield);
}
extern "C" {
    pub fn glClearColor(red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat);
}
extern "C" {
    pub fn glClearDepthf(d: GLfloat);
}
extern "C" {
    pub fn glClearStencil(s: GLint);
}
extern "C" {
    pub fn glColorMask(red: GLboolean, green: GLboolean, blue: GLboolean, alpha: GLboolean);
}
extern "C" {
    pub fn glCompileShader(shader: GLuint);
}
extern "C" {
    pub fn glCompressedTexImage2D(
        target: GLenum,
        level: GLint,
        internalformat: GLenum,
        width: GLsizei,
        height: GLsizei,
        border: GLint,
        imageSize: GLsizei,
        data: *const rs_ctypes::c_void,
    );
}
extern "C" {
    pub fn glCompressedTexSubImage2D(
        target: GLenum,
        level: GLint,
        xoffset: GLint,
        yoffset: GLint,
        width: GLsizei,
        height: GLsizei,
        format: GLenum,
        imageSize: GLsizei,
        data: *const rs_ctypes::c_void,
    );
}
extern "C" {
    pub fn glCopyTexImage2D(
        target: GLenum,
        level: GLint,
        internalformat: GLenum,
        x: GLint,
        y: GLint,
        width: GLsizei,
        height: GLsizei,
        border: GLint,
    );
}
extern "C" {
    pub fn glCopyTexSubImage2D(
        target: GLenum,
        level: GLint,
        xoffset: GLint,
        yoffset: GLint,
        x: GLint,
        y: GLint,
        width: GLsizei,
        height: GLsizei,
    );
}
extern "C" {
    pub fn glCreateProgram() -> GLuint;
}
extern "C" {
    pub fn glCreateShader(type_: GLenum) -> GLuint;
}
extern "C" {
    pub fn glCullFace(mode: GLenum);
}
extern "C" {
    pub fn glDeleteBuffers(n: GLsizei, buffers: *const GLuint);
}
extern "C" {
    pub fn glDeleteFramebuffers(n: GLsizei, framebuffers: *const GLuint);
}
extern "C" {
    pub fn glDeleteProgram(program: GLuint);
}
extern "C" {
    pub fn glDeleteRenderbuffers(n: GLsizei, renderbuffers: *const GLuint);
}
extern "C" {
    pub fn glDeleteShader(shader: GLuint);
}
extern "C" {
    pub fn glDeleteTextures(n: GLsizei, textures: *const GLuint);
}
extern "C" {
    pub fn glDepthFunc(func: GLenum);
}
extern "C" {
    pub fn glDepthMask(flag: GLboolean);
}
extern "C" {
    pub fn glDepthRangef(n: GLfloat, f: GLfloat);
}
extern "C" {
    pub fn glDetachShader(program: GLuint, shader: GLuint);
}
extern "C" {
    pub fn glDisable(cap: GLenum);
}
extern "C" {
    pub fn glDisableVertexAttribArray(index: GLuint);
}
extern "C" {
    pub fn glDrawArrays(mode: GLenum, first: GLint, count: GLsizei);
}
extern "C" {
    pub fn glDrawElements(
        mode: GLenum,
        count: GLsizei,
        type_: GLenum,
        indices: *const rs_ctypes::c_void,
    );
}
extern "C" {
    pub fn glEnable(cap: GLenum);
}
extern "C" {
    pub fn glEnableVertexAttribArray(index: GLuint);
}
extern "C" {
    pub fn glFinish();
}
extern "C" {
    pub fn glFlush();
}
extern "C" {
    pub fn glFramebufferRenderbuffer(
        target: GLenum,
        attachment: GLenum,
        renderbuffertarget: GLenum,
        renderbuffer: GLuint,
    );
}
extern "C" {
    pub fn glFramebufferTexture2D(
        target: GLenum,
        attachment: GLenum,
        textarget: GLenum,
        texture: GLuint,
        level: GLint,
    );
}
extern "C" {
    pub fn glFrontFace(mode: GLenum);
}
extern "C" {
    pub fn glGenBuffers(n: GLsizei, buffers: *mut GLuint);
}
extern "C" {
    pub fn glGenerateMipmap(target: GLenum);
}
extern "C" {
    pub fn glGenFramebuffers(n: GLsizei, framebuffers: *mut GLuint);
}
extern "C" {
    pub fn glGenRenderbuffers(n: GLsizei, renderbuffers: *mut GLuint);
}
extern "C" {
    pub fn glGenTextures(n: GLsizei, textures: *mut GLuint);
}
extern "C" {
    pub fn glGetActiveAttrib(
        program: GLuint,
        index: GLuint,
        bufSize: GLsizei,
        length: *mut GLsizei,
        size: *mut GLint,
        type_: *mut GLenum,
        name: *mut GLchar,
    );
}
extern "C" {
    pub fn glGetActiveUniform(
        program: GLuint,
        index: GLuint,
        bufSize: GLsizei,
        length: *mut GLsizei,
        size: *mut GLint,
        type_: *mut GLenum,
        name: *mut GLchar,
    );
}
extern "C" {
    pub fn glGetAttachedShaders(
        program: GLuint,
        maxCount: GLsizei,
        count: *mut GLsizei,
        shaders: *mut GLuint,
    );
}
extern "C" {
    pub fn glGetAttribLocation(program: GLuint, name: *const GLchar) -> GLint;
}
extern "C" {
    pub fn glGetBooleanv(pname: GLenum, data: *mut GLboolean);
}
extern "C" {
    pub fn glGetBufferParameteriv(target: GLenum, pname: GLenum, params: *mut GLint);
}
extern "C" {
    pub fn glGetError() -> GLenum;
}
extern "C" {
    pub fn glGetFloatv(pname: GLenum, data: *mut GLfloat);
}
extern "C" {
    pub fn glGetFramebufferAttachmentParameteriv(
        target: GLenum,
        attachment: GLenum,
        pname: GLenum,
        params: *mut GLint,
    );
}
extern "C" {
    pub fn glGetIntegerv(pname: GLenum, data: *mut GLint);
}
extern "C" {
    pub fn glGetProgramiv(program: GLuint, pname: GLenum, params: *mut GLint);
}
extern "C" {
    pub fn glGetProgramInfoLog(
        program: GLuint,
        bufSize: GLsizei,
        length: *mut GLsizei,
        infoLog: *mut GLchar,
    );
}
extern "C" {
    pub fn glGetRenderbufferParameteriv(target: GLenum, pname: GLenum, params: *mut GLint);
}
extern "C" {
    pub fn glGetShaderiv(shader: GLuint, pname: GLenum, params: *mut GLint);
}
extern "C" {
    pub fn glGetShaderInfoLog(
        shader: GLuint,
        bufSize: GLsizei,
        length: *mut GLsizei,
        infoLog: *mut GLchar,
    );
}
extern "C" {
    pub fn glGetShaderPrecisionFormat(
        shadertype: GLenum,
        precisiontype: GLenum,
        range: *mut GLint,
        precision: *mut GLint,
    );
}
extern "C" {
    pub fn glGetShaderSource(
        shader: GLuint,
        bufSize: GLsizei,
        length: *mut GLsizei,
        source: *mut GLchar,
    );
}
extern "C" {
    pub fn glGetString(name: GLenum) -> *const GLubyte;
}
extern "C" {
    pub fn glGetTexParameterfv(target: GLenum, pname: GLenum, params: *mut GLfloat);
}
extern "C" {
    pub fn glGetTexParameteriv(target: GLenum, pname: GLenum, params: *mut GLint);
}
extern "C" {
    pub fn glGetUniformfv(program: GLuint, location: GLint, params: *mut GLfloat);
}
extern "C" {
    pub fn glGetUniformiv(program: GLuint, location: GLint, params: *mut GLint);
}
extern "C" {
    pub fn glGetUniformLocation(program: GLuint, name: *const GLchar) -> GLint;
}
extern "C" {
    pub fn glGetVertexAttribfv(index: GLuint, pname: GLenum, params: *mut GLfloat);
}
extern "C" {
    pub fn glGetVertexAttribiv(index: GLuint, pname: GLenum, params: *mut GLint);
}
extern "C" {
    pub fn glGetVertexAttribPointerv(
        index: GLuint,
        pname: GLenum,
        pointer: *mut *mut rs_ctypes::c_void,
    );
}
extern "C" {
    pub fn glHint(target: GLenum, mode: GLenum);
}
extern "C" {
    pub fn glIsBuffer(buffer: GLuint) -> GLboolean;
}
extern "C" {
    pub fn glIsEnabled(cap: GLenum) -> GLboolean;
}
extern "C" {
    pub fn glIsFramebuffer(framebuffer: GLuint) -> GLboolean;
}
extern "C" {
    pub fn glIsProgram(program: GLuint) -> GLboolean;
}
extern "C" {
    pub fn glIsRenderbuffer(renderbuffer: GLuint) -> GLboolean;
}
extern "C" {
    pub fn glIsShader(shader: GLuint) -> GLboolean;
}
extern "C" {
    pub fn glIsTexture(texture: GLuint) -> GLboolean;
}
extern "C" {
    pub fn glLineWidth(width: GLfloat);
}
extern "C" {
    pub fn glLinkProgram(program: GLuint);
}
extern "C" {
    pub fn glPixelStorei(pname: GLenum, param: GLint);
}
extern "C" {
    pub fn glPolygonOffset(factor: GLfloat, units: GLfloat);
}
extern "C" {
    pub fn glReadPixels(
        x: GLint,
        y: GLint,
        width: GLsizei,
        height: GLsizei,
        format: GLenum,
        type_: GLenum,
        pixels: *mut rs_ctypes::c_void,
    );
}
extern "C" {
    pub fn glReleaseShaderCompiler();
}
extern "C" {
    pub fn glRenderbufferStorage(
        target: GLenum,
        internalformat: GLenum,
        width: GLsizei,
        height: GLsizei,
    );
}
extern "C" {
    pub fn glSampleCoverage(value: GLfloat, invert: GLboolean);
}
extern "C" {
    pub fn glScissor(x: GLint, y: GLint, width: GLsizei, height: GLsizei);
}
extern "C" {
    pub fn glShaderBinary(
        count: GLsizei,
        shaders: *const GLuint,
        binaryformat: GLenum,
        binary: *const rs_ctypes::c_void,
        length: GLsizei,
    );
}
extern "C" {
    pub fn glShaderSource(
        shader: GLuint,
        count: GLsizei,
        string: *const *const GLchar,
        length: *const GLint,
    );
}
extern "C" {
    pub fn glStencilFunc(func: GLenum, ref_: GLint, mask: GLuint);
}
extern "C" {
    pub fn glStencilFuncSeparate(face: GLenum, func: GLenum, ref_: GLint, mask: GLuint);
}
extern "C" {
    pub fn glStencilMask(mask: GLuint);
}
extern "C" {
    pub fn glStencilMaskSeparate(face: GLenum, mask: GLuint);
}
extern "C" {
    pub fn glStencilOp(fail: GLenum, zfail: GLenum, zpass: GLenum);
}
extern "C" {
    pub fn glStencilOpSeparate(face: GLenum, sfail: GLenum, dpfail: GLenum, dppass: GLenum);
}
extern "C" {
    pub fn glTexImage2D(
        target: GLenum,
        level: GLint,
        internalformat: GLint,
        width: GLsizei,
        height: GLsizei,
        border: GLint,
        format: GLenum,
        type_: GLenum,
        pixels: *const rs_ctypes::c_void,
    );
}
extern "C" {
    pub fn glTexParameterf(target: GLenum, pname: GLenum, param: GLfloat);
}
extern "C" {
    pub fn glTexParameterfv(target: GLenum, pname: GLenum, params: *const GLfloat);
}
extern "C" {
    pub fn glTexParameteri(target: GLenum, pname: GLenum, param: GLint);
}
extern "C" {
    pub fn glTexParameteriv(target: GLenum, pname: GLenum, params: *const GLint);
}
extern "C" {
    pub fn glTexSubImage2D(
        target: GLenum,
        level: GLint,
        xoffset: GLint,
        yoffset: GLint,
        width: GLsizei,
        height: GLsizei,
        format: GLenum,
        type_: GLenum,
        pixels: *const rs_ctypes::c_void,
    );
}
extern "C" {
    pub fn glUniform1f(location: GLint, v0: GLfloat);
}
extern "C" {
    pub fn glUniform1fv(location: GLint, count: GLsizei, value: *const GLfloat);
}
extern "C" {
    pub fn glUniform1i(location: GLint, v0: GLint);
}
extern "C" {
    pub fn glUniform1iv(location: GLint, count: GLsizei, value: *const GLint);
}
extern "C" {
    pub fn glUniform2f(location: GLint, v0: GLfloat, v1: GLfloat);
}
extern "C" {
    pub fn glUniform2fv(location: GLint, count: GLsizei, value: *const GLfloat);
}
extern "C" {
    pub fn glUniform2i(location: GLint, v0: GLint, v1: GLint);
}
extern "C" {
    pub fn glUniform2iv(location: GLint, count: GLsizei, value: *const GLint);
}
extern "C" {
    pub fn glUniform3f(location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat);
}
extern "C" {
    pub fn glUniform3fv(location: GLint, count: GLsizei, value: *const GLfloat);
}
extern "C" {
    pub fn glUniform3i(location: GLint, v0: GLint, v1: GLint, v2: GLint);
}
extern "C" {
    pub fn glUniform3iv(location: GLint, count: GLsizei, value: *const GLint);
}
extern "C" {
    pub fn glUniform4f(location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat);
}
extern "C" {
    pub fn glUniform4fv(location: GLint, count: GLsizei, value: *const GLfloat);
}
extern "C" {
    pub fn glUniform4i(location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint);
}
extern "C" {
    pub fn glUniform4iv(location: GLint, count: GLsizei, value: *const GLint);
}
extern "C" {
    pub fn glUniformMatrix2fv(
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    );
}
extern "C" {
    pub fn glUniformMatrix3fv(
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    );
}
extern "C" {
    pub fn glUniformMatrix4fv(
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    );
}
extern "C" {
    pub fn glUseProgram(program: GLuint);
}
extern "C" {
    pub fn glValidateProgram(program: GLuint);
}
extern "C" {
    pub fn glVertexAttrib1f(index: GLuint, x: GLfloat);
}
extern "C" {
    pub fn glVertexAttrib1fv(index: GLuint, v: *const GLfloat);
}
extern "C" {
    pub fn glVertexAttrib2f(index: GLuint, x: GLfloat, y: GLfloat);
}
extern "C" {
    pub fn glVertexAttrib2fv(index: GLuint, v: *const GLfloat);
}
extern "C" {
    pub fn glVertexAttrib3f(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat);
}
extern "C" {
    pub fn glVertexAttrib3fv(index: GLuint, v: *const GLfloat);
}
extern "C" {
    pub fn glVertexAttrib4f(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat);
}
extern "C" {
    pub fn glVertexAttrib4fv(index: GLuint, v: *const GLfloat);
}
extern "C" {
    pub fn glVertexAttribPointer(
        index: GLuint,
        size: GLint,
        type_: GLenum,
        normalized: GLboolean,
        stride: GLsizei,
        pointer: *const rs_ctypes::c_void,
    );
}
extern "C" {
    pub fn glViewport(x: GLint, y: GLint, width: GLsizei, height: GLsizei);
}
pub type PFNGLBLENDBARRIERKHRPROC = ::core::option::Option<unsafe extern "C" fn()>;
pub type GLDEBUGPROCKHR = ::core::option::Option<
    unsafe extern "C" fn(
        source: GLenum,
        type_: GLenum,
        id: GLuint,
        severity: GLenum,
        length: GLsizei,
        message: *const GLchar,
        userParam: *const rs_ctypes::c_void,
    ),
>;
pub type PFNGLDEBUGMESSAGECONTROLKHRPROC = ::core::option::Option<
    unsafe extern "C" fn(
        source: GLenum,
        type_: GLenum,
        severity: GLenum,
        count: GLsizei,
        ids: *const GLuint,
        enabled: GLboolean,
    ),
>;
pub type PFNGLDEBUGMESSAGEINSERTKHRPROC = ::core::option::Option<
    unsafe extern "C" fn(
        source: GLenum,
        type_: GLenum,
        id: GLuint,
        severity: GLenum,
        length: GLsizei,
        buf: *const GLchar,
    ),
>;
pub type PFNGLDEBUGMESSAGECALLBACKKHRPROC = ::core::option::Option<
    unsafe extern "C" fn(callback: GLDEBUGPROCKHR, userParam: *const rs_ctypes::c_void),
>;
pub type PFNGLGETDEBUGMESSAGELOGKHRPROC = ::core::option::Option<
    unsafe extern "C" fn(
        count: GLuint,
        bufSize: GLsizei,
        sources: *mut GLenum,
        types: *mut GLenum,
        ids: *mut GLuint,
        severities: *mut GLenum,
        lengths: *mut GLsizei,
        messageLog: *mut GLchar,
    ) -> GLuint,
>;
pub type PFNGLPUSHDEBUGGROUPKHRPROC = ::core::option::Option<
    unsafe extern "C" fn(source: GLenum, id: GLuint, length: GLsizei, message: *const GLchar),
>;
pub type PFNGLPOPDEBUGGROUPKHRPROC = ::core::option::Option<unsafe extern "C" fn()>;
pub type PFNGLOBJECTLABELKHRPROC = ::core::option::Option<
    unsafe extern "C" fn(identifier: GLenum, name: GLuint, length: GLsizei, label: *const GLchar),
>;
pub type PFNGLGETOBJECTLABELKHRPROC = ::core::option::Option<
    unsafe extern "C" fn(
        identifier: GLenum,
        name: GLuint,
        bufSize: GLsizei,
        length: *mut GLsizei,
        label: *mut GLchar,
    ),
>;
pub type PFNGLOBJECTPTRLABELKHRPROC = ::core::option::Option<
    unsafe extern "C" fn(ptr: *const rs_ctypes::c_void, length: GLsizei, label: *const GLchar),
>;
pub type PFNGLGETOBJECTPTRLABELKHRPROC = ::core::option::Option<
    unsafe extern "C" fn(
        ptr: *const rs_ctypes::c_void,
        bufSize: GLsizei,
        length: *mut GLsizei,
        label: *mut GLchar,
    ),
>;
pub type PFNGLGETPOINTERVKHRPROC = ::core::option::Option<
    unsafe extern "C" fn(pname: GLenum, params: *mut *mut rs_ctypes::c_void),
>;
pub type PFNGLMAXSHADERCOMPILERTHREADSKHRPROC =
    ::core::option::Option<unsafe extern "C" fn(count: GLuint)>;
pub type PFNGLGETGRAPHICSRESETSTATUSKHRPROC =
    ::core::option::Option<unsafe extern "C" fn() -> GLenum>;
pub type PFNGLREADNPIXELSKHRPROC = ::core::option::Option<
    unsafe extern "C" fn(
        x: GLint,
        y: GLint,
        width: GLsizei,
        height: GLsizei,
        format: GLenum,
        type_: GLenum,
        bufSize: GLsizei,
        data: *mut rs_ctypes::c_void,
    ),
>;
pub type PFNGLGETNUNIFORMFVKHRPROC = ::core::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, bufSize: GLsizei, params: *mut GLfloat),
>;
pub type PFNGLGETNUNIFORMIVKHRPROC = ::core::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, bufSize: GLsizei, params: *mut GLint),
>;
pub type PFNGLGETNUNIFORMUIVKHRPROC = ::core::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, bufSize: GLsizei, params: *mut GLuint),
>;
pub type GLeglImageOES = *mut rs_ctypes::c_void;
pub type PFNGLEGLIMAGETARGETTEXTURE2DOESPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, image: GLeglImageOES)>;
pub type PFNGLEGLIMAGETARGETRENDERBUFFERSTORAGEOESPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, image: GLeglImageOES)>;
pub type PFNGLCOPYIMAGESUBDATAOESPROC = ::core::option::Option<
    unsafe extern "C" fn(
        srcName: GLuint,
        srcTarget: GLenum,
        srcLevel: GLint,
        srcX: GLint,
        srcY: GLint,
        srcZ: GLint,
        dstName: GLuint,
        dstTarget: GLenum,
        dstLevel: GLint,
        dstX: GLint,
        dstY: GLint,
        dstZ: GLint,
        srcWidth: GLsizei,
        srcHeight: GLsizei,
        srcDepth: GLsizei,
    ),
>;
pub type PFNGLENABLEIOESPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, index: GLuint)>;
pub type PFNGLDISABLEIOESPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, index: GLuint)>;
pub type PFNGLBLENDEQUATIONIOESPROC =
    ::core::option::Option<unsafe extern "C" fn(buf: GLuint, mode: GLenum)>;
pub type PFNGLBLENDEQUATIONSEPARATEIOESPROC =
    ::core::option::Option<unsafe extern "C" fn(buf: GLuint, modeRGB: GLenum, modeAlpha: GLenum)>;
pub type PFNGLBLENDFUNCIOESPROC =
    ::core::option::Option<unsafe extern "C" fn(buf: GLuint, src: GLenum, dst: GLenum)>;
pub type PFNGLBLENDFUNCSEPARATEIOESPROC = ::core::option::Option<
    unsafe extern "C" fn(
        buf: GLuint,
        srcRGB: GLenum,
        dstRGB: GLenum,
        srcAlpha: GLenum,
        dstAlpha: GLenum,
    ),
>;
pub type PFNGLCOLORMASKIOESPROC = ::core::option::Option<
    unsafe extern "C" fn(index: GLuint, r: GLboolean, g: GLboolean, b: GLboolean, a: GLboolean),
>;
pub type PFNGLISENABLEDIOESPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, index: GLuint) -> GLboolean>;
pub type PFNGLDRAWELEMENTSBASEVERTEXOESPROC = ::core::option::Option<
    unsafe extern "C" fn(
        mode: GLenum,
        count: GLsizei,
        type_: GLenum,
        indices: *const rs_ctypes::c_void,
        basevertex: GLint,
    ),
>;
pub type PFNGLDRAWRANGEELEMENTSBASEVERTEXOESPROC = ::core::option::Option<
    unsafe extern "C" fn(
        mode: GLenum,
        start: GLuint,
        end: GLuint,
        count: GLsizei,
        type_: GLenum,
        indices: *const rs_ctypes::c_void,
        basevertex: GLint,
    ),
>;
pub type PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXOESPROC = ::core::option::Option<
    unsafe extern "C" fn(
        mode: GLenum,
        count: GLsizei,
        type_: GLenum,
        indices: *const rs_ctypes::c_void,
        instancecount: GLsizei,
        basevertex: GLint,
    ),
>;
pub type PFNGLMULTIDRAWELEMENTSBASEVERTEXEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        mode: GLenum,
        count: *const GLsizei,
        type_: GLenum,
        indices: *const *const rs_ctypes::c_void,
        primcount: GLsizei,
        basevertex: *const GLint,
    ),
>;
pub type PFNGLFRAMEBUFFERTEXTUREOESPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint),
>;
pub type PFNGLGETPROGRAMBINARYOESPROC = ::core::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        bufSize: GLsizei,
        length: *mut GLsizei,
        binaryFormat: *mut GLenum,
        binary: *mut rs_ctypes::c_void,
    ),
>;
pub type PFNGLPROGRAMBINARYOESPROC = ::core::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        binaryFormat: GLenum,
        binary: *const rs_ctypes::c_void,
        length: GLint,
    ),
>;
pub type PFNGLMAPBUFFEROESPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, access: GLenum) -> *mut rs_ctypes::c_void,
>;
pub type PFNGLUNMAPBUFFEROESPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum) -> GLboolean>;
pub type PFNGLGETBUFFERPOINTERVOESPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *mut *mut rs_ctypes::c_void),
>;
pub type PFNGLPRIMITIVEBOUNDINGBOXOESPROC = ::core::option::Option<
    unsafe extern "C" fn(
        minX: GLfloat,
        minY: GLfloat,
        minZ: GLfloat,
        minW: GLfloat,
        maxX: GLfloat,
        maxY: GLfloat,
        maxZ: GLfloat,
        maxW: GLfloat,
    ),
>;
pub type PFNGLMINSAMPLESHADINGOESPROC =
    ::core::option::Option<unsafe extern "C" fn(value: GLfloat)>;
pub type PFNGLPATCHPARAMETERIOESPROC =
    ::core::option::Option<unsafe extern "C" fn(pname: GLenum, value: GLint)>;
pub type PFNGLTEXIMAGE3DOESPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        level: GLint,
        internalformat: GLenum,
        width: GLsizei,
        height: GLsizei,
        depth: GLsizei,
        border: GLint,
        format: GLenum,
        type_: GLenum,
        pixels: *const rs_ctypes::c_void,
    ),
>;
pub type PFNGLTEXSUBIMAGE3DOESPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        level: GLint,
        xoffset: GLint,
        yoffset: GLint,
        zoffset: GLint,
        width: GLsizei,
        height: GLsizei,
        depth: GLsizei,
        format: GLenum,
        type_: GLenum,
        pixels: *const rs_ctypes::c_void,
    ),
>;
pub type PFNGLCOPYTEXSUBIMAGE3DOESPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        level: GLint,
        xoffset: GLint,
        yoffset: GLint,
        zoffset: GLint,
        x: GLint,
        y: GLint,
        width: GLsizei,
        height: GLsizei,
    ),
>;
pub type PFNGLCOMPRESSEDTEXIMAGE3DOESPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        level: GLint,
        internalformat: GLenum,
        width: GLsizei,
        height: GLsizei,
        depth: GLsizei,
        border: GLint,
        imageSize: GLsizei,
        data: *const rs_ctypes::c_void,
    ),
>;
pub type PFNGLCOMPRESSEDTEXSUBIMAGE3DOESPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        level: GLint,
        xoffset: GLint,
        yoffset: GLint,
        zoffset: GLint,
        width: GLsizei,
        height: GLsizei,
        depth: GLsizei,
        format: GLenum,
        imageSize: GLsizei,
        data: *const rs_ctypes::c_void,
    ),
>;
pub type PFNGLFRAMEBUFFERTEXTURE3DOESPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        attachment: GLenum,
        textarget: GLenum,
        texture: GLuint,
        level: GLint,
        zoffset: GLint,
    ),
>;
pub type PFNGLTEXPARAMETERIIVOESPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *const GLint),
>;
pub type PFNGLTEXPARAMETERIUIVOESPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *const GLuint),
>;
pub type PFNGLGETTEXPARAMETERIIVOESPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *mut GLint)>;
pub type PFNGLGETTEXPARAMETERIUIVOESPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *mut GLuint),
>;
pub type PFNGLSAMPLERPARAMETERIIVOESPROC = ::core::option::Option<
    unsafe extern "C" fn(sampler: GLuint, pname: GLenum, param: *const GLint),
>;
pub type PFNGLSAMPLERPARAMETERIUIVOESPROC = ::core::option::Option<
    unsafe extern "C" fn(sampler: GLuint, pname: GLenum, param: *const GLuint),
>;
pub type PFNGLGETSAMPLERPARAMETERIIVOESPROC = ::core::option::Option<
    unsafe extern "C" fn(sampler: GLuint, pname: GLenum, params: *mut GLint),
>;
pub type PFNGLGETSAMPLERPARAMETERIUIVOESPROC = ::core::option::Option<
    unsafe extern "C" fn(sampler: GLuint, pname: GLenum, params: *mut GLuint),
>;
pub type PFNGLTEXBUFFEROESPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, internalformat: GLenum, buffer: GLuint),
>;
pub type PFNGLTEXBUFFERRANGEOESPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        internalformat: GLenum,
        buffer: GLuint,
        offset: GLintptr,
        size: GLsizeiptr,
    ),
>;
pub type PFNGLTEXSTORAGE3DMULTISAMPLEOESPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        samples: GLsizei,
        internalformat: GLenum,
        width: GLsizei,
        height: GLsizei,
        depth: GLsizei,
        fixedsamplelocations: GLboolean,
    ),
>;
pub type PFNGLTEXTUREVIEWOESPROC = ::core::option::Option<
    unsafe extern "C" fn(
        texture: GLuint,
        target: GLenum,
        origtexture: GLuint,
        internalformat: GLenum,
        minlevel: GLuint,
        numlevels: GLuint,
        minlayer: GLuint,
        numlayers: GLuint,
    ),
>;
pub type PFNGLBINDVERTEXARRAYOESPROC = ::core::option::Option<unsafe extern "C" fn(array: GLuint)>;
pub type PFNGLDELETEVERTEXARRAYSOESPROC =
    ::core::option::Option<unsafe extern "C" fn(n: GLsizei, arrays: *const GLuint)>;
pub type PFNGLGENVERTEXARRAYSOESPROC =
    ::core::option::Option<unsafe extern "C" fn(n: GLsizei, arrays: *mut GLuint)>;
pub type PFNGLISVERTEXARRAYOESPROC =
    ::core::option::Option<unsafe extern "C" fn(array: GLuint) -> GLboolean>;
pub type PFNGLVIEWPORTARRAYVOESPROC =
    ::core::option::Option<unsafe extern "C" fn(first: GLuint, count: GLsizei, v: *const GLfloat)>;
pub type PFNGLVIEWPORTINDEXEDFOESPROC = ::core::option::Option<
    unsafe extern "C" fn(index: GLuint, x: GLfloat, y: GLfloat, w: GLfloat, h: GLfloat),
>;
pub type PFNGLVIEWPORTINDEXEDFVOESPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLfloat)>;
pub type PFNGLSCISSORARRAYVOESPROC =
    ::core::option::Option<unsafe extern "C" fn(first: GLuint, count: GLsizei, v: *const GLint)>;
pub type PFNGLSCISSORINDEXEDOESPROC = ::core::option::Option<
    unsafe extern "C" fn(
        index: GLuint,
        left: GLint,
        bottom: GLint,
        width: GLsizei,
        height: GLsizei,
    ),
>;
pub type PFNGLSCISSORINDEXEDVOESPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLint)>;
pub type PFNGLDEPTHRANGEARRAYFVOESPROC =
    ::core::option::Option<unsafe extern "C" fn(first: GLuint, count: GLsizei, v: *const GLfloat)>;
pub type PFNGLDEPTHRANGEINDEXEDFOESPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, n: GLfloat, f: GLfloat)>;
pub type PFNGLGETFLOATI_VOESPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, index: GLuint, data: *mut GLfloat)>;
pub type PFNGLRENDERBUFFERSTORAGEMULTISAMPLEADVANCEDAMDPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        samples: GLsizei,
        storageSamples: GLsizei,
        internalformat: GLenum,
        width: GLsizei,
        height: GLsizei,
    ),
>;
pub type PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEADVANCEDAMDPROC = ::core::option::Option<
    unsafe extern "C" fn(
        renderbuffer: GLuint,
        samples: GLsizei,
        storageSamples: GLsizei,
        internalformat: GLenum,
        width: GLsizei,
        height: GLsizei,
    ),
>;
pub type PFNGLGETPERFMONITORGROUPSAMDPROC = ::core::option::Option<
    unsafe extern "C" fn(numGroups: *mut GLint, groupsSize: GLsizei, groups: *mut GLuint),
>;
pub type PFNGLGETPERFMONITORCOUNTERSAMDPROC = ::core::option::Option<
    unsafe extern "C" fn(
        group: GLuint,
        numCounters: *mut GLint,
        maxActiveCounters: *mut GLint,
        counterSize: GLsizei,
        counters: *mut GLuint,
    ),
>;
pub type PFNGLGETPERFMONITORGROUPSTRINGAMDPROC = ::core::option::Option<
    unsafe extern "C" fn(
        group: GLuint,
        bufSize: GLsizei,
        length: *mut GLsizei,
        groupString: *mut GLchar,
    ),
>;
pub type PFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC = ::core::option::Option<
    unsafe extern "C" fn(
        group: GLuint,
        counter: GLuint,
        bufSize: GLsizei,
        length: *mut GLsizei,
        counterString: *mut GLchar,
    ),
>;
pub type PFNGLGETPERFMONITORCOUNTERINFOAMDPROC = ::core::option::Option<
    unsafe extern "C" fn(
        group: GLuint,
        counter: GLuint,
        pname: GLenum,
        data: *mut rs_ctypes::c_void,
    ),
>;
pub type PFNGLGENPERFMONITORSAMDPROC =
    ::core::option::Option<unsafe extern "C" fn(n: GLsizei, monitors: *mut GLuint)>;
pub type PFNGLDELETEPERFMONITORSAMDPROC =
    ::core::option::Option<unsafe extern "C" fn(n: GLsizei, monitors: *mut GLuint)>;
pub type PFNGLSELECTPERFMONITORCOUNTERSAMDPROC = ::core::option::Option<
    unsafe extern "C" fn(
        monitor: GLuint,
        enable: GLboolean,
        group: GLuint,
        numCounters: GLint,
        counterList: *mut GLuint,
    ),
>;
pub type PFNGLBEGINPERFMONITORAMDPROC =
    ::core::option::Option<unsafe extern "C" fn(monitor: GLuint)>;
pub type PFNGLENDPERFMONITORAMDPROC = ::core::option::Option<unsafe extern "C" fn(monitor: GLuint)>;
pub type PFNGLGETPERFMONITORCOUNTERDATAAMDPROC = ::core::option::Option<
    unsafe extern "C" fn(
        monitor: GLuint,
        pname: GLenum,
        dataSize: GLsizei,
        data: *mut GLuint,
        bytesWritten: *mut GLint,
    ),
>;
pub type PFNGLBLITFRAMEBUFFERANGLEPROC = ::core::option::Option<
    unsafe extern "C" fn(
        srcX0: GLint,
        srcY0: GLint,
        srcX1: GLint,
        srcY1: GLint,
        dstX0: GLint,
        dstY0: GLint,
        dstX1: GLint,
        dstY1: GLint,
        mask: GLbitfield,
        filter: GLenum,
    ),
>;
pub type PFNGLRENDERBUFFERSTORAGEMULTISAMPLEANGLEPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        samples: GLsizei,
        internalformat: GLenum,
        width: GLsizei,
        height: GLsizei,
    ),
>;
pub type PFNGLDRAWARRAYSINSTANCEDANGLEPROC = ::core::option::Option<
    unsafe extern "C" fn(mode: GLenum, first: GLint, count: GLsizei, primcount: GLsizei),
>;
pub type PFNGLDRAWELEMENTSINSTANCEDANGLEPROC = ::core::option::Option<
    unsafe extern "C" fn(
        mode: GLenum,
        count: GLsizei,
        type_: GLenum,
        indices: *const rs_ctypes::c_void,
        primcount: GLsizei,
    ),
>;
pub type PFNGLVERTEXATTRIBDIVISORANGLEPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, divisor: GLuint)>;
pub type PFNGLGETTRANSLATEDSHADERSOURCEANGLEPROC = ::core::option::Option<
    unsafe extern "C" fn(
        shader: GLuint,
        bufsize: GLsizei,
        length: *mut GLsizei,
        source: *mut GLchar,
    ),
>;
pub type PFNGLCOPYTEXTURELEVELSAPPLEPROC = ::core::option::Option<
    unsafe extern "C" fn(
        destinationTexture: GLuint,
        sourceTexture: GLuint,
        sourceBaseLevel: GLint,
        sourceLevelCount: GLsizei,
    ),
>;
pub type PFNGLRENDERBUFFERSTORAGEMULTISAMPLEAPPLEPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        samples: GLsizei,
        internalformat: GLenum,
        width: GLsizei,
        height: GLsizei,
    ),
>;
pub type PFNGLRESOLVEMULTISAMPLEFRAMEBUFFERAPPLEPROC =
    ::core::option::Option<unsafe extern "C" fn()>;
pub type PFNGLFENCESYNCAPPLEPROC =
    ::core::option::Option<unsafe extern "C" fn(condition: GLenum, flags: GLbitfield) -> GLsync>;
pub type PFNGLISSYNCAPPLEPROC =
    ::core::option::Option<unsafe extern "C" fn(sync: GLsync) -> GLboolean>;
pub type PFNGLDELETESYNCAPPLEPROC = ::core::option::Option<unsafe extern "C" fn(sync: GLsync)>;
pub type PFNGLCLIENTWAITSYNCAPPLEPROC = ::core::option::Option<
    unsafe extern "C" fn(sync: GLsync, flags: GLbitfield, timeout: GLuint64) -> GLenum,
>;
pub type PFNGLWAITSYNCAPPLEPROC = ::core::option::Option<
    unsafe extern "C" fn(sync: GLsync, flags: GLbitfield, timeout: GLuint64),
>;
pub type PFNGLGETINTEGER64VAPPLEPROC =
    ::core::option::Option<unsafe extern "C" fn(pname: GLenum, params: *mut GLint64)>;
pub type PFNGLGETSYNCIVAPPLEPROC = ::core::option::Option<
    unsafe extern "C" fn(
        sync: GLsync,
        pname: GLenum,
        bufSize: GLsizei,
        length: *mut GLsizei,
        values: *mut GLint,
    ),
>;
pub type PFNGLEGLIMAGETARGETTEXSTORAGEEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, image: GLeglImageOES, attrib_list: *const GLint),
>;
pub type PFNGLEGLIMAGETARGETTEXTURESTORAGEEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(texture: GLuint, image: GLeglImageOES, attrib_list: *const GLint),
>;
pub type PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        mode: GLenum,
        first: GLint,
        count: GLsizei,
        instancecount: GLsizei,
        baseinstance: GLuint,
    ),
>;
pub type PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        mode: GLenum,
        count: GLsizei,
        type_: GLenum,
        indices: *const rs_ctypes::c_void,
        instancecount: GLsizei,
        baseinstance: GLuint,
    ),
>;
pub type PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        mode: GLenum,
        count: GLsizei,
        type_: GLenum,
        indices: *const rs_ctypes::c_void,
        instancecount: GLsizei,
        basevertex: GLint,
        baseinstance: GLuint,
    ),
>;
pub type PFNGLBINDFRAGDATALOCATIONINDEXEDEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(program: GLuint, colorNumber: GLuint, index: GLuint, name: *const GLchar),
>;
pub type PFNGLBINDFRAGDATALOCATIONEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(program: GLuint, color: GLuint, name: *const GLchar),
>;
pub type PFNGLGETPROGRAMRESOURCELOCATIONINDEXEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(program: GLuint, programInterface: GLenum, name: *const GLchar) -> GLint,
>;
pub type PFNGLGETFRAGDATAINDEXEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(program: GLuint, name: *const GLchar) -> GLint>;
pub type PFNGLBUFFERSTORAGEEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        size: GLsizeiptr,
        data: *const rs_ctypes::c_void,
        flags: GLbitfield,
    ),
>;
pub type PFNGLCLEARTEXIMAGEEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        texture: GLuint,
        level: GLint,
        format: GLenum,
        type_: GLenum,
        data: *const rs_ctypes::c_void,
    ),
>;
pub type PFNGLCLEARTEXSUBIMAGEEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        texture: GLuint,
        level: GLint,
        xoffset: GLint,
        yoffset: GLint,
        zoffset: GLint,
        width: GLsizei,
        height: GLsizei,
        depth: GLsizei,
        format: GLenum,
        type_: GLenum,
        data: *const rs_ctypes::c_void,
    ),
>;
pub type PFNGLCLIPCONTROLEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(origin: GLenum, depth: GLenum)>;
pub type PFNGLCOPYIMAGESUBDATAEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        srcName: GLuint,
        srcTarget: GLenum,
        srcLevel: GLint,
        srcX: GLint,
        srcY: GLint,
        srcZ: GLint,
        dstName: GLuint,
        dstTarget: GLenum,
        dstLevel: GLint,
        dstX: GLint,
        dstY: GLint,
        dstZ: GLint,
        srcWidth: GLsizei,
        srcHeight: GLsizei,
        srcDepth: GLsizei,
    ),
>;
pub type PFNGLLABELOBJECTEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(type_: GLenum, object: GLuint, length: GLsizei, label: *const GLchar),
>;
pub type PFNGLGETOBJECTLABELEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        type_: GLenum,
        object: GLuint,
        bufSize: GLsizei,
        length: *mut GLsizei,
        label: *mut GLchar,
    ),
>;
pub type PFNGLINSERTEVENTMARKEREXTPROC =
    ::core::option::Option<unsafe extern "C" fn(length: GLsizei, marker: *const GLchar)>;
pub type PFNGLPUSHGROUPMARKEREXTPROC =
    ::core::option::Option<unsafe extern "C" fn(length: GLsizei, marker: *const GLchar)>;
pub type PFNGLPOPGROUPMARKEREXTPROC = ::core::option::Option<unsafe extern "C" fn()>;
pub type PFNGLDISCARDFRAMEBUFFEREXTPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, numAttachments: GLsizei, attachments: *const GLenum),
>;
pub type PFNGLGENQUERIESEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(n: GLsizei, ids: *mut GLuint)>;
pub type PFNGLDELETEQUERIESEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(n: GLsizei, ids: *const GLuint)>;
pub type PFNGLISQUERYEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(id: GLuint) -> GLboolean>;
pub type PFNGLBEGINQUERYEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, id: GLuint)>;
pub type PFNGLENDQUERYEXTPROC = ::core::option::Option<unsafe extern "C" fn(target: GLenum)>;
pub type PFNGLQUERYCOUNTEREXTPROC =
    ::core::option::Option<unsafe extern "C" fn(id: GLuint, target: GLenum)>;
pub type PFNGLGETQUERYIVEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *mut GLint)>;
pub type PFNGLGETQUERYOBJECTIVEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(id: GLuint, pname: GLenum, params: *mut GLint)>;
pub type PFNGLGETQUERYOBJECTUIVEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(id: GLuint, pname: GLenum, params: *mut GLuint)>;
pub type PFNGLGETQUERYOBJECTI64VEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(id: GLuint, pname: GLenum, params: *mut GLint64)>;
pub type PFNGLGETQUERYOBJECTUI64VEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(id: GLuint, pname: GLenum, params: *mut GLuint64)>;
pub type PFNGLDRAWBUFFERSEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(n: GLsizei, bufs: *const GLenum)>;
pub type PFNGLENABLEIEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, index: GLuint)>;
pub type PFNGLDISABLEIEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, index: GLuint)>;
pub type PFNGLBLENDEQUATIONIEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(buf: GLuint, mode: GLenum)>;
pub type PFNGLBLENDEQUATIONSEPARATEIEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(buf: GLuint, modeRGB: GLenum, modeAlpha: GLenum)>;
pub type PFNGLBLENDFUNCIEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(buf: GLuint, src: GLenum, dst: GLenum)>;
pub type PFNGLBLENDFUNCSEPARATEIEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        buf: GLuint,
        srcRGB: GLenum,
        dstRGB: GLenum,
        srcAlpha: GLenum,
        dstAlpha: GLenum,
    ),
>;
pub type PFNGLCOLORMASKIEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(index: GLuint, r: GLboolean, g: GLboolean, b: GLboolean, a: GLboolean),
>;
pub type PFNGLISENABLEDIEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, index: GLuint) -> GLboolean>;
pub type PFNGLDRAWELEMENTSBASEVERTEXEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        mode: GLenum,
        count: GLsizei,
        type_: GLenum,
        indices: *const rs_ctypes::c_void,
        basevertex: GLint,
    ),
>;
pub type PFNGLDRAWRANGEELEMENTSBASEVERTEXEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        mode: GLenum,
        start: GLuint,
        end: GLuint,
        count: GLsizei,
        type_: GLenum,
        indices: *const rs_ctypes::c_void,
        basevertex: GLint,
    ),
>;
pub type PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        mode: GLenum,
        count: GLsizei,
        type_: GLenum,
        indices: *const rs_ctypes::c_void,
        instancecount: GLsizei,
        basevertex: GLint,
    ),
>;
pub type PFNGLDRAWARRAYSINSTANCEDEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(mode: GLenum, start: GLint, count: GLsizei, primcount: GLsizei),
>;
pub type PFNGLDRAWELEMENTSINSTANCEDEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        mode: GLenum,
        count: GLsizei,
        type_: GLenum,
        indices: *const rs_ctypes::c_void,
        primcount: GLsizei,
    ),
>;
pub type PFNGLDRAWTRANSFORMFEEDBACKEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(mode: GLenum, id: GLuint)>;
pub type PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(mode: GLenum, id: GLuint, instancecount: GLsizei)>;
pub type GLeglClientBufferEXT = *mut rs_ctypes::c_void;
pub type PFNGLBUFFERSTORAGEEXTERNALEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        offset: GLintptr,
        size: GLsizeiptr,
        clientBuffer: GLeglClientBufferEXT,
        flags: GLbitfield,
    ),
>;
pub type PFNGLNAMEDBUFFERSTORAGEEXTERNALEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        buffer: GLuint,
        offset: GLintptr,
        size: GLsizeiptr,
        clientBuffer: GLeglClientBufferEXT,
        flags: GLbitfield,
    ),
>;
pub type PFNGLFRAMEBUFFERTEXTUREEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint),
>;
pub type PFNGLVERTEXATTRIBDIVISOREXTPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, divisor: GLuint)>;
pub type PFNGLMAPBUFFERRANGEEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        offset: GLintptr,
        length: GLsizeiptr,
        access: GLbitfield,
    ) -> *mut rs_ctypes::c_void,
>;
pub type PFNGLFLUSHMAPPEDBUFFERRANGEEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, offset: GLintptr, length: GLsizeiptr),
>;
pub type PFNGLGETUNSIGNEDBYTEVEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(pname: GLenum, data: *mut GLubyte)>;
pub type PFNGLGETUNSIGNEDBYTEI_VEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, index: GLuint, data: *mut GLubyte)>;
pub type PFNGLDELETEMEMORYOBJECTSEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(n: GLsizei, memoryObjects: *const GLuint)>;
pub type PFNGLISMEMORYOBJECTEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(memoryObject: GLuint) -> GLboolean>;
pub type PFNGLCREATEMEMORYOBJECTSEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(n: GLsizei, memoryObjects: *mut GLuint)>;
pub type PFNGLMEMORYOBJECTPARAMETERIVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(memoryObject: GLuint, pname: GLenum, params: *const GLint),
>;
pub type PFNGLGETMEMORYOBJECTPARAMETERIVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(memoryObject: GLuint, pname: GLenum, params: *mut GLint),
>;
pub type PFNGLTEXSTORAGEMEM2DEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        levels: GLsizei,
        internalFormat: GLenum,
        width: GLsizei,
        height: GLsizei,
        memory: GLuint,
        offset: GLuint64,
    ),
>;
pub type PFNGLTEXSTORAGEMEM2DMULTISAMPLEEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        samples: GLsizei,
        internalFormat: GLenum,
        width: GLsizei,
        height: GLsizei,
        fixedSampleLocations: GLboolean,
        memory: GLuint,
        offset: GLuint64,
    ),
>;
pub type PFNGLTEXSTORAGEMEM3DEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        levels: GLsizei,
        internalFormat: GLenum,
        width: GLsizei,
        height: GLsizei,
        depth: GLsizei,
        memory: GLuint,
        offset: GLuint64,
    ),
>;
pub type PFNGLTEXSTORAGEMEM3DMULTISAMPLEEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        samples: GLsizei,
        internalFormat: GLenum,
        width: GLsizei,
        height: GLsizei,
        depth: GLsizei,
        fixedSampleLocations: GLboolean,
        memory: GLuint,
        offset: GLuint64,
    ),
>;
pub type PFNGLBUFFERSTORAGEMEMEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, size: GLsizeiptr, memory: GLuint, offset: GLuint64),
>;
pub type PFNGLTEXTURESTORAGEMEM2DEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        texture: GLuint,
        levels: GLsizei,
        internalFormat: GLenum,
        width: GLsizei,
        height: GLsizei,
        memory: GLuint,
        offset: GLuint64,
    ),
>;
pub type PFNGLTEXTURESTORAGEMEM2DMULTISAMPLEEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        texture: GLuint,
        samples: GLsizei,
        internalFormat: GLenum,
        width: GLsizei,
        height: GLsizei,
        fixedSampleLocations: GLboolean,
        memory: GLuint,
        offset: GLuint64,
    ),
>;
pub type PFNGLTEXTURESTORAGEMEM3DEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        texture: GLuint,
        levels: GLsizei,
        internalFormat: GLenum,
        width: GLsizei,
        height: GLsizei,
        depth: GLsizei,
        memory: GLuint,
        offset: GLuint64,
    ),
>;
pub type PFNGLTEXTURESTORAGEMEM3DMULTISAMPLEEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        texture: GLuint,
        samples: GLsizei,
        internalFormat: GLenum,
        width: GLsizei,
        height: GLsizei,
        depth: GLsizei,
        fixedSampleLocations: GLboolean,
        memory: GLuint,
        offset: GLuint64,
    ),
>;
pub type PFNGLNAMEDBUFFERSTORAGEMEMEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(buffer: GLuint, size: GLsizeiptr, memory: GLuint, offset: GLuint64),
>;
pub type PFNGLIMPORTMEMORYFDEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(memory: GLuint, size: GLuint64, handleType: GLenum, fd: GLint),
>;
pub type PFNGLIMPORTMEMORYWIN32HANDLEEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        memory: GLuint,
        size: GLuint64,
        handleType: GLenum,
        handle: *mut rs_ctypes::c_void,
    ),
>;
pub type PFNGLIMPORTMEMORYWIN32NAMEEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        memory: GLuint,
        size: GLuint64,
        handleType: GLenum,
        name: *const rs_ctypes::c_void,
    ),
>;
pub type PFNGLMULTIDRAWARRAYSEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        mode: GLenum,
        first: *const GLint,
        count: *const GLsizei,
        primcount: GLsizei,
    ),
>;
pub type PFNGLMULTIDRAWELEMENTSEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        mode: GLenum,
        count: *const GLsizei,
        type_: GLenum,
        indices: *const *const rs_ctypes::c_void,
        primcount: GLsizei,
    ),
>;
pub type PFNGLMULTIDRAWARRAYSINDIRECTEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        mode: GLenum,
        indirect: *const rs_ctypes::c_void,
        drawcount: GLsizei,
        stride: GLsizei,
    ),
>;
pub type PFNGLMULTIDRAWELEMENTSINDIRECTEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        mode: GLenum,
        type_: GLenum,
        indirect: *const rs_ctypes::c_void,
        drawcount: GLsizei,
        stride: GLsizei,
    ),
>;
pub type PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        samples: GLsizei,
        internalformat: GLenum,
        width: GLsizei,
        height: GLsizei,
    ),
>;
pub type PFNGLFRAMEBUFFERTEXTURE2DMULTISAMPLEEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        attachment: GLenum,
        textarget: GLenum,
        texture: GLuint,
        level: GLint,
        samples: GLsizei,
    ),
>;
pub type PFNGLREADBUFFERINDEXEDEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(src: GLenum, index: GLint)>;
pub type PFNGLDRAWBUFFERSINDEXEDEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(n: GLint, location: *const GLenum, indices: *const GLint),
>;
pub type PFNGLGETINTEGERI_VEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, index: GLuint, data: *mut GLint)>;
pub type PFNGLPOLYGONOFFSETCLAMPEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(factor: GLfloat, units: GLfloat, clamp: GLfloat)>;
pub type PFNGLPRIMITIVEBOUNDINGBOXEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        minX: GLfloat,
        minY: GLfloat,
        minZ: GLfloat,
        minW: GLfloat,
        maxX: GLfloat,
        maxY: GLfloat,
        maxZ: GLfloat,
        maxW: GLfloat,
    ),
>;
pub type PFNGLRASTERSAMPLESEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(samples: GLuint, fixedsamplelocations: GLboolean)>;
pub type PFNGLGETGRAPHICSRESETSTATUSEXTPROC =
    ::core::option::Option<unsafe extern "C" fn() -> GLenum>;
pub type PFNGLREADNPIXELSEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        x: GLint,
        y: GLint,
        width: GLsizei,
        height: GLsizei,
        format: GLenum,
        type_: GLenum,
        bufSize: GLsizei,
        data: *mut rs_ctypes::c_void,
    ),
>;
pub type PFNGLGETNUNIFORMFVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, bufSize: GLsizei, params: *mut GLfloat),
>;
pub type PFNGLGETNUNIFORMIVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, bufSize: GLsizei, params: *mut GLint),
>;
pub type PFNGLGENSEMAPHORESEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(n: GLsizei, semaphores: *mut GLuint)>;
pub type PFNGLDELETESEMAPHORESEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(n: GLsizei, semaphores: *const GLuint)>;
pub type PFNGLISSEMAPHOREEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(semaphore: GLuint) -> GLboolean>;
pub type PFNGLSEMAPHOREPARAMETERUI64VEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(semaphore: GLuint, pname: GLenum, params: *const GLuint64),
>;
pub type PFNGLGETSEMAPHOREPARAMETERUI64VEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(semaphore: GLuint, pname: GLenum, params: *mut GLuint64),
>;
pub type PFNGLWAITSEMAPHOREEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        semaphore: GLuint,
        numBufferBarriers: GLuint,
        buffers: *const GLuint,
        numTextureBarriers: GLuint,
        textures: *const GLuint,
        srcLayouts: *const GLenum,
    ),
>;
pub type PFNGLSIGNALSEMAPHOREEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        semaphore: GLuint,
        numBufferBarriers: GLuint,
        buffers: *const GLuint,
        numTextureBarriers: GLuint,
        textures: *const GLuint,
        dstLayouts: *const GLenum,
    ),
>;
pub type PFNGLIMPORTSEMAPHOREFDEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(semaphore: GLuint, handleType: GLenum, fd: GLint)>;
pub type PFNGLIMPORTSEMAPHOREWIN32HANDLEEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(semaphore: GLuint, handleType: GLenum, handle: *mut rs_ctypes::c_void),
>;
pub type PFNGLIMPORTSEMAPHOREWIN32NAMEEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(semaphore: GLuint, handleType: GLenum, name: *const rs_ctypes::c_void),
>;
pub type PFNGLACTIVESHADERPROGRAMEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(pipeline: GLuint, program: GLuint)>;
pub type PFNGLBINDPROGRAMPIPELINEEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(pipeline: GLuint)>;
pub type PFNGLCREATESHADERPROGRAMVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(type_: GLenum, count: GLsizei, strings: *mut *const GLchar) -> GLuint,
>;
pub type PFNGLDELETEPROGRAMPIPELINESEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(n: GLsizei, pipelines: *const GLuint)>;
pub type PFNGLGENPROGRAMPIPELINESEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(n: GLsizei, pipelines: *mut GLuint)>;
pub type PFNGLGETPROGRAMPIPELINEINFOLOGEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        pipeline: GLuint,
        bufSize: GLsizei,
        length: *mut GLsizei,
        infoLog: *mut GLchar,
    ),
>;
pub type PFNGLGETPROGRAMPIPELINEIVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(pipeline: GLuint, pname: GLenum, params: *mut GLint),
>;
pub type PFNGLISPROGRAMPIPELINEEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(pipeline: GLuint) -> GLboolean>;
pub type PFNGLPROGRAMPARAMETERIEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(program: GLuint, pname: GLenum, value: GLint)>;
pub type PFNGLPROGRAMUNIFORM1FEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(program: GLuint, location: GLint, v0: GLfloat)>;
pub type PFNGLPROGRAMUNIFORM1FVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *const GLfloat),
>;
pub type PFNGLPROGRAMUNIFORM1IEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(program: GLuint, location: GLint, v0: GLint)>;
pub type PFNGLPROGRAMUNIFORM1IVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *const GLint),
>;
pub type PFNGLPROGRAMUNIFORM2FEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat),
>;
pub type PFNGLPROGRAMUNIFORM2FVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *const GLfloat),
>;
pub type PFNGLPROGRAMUNIFORM2IEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, v0: GLint, v1: GLint),
>;
pub type PFNGLPROGRAMUNIFORM2IVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *const GLint),
>;
pub type PFNGLPROGRAMUNIFORM3FEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat),
>;
pub type PFNGLPROGRAMUNIFORM3FVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *const GLfloat),
>;
pub type PFNGLPROGRAMUNIFORM3IEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint),
>;
pub type PFNGLPROGRAMUNIFORM3IVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *const GLint),
>;
pub type PFNGLPROGRAMUNIFORM4FEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        v0: GLfloat,
        v1: GLfloat,
        v2: GLfloat,
        v3: GLfloat,
    ),
>;
pub type PFNGLPROGRAMUNIFORM4FVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *const GLfloat),
>;
pub type PFNGLPROGRAMUNIFORM4IEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        v0: GLint,
        v1: GLint,
        v2: GLint,
        v3: GLint,
    ),
>;
pub type PFNGLPROGRAMUNIFORM4IVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *const GLint),
>;
pub type PFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    ),
>;
pub type PFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    ),
>;
pub type PFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    ),
>;
pub type PFNGLUSEPROGRAMSTAGESEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(pipeline: GLuint, stages: GLbitfield, program: GLuint),
>;
pub type PFNGLVALIDATEPROGRAMPIPELINEEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(pipeline: GLuint)>;
pub type PFNGLPROGRAMUNIFORM1UIEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(program: GLuint, location: GLint, v0: GLuint)>;
pub type PFNGLPROGRAMUNIFORM2UIEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, v0: GLuint, v1: GLuint),
>;
pub type PFNGLPROGRAMUNIFORM3UIEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint),
>;
pub type PFNGLPROGRAMUNIFORM4UIEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        v0: GLuint,
        v1: GLuint,
        v2: GLuint,
        v3: GLuint,
    ),
>;
pub type PFNGLPROGRAMUNIFORM1UIVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *const GLuint),
>;
pub type PFNGLPROGRAMUNIFORM2UIVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *const GLuint),
>;
pub type PFNGLPROGRAMUNIFORM3UIVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *const GLuint),
>;
pub type PFNGLPROGRAMUNIFORM4UIVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *const GLuint),
>;
pub type PFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    ),
>;
pub type PFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    ),
>;
pub type PFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    ),
>;
pub type PFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    ),
>;
pub type PFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    ),
>;
pub type PFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    ),
>;
pub type PFNGLFRAMEBUFFERFETCHBARRIEREXTPROC = ::core::option::Option<unsafe extern "C" fn()>;
pub type PFNGLFRAMEBUFFERPIXELLOCALSTORAGESIZEEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLuint, size: GLsizei)>;
pub type PFNGLGETFRAMEBUFFERPIXELLOCALSTORAGESIZEEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLuint) -> GLsizei>;
pub type PFNGLCLEARPIXELLOCALSTORAGEUIEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(offset: GLsizei, n: GLsizei, values: *const GLuint),
>;
pub type PFNGLTEXPAGECOMMITMENTEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        level: GLint,
        xoffset: GLint,
        yoffset: GLint,
        zoffset: GLint,
        width: GLsizei,
        height: GLsizei,
        depth: GLsizei,
        commit: GLboolean,
    ),
>;
pub type PFNGLPATCHPARAMETERIEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(pname: GLenum, value: GLint)>;
pub type PFNGLTEXPARAMETERIIVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *const GLint),
>;
pub type PFNGLTEXPARAMETERIUIVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *const GLuint),
>;
pub type PFNGLGETTEXPARAMETERIIVEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *mut GLint)>;
pub type PFNGLGETTEXPARAMETERIUIVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *mut GLuint),
>;
pub type PFNGLSAMPLERPARAMETERIIVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(sampler: GLuint, pname: GLenum, param: *const GLint),
>;
pub type PFNGLSAMPLERPARAMETERIUIVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(sampler: GLuint, pname: GLenum, param: *const GLuint),
>;
pub type PFNGLGETSAMPLERPARAMETERIIVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(sampler: GLuint, pname: GLenum, params: *mut GLint),
>;
pub type PFNGLGETSAMPLERPARAMETERIUIVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(sampler: GLuint, pname: GLenum, params: *mut GLuint),
>;
pub type PFNGLTEXBUFFEREXTPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, internalformat: GLenum, buffer: GLuint),
>;
pub type PFNGLTEXBUFFERRANGEEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        internalformat: GLenum,
        buffer: GLuint,
        offset: GLintptr,
        size: GLsizeiptr,
    ),
>;
pub type PFNGLTEXSTORAGE1DEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei),
>;
pub type PFNGLTEXSTORAGE2DEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        levels: GLsizei,
        internalformat: GLenum,
        width: GLsizei,
        height: GLsizei,
    ),
>;
pub type PFNGLTEXSTORAGE3DEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        levels: GLsizei,
        internalformat: GLenum,
        width: GLsizei,
        height: GLsizei,
        depth: GLsizei,
    ),
>;
pub type PFNGLTEXTURESTORAGE1DEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        texture: GLuint,
        target: GLenum,
        levels: GLsizei,
        internalformat: GLenum,
        width: GLsizei,
    ),
>;
pub type PFNGLTEXTURESTORAGE2DEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        texture: GLuint,
        target: GLenum,
        levels: GLsizei,
        internalformat: GLenum,
        width: GLsizei,
        height: GLsizei,
    ),
>;
pub type PFNGLTEXTURESTORAGE3DEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        texture: GLuint,
        target: GLenum,
        levels: GLsizei,
        internalformat: GLenum,
        width: GLsizei,
        height: GLsizei,
        depth: GLsizei,
    ),
>;
pub type PFNGLTEXTUREVIEWEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        texture: GLuint,
        target: GLenum,
        origtexture: GLuint,
        internalformat: GLenum,
        minlevel: GLuint,
        numlevels: GLuint,
        minlayer: GLuint,
        numlayers: GLuint,
    ),
>;
pub type PFNGLACQUIREKEYEDMUTEXWIN32EXTPROC = ::core::option::Option<
    unsafe extern "C" fn(memory: GLuint, key: GLuint64, timeout: GLuint) -> GLboolean,
>;
pub type PFNGLRELEASEKEYEDMUTEXWIN32EXTPROC =
    ::core::option::Option<unsafe extern "C" fn(memory: GLuint, key: GLuint64) -> GLboolean>;
pub type PFNGLWINDOWRECTANGLESEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(mode: GLenum, count: GLsizei, box_: *const GLint)>;
pub type PFNGLGETTEXTUREHANDLEIMGPROC =
    ::core::option::Option<unsafe extern "C" fn(texture: GLuint) -> GLuint64>;
pub type PFNGLGETTEXTURESAMPLERHANDLEIMGPROC =
    ::core::option::Option<unsafe extern "C" fn(texture: GLuint, sampler: GLuint) -> GLuint64>;
pub type PFNGLUNIFORMHANDLEUI64IMGPROC =
    ::core::option::Option<unsafe extern "C" fn(location: GLint, value: GLuint64)>;
pub type PFNGLUNIFORMHANDLEUI64VIMGPROC = ::core::option::Option<
    unsafe extern "C" fn(location: GLint, count: GLsizei, value: *const GLuint64),
>;
pub type PFNGLPROGRAMUNIFORMHANDLEUI64IMGPROC =
    ::core::option::Option<unsafe extern "C" fn(program: GLuint, location: GLint, value: GLuint64)>;
pub type PFNGLPROGRAMUNIFORMHANDLEUI64VIMGPROC = ::core::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, count: GLsizei, values: *const GLuint64),
>;
pub type PFNGLFRAMEBUFFERTEXTURE2DDOWNSAMPLEIMGPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        attachment: GLenum,
        textarget: GLenum,
        texture: GLuint,
        level: GLint,
        xscale: GLint,
        yscale: GLint,
    ),
>;
pub type PFNGLFRAMEBUFFERTEXTURELAYERDOWNSAMPLEIMGPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        attachment: GLenum,
        texture: GLuint,
        level: GLint,
        layer: GLint,
        xscale: GLint,
        yscale: GLint,
    ),
>;
pub type PFNGLRENDERBUFFERSTORAGEMULTISAMPLEIMGPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        samples: GLsizei,
        internalformat: GLenum,
        width: GLsizei,
        height: GLsizei,
    ),
>;
pub type PFNGLFRAMEBUFFERTEXTURE2DMULTISAMPLEIMGPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        attachment: GLenum,
        textarget: GLenum,
        texture: GLuint,
        level: GLint,
        samples: GLsizei,
    ),
>;
pub type PFNGLAPPLYFRAMEBUFFERATTACHMENTCMAAINTELPROC =
    ::core::option::Option<unsafe extern "C" fn()>;
pub type PFNGLBEGINPERFQUERYINTELPROC =
    ::core::option::Option<unsafe extern "C" fn(queryHandle: GLuint)>;
pub type PFNGLCREATEPERFQUERYINTELPROC =
    ::core::option::Option<unsafe extern "C" fn(queryId: GLuint, queryHandle: *mut GLuint)>;
pub type PFNGLDELETEPERFQUERYINTELPROC =
    ::core::option::Option<unsafe extern "C" fn(queryHandle: GLuint)>;
pub type PFNGLENDPERFQUERYINTELPROC =
    ::core::option::Option<unsafe extern "C" fn(queryHandle: GLuint)>;
pub type PFNGLGETFIRSTPERFQUERYIDINTELPROC =
    ::core::option::Option<unsafe extern "C" fn(queryId: *mut GLuint)>;
pub type PFNGLGETNEXTPERFQUERYIDINTELPROC =
    ::core::option::Option<unsafe extern "C" fn(queryId: GLuint, nextQueryId: *mut GLuint)>;
pub type PFNGLGETPERFCOUNTERINFOINTELPROC = ::core::option::Option<
    unsafe extern "C" fn(
        queryId: GLuint,
        counterId: GLuint,
        counterNameLength: GLuint,
        counterName: *mut GLchar,
        counterDescLength: GLuint,
        counterDesc: *mut GLchar,
        counterOffset: *mut GLuint,
        counterDataSize: *mut GLuint,
        counterTypeEnum: *mut GLuint,
        counterDataTypeEnum: *mut GLuint,
        rawCounterMaxValue: *mut GLuint64,
    ),
>;
pub type PFNGLGETPERFQUERYDATAINTELPROC = ::core::option::Option<
    unsafe extern "C" fn(
        queryHandle: GLuint,
        flags: GLuint,
        dataSize: GLsizei,
        data: *mut rs_ctypes::c_void,
        bytesWritten: *mut GLuint,
    ),
>;
pub type PFNGLGETPERFQUERYIDBYNAMEINTELPROC =
    ::core::option::Option<unsafe extern "C" fn(queryName: *mut GLchar, queryId: *mut GLuint)>;
pub type PFNGLGETPERFQUERYINFOINTELPROC = ::core::option::Option<
    unsafe extern "C" fn(
        queryId: GLuint,
        queryNameLength: GLuint,
        queryName: *mut GLchar,
        dataSize: *mut GLuint,
        noCounters: *mut GLuint,
        noInstances: *mut GLuint,
        capsMask: *mut GLuint,
    ),
>;
pub type PFNGLGETTEXTUREHANDLENVPROC =
    ::core::option::Option<unsafe extern "C" fn(texture: GLuint) -> GLuint64>;
pub type PFNGLGETTEXTURESAMPLERHANDLENVPROC =
    ::core::option::Option<unsafe extern "C" fn(texture: GLuint, sampler: GLuint) -> GLuint64>;
pub type PFNGLMAKETEXTUREHANDLERESIDENTNVPROC =
    ::core::option::Option<unsafe extern "C" fn(handle: GLuint64)>;
pub type PFNGLMAKETEXTUREHANDLENONRESIDENTNVPROC =
    ::core::option::Option<unsafe extern "C" fn(handle: GLuint64)>;
pub type PFNGLGETIMAGEHANDLENVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        texture: GLuint,
        level: GLint,
        layered: GLboolean,
        layer: GLint,
        format: GLenum,
    ) -> GLuint64,
>;
pub type PFNGLMAKEIMAGEHANDLERESIDENTNVPROC =
    ::core::option::Option<unsafe extern "C" fn(handle: GLuint64, access: GLenum)>;
pub type PFNGLMAKEIMAGEHANDLENONRESIDENTNVPROC =
    ::core::option::Option<unsafe extern "C" fn(handle: GLuint64)>;
pub type PFNGLUNIFORMHANDLEUI64NVPROC =
    ::core::option::Option<unsafe extern "C" fn(location: GLint, value: GLuint64)>;
pub type PFNGLUNIFORMHANDLEUI64VNVPROC = ::core::option::Option<
    unsafe extern "C" fn(location: GLint, count: GLsizei, value: *const GLuint64),
>;
pub type PFNGLPROGRAMUNIFORMHANDLEUI64NVPROC =
    ::core::option::Option<unsafe extern "C" fn(program: GLuint, location: GLint, value: GLuint64)>;
pub type PFNGLPROGRAMUNIFORMHANDLEUI64VNVPROC = ::core::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, count: GLsizei, values: *const GLuint64),
>;
pub type PFNGLISTEXTUREHANDLERESIDENTNVPROC =
    ::core::option::Option<unsafe extern "C" fn(handle: GLuint64) -> GLboolean>;
pub type PFNGLISIMAGEHANDLERESIDENTNVPROC =
    ::core::option::Option<unsafe extern "C" fn(handle: GLuint64) -> GLboolean>;
pub type PFNGLBLENDPARAMETERINVPROC =
    ::core::option::Option<unsafe extern "C" fn(pname: GLenum, value: GLint)>;
pub type PFNGLBLENDBARRIERNVPROC = ::core::option::Option<unsafe extern "C" fn()>;
pub type PFNGLVIEWPORTPOSITIONWSCALENVPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, xcoeff: GLfloat, ycoeff: GLfloat)>;
pub type PFNGLBEGINCONDITIONALRENDERNVPROC =
    ::core::option::Option<unsafe extern "C" fn(id: GLuint, mode: GLenum)>;
pub type PFNGLENDCONDITIONALRENDERNVPROC = ::core::option::Option<unsafe extern "C" fn()>;
pub type PFNGLSUBPIXELPRECISIONBIASNVPROC =
    ::core::option::Option<unsafe extern "C" fn(xbits: GLuint, ybits: GLuint)>;
pub type PFNGLCONSERVATIVERASTERPARAMETERINVPROC =
    ::core::option::Option<unsafe extern "C" fn(pname: GLenum, param: GLint)>;
pub type PFNGLCOPYBUFFERSUBDATANVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        readTarget: GLenum,
        writeTarget: GLenum,
        readOffset: GLintptr,
        writeOffset: GLintptr,
        size: GLsizeiptr,
    ),
>;
pub type PFNGLCOVERAGEMASKNVPROC = ::core::option::Option<unsafe extern "C" fn(mask: GLboolean)>;
pub type PFNGLCOVERAGEOPERATIONNVPROC =
    ::core::option::Option<unsafe extern "C" fn(operation: GLenum)>;
pub type PFNGLDRAWBUFFERSNVPROC =
    ::core::option::Option<unsafe extern "C" fn(n: GLsizei, bufs: *const GLenum)>;
pub type PFNGLDRAWARRAYSINSTANCEDNVPROC = ::core::option::Option<
    unsafe extern "C" fn(mode: GLenum, first: GLint, count: GLsizei, primcount: GLsizei),
>;
pub type PFNGLDRAWELEMENTSINSTANCEDNVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        mode: GLenum,
        count: GLsizei,
        type_: GLenum,
        indices: *const rs_ctypes::c_void,
        primcount: GLsizei,
    ),
>;
pub type GLVULKANPROCNV = ::core::option::Option<unsafe extern "C" fn()>;
pub type PFNGLDRAWVKIMAGENVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        vkImage: GLuint64,
        sampler: GLuint,
        x0: GLfloat,
        y0: GLfloat,
        x1: GLfloat,
        y1: GLfloat,
        z: GLfloat,
        s0: GLfloat,
        t0: GLfloat,
        s1: GLfloat,
        t1: GLfloat,
    ),
>;
pub type PFNGLGETVKPROCADDRNVPROC =
    ::core::option::Option<unsafe extern "C" fn(name: *const GLchar) -> GLVULKANPROCNV>;
pub type PFNGLWAITVKSEMAPHORENVPROC =
    ::core::option::Option<unsafe extern "C" fn(vkSemaphore: GLuint64)>;
pub type PFNGLSIGNALVKSEMAPHORENVPROC =
    ::core::option::Option<unsafe extern "C" fn(vkSemaphore: GLuint64)>;
pub type PFNGLSIGNALVKFENCENVPROC = ::core::option::Option<unsafe extern "C" fn(vkFence: GLuint64)>;
pub type PFNGLDELETEFENCESNVPROC =
    ::core::option::Option<unsafe extern "C" fn(n: GLsizei, fences: *const GLuint)>;
pub type PFNGLGENFENCESNVPROC =
    ::core::option::Option<unsafe extern "C" fn(n: GLsizei, fences: *mut GLuint)>;
pub type PFNGLISFENCENVPROC =
    ::core::option::Option<unsafe extern "C" fn(fence: GLuint) -> GLboolean>;
pub type PFNGLTESTFENCENVPROC =
    ::core::option::Option<unsafe extern "C" fn(fence: GLuint) -> GLboolean>;
pub type PFNGLGETFENCEIVNVPROC =
    ::core::option::Option<unsafe extern "C" fn(fence: GLuint, pname: GLenum, params: *mut GLint)>;
pub type PFNGLFINISHFENCENVPROC = ::core::option::Option<unsafe extern "C" fn(fence: GLuint)>;
pub type PFNGLSETFENCENVPROC =
    ::core::option::Option<unsafe extern "C" fn(fence: GLuint, condition: GLenum)>;
pub type PFNGLFRAGMENTCOVERAGECOLORNVPROC =
    ::core::option::Option<unsafe extern "C" fn(color: GLuint)>;
pub type PFNGLBLITFRAMEBUFFERNVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        srcX0: GLint,
        srcY0: GLint,
        srcX1: GLint,
        srcY1: GLint,
        dstX0: GLint,
        dstY0: GLint,
        dstX1: GLint,
        dstY1: GLint,
        mask: GLbitfield,
        filter: GLenum,
    ),
>;
pub type PFNGLCOVERAGEMODULATIONTABLENVPROC =
    ::core::option::Option<unsafe extern "C" fn(n: GLsizei, v: *const GLfloat)>;
pub type PFNGLGETCOVERAGEMODULATIONTABLENVPROC =
    ::core::option::Option<unsafe extern "C" fn(bufsize: GLsizei, v: *mut GLfloat)>;
pub type PFNGLCOVERAGEMODULATIONNVPROC =
    ::core::option::Option<unsafe extern "C" fn(components: GLenum)>;
pub type PFNGLRENDERBUFFERSTORAGEMULTISAMPLENVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        samples: GLsizei,
        internalformat: GLenum,
        width: GLsizei,
        height: GLsizei,
    ),
>;
pub type GLint64EXT = khronos_int64_t;
pub type GLuint64EXT = khronos_uint64_t;
pub type PFNGLUNIFORM1I64NVPROC =
    ::core::option::Option<unsafe extern "C" fn(location: GLint, x: GLint64EXT)>;
pub type PFNGLUNIFORM2I64NVPROC =
    ::core::option::Option<unsafe extern "C" fn(location: GLint, x: GLint64EXT, y: GLint64EXT)>;
pub type PFNGLUNIFORM3I64NVPROC = ::core::option::Option<
    unsafe extern "C" fn(location: GLint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT),
>;
pub type PFNGLUNIFORM4I64NVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        location: GLint,
        x: GLint64EXT,
        y: GLint64EXT,
        z: GLint64EXT,
        w: GLint64EXT,
    ),
>;
pub type PFNGLUNIFORM1I64VNVPROC = ::core::option::Option<
    unsafe extern "C" fn(location: GLint, count: GLsizei, value: *const GLint64EXT),
>;
pub type PFNGLUNIFORM2I64VNVPROC = ::core::option::Option<
    unsafe extern "C" fn(location: GLint, count: GLsizei, value: *const GLint64EXT),
>;
pub type PFNGLUNIFORM3I64VNVPROC = ::core::option::Option<
    unsafe extern "C" fn(location: GLint, count: GLsizei, value: *const GLint64EXT),
>;
pub type PFNGLUNIFORM4I64VNVPROC = ::core::option::Option<
    unsafe extern "C" fn(location: GLint, count: GLsizei, value: *const GLint64EXT),
>;
pub type PFNGLUNIFORM1UI64NVPROC =
    ::core::option::Option<unsafe extern "C" fn(location: GLint, x: GLuint64EXT)>;
pub type PFNGLUNIFORM2UI64NVPROC =
    ::core::option::Option<unsafe extern "C" fn(location: GLint, x: GLuint64EXT, y: GLuint64EXT)>;
pub type PFNGLUNIFORM3UI64NVPROC = ::core::option::Option<
    unsafe extern "C" fn(location: GLint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT),
>;
pub type PFNGLUNIFORM4UI64NVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        location: GLint,
        x: GLuint64EXT,
        y: GLuint64EXT,
        z: GLuint64EXT,
        w: GLuint64EXT,
    ),
>;
pub type PFNGLUNIFORM1UI64VNVPROC = ::core::option::Option<
    unsafe extern "C" fn(location: GLint, count: GLsizei, value: *const GLuint64EXT),
>;
pub type PFNGLUNIFORM2UI64VNVPROC = ::core::option::Option<
    unsafe extern "C" fn(location: GLint, count: GLsizei, value: *const GLuint64EXT),
>;
pub type PFNGLUNIFORM3UI64VNVPROC = ::core::option::Option<
    unsafe extern "C" fn(location: GLint, count: GLsizei, value: *const GLuint64EXT),
>;
pub type PFNGLUNIFORM4UI64VNVPROC = ::core::option::Option<
    unsafe extern "C" fn(location: GLint, count: GLsizei, value: *const GLuint64EXT),
>;
pub type PFNGLGETUNIFORMI64VNVPROC = ::core::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, params: *mut GLint64EXT),
>;
pub type PFNGLPROGRAMUNIFORM1I64NVPROC =
    ::core::option::Option<unsafe extern "C" fn(program: GLuint, location: GLint, x: GLint64EXT)>;
pub type PFNGLPROGRAMUNIFORM2I64NVPROC = ::core::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, x: GLint64EXT, y: GLint64EXT),
>;
pub type PFNGLPROGRAMUNIFORM3I64NVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        x: GLint64EXT,
        y: GLint64EXT,
        z: GLint64EXT,
    ),
>;
pub type PFNGLPROGRAMUNIFORM4I64NVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        x: GLint64EXT,
        y: GLint64EXT,
        z: GLint64EXT,
        w: GLint64EXT,
    ),
>;
pub type PFNGLPROGRAMUNIFORM1I64VNVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        value: *const GLint64EXT,
    ),
>;
pub type PFNGLPROGRAMUNIFORM2I64VNVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        value: *const GLint64EXT,
    ),
>;
pub type PFNGLPROGRAMUNIFORM3I64VNVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        value: *const GLint64EXT,
    ),
>;
pub type PFNGLPROGRAMUNIFORM4I64VNVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        value: *const GLint64EXT,
    ),
>;
pub type PFNGLPROGRAMUNIFORM1UI64NVPROC =
    ::core::option::Option<unsafe extern "C" fn(program: GLuint, location: GLint, x: GLuint64EXT)>;
pub type PFNGLPROGRAMUNIFORM2UI64NVPROC = ::core::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, x: GLuint64EXT, y: GLuint64EXT),
>;
pub type PFNGLPROGRAMUNIFORM3UI64NVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        x: GLuint64EXT,
        y: GLuint64EXT,
        z: GLuint64EXT,
    ),
>;
pub type PFNGLPROGRAMUNIFORM4UI64NVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        x: GLuint64EXT,
        y: GLuint64EXT,
        z: GLuint64EXT,
        w: GLuint64EXT,
    ),
>;
pub type PFNGLPROGRAMUNIFORM1UI64VNVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        value: *const GLuint64EXT,
    ),
>;
pub type PFNGLPROGRAMUNIFORM2UI64VNVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        value: *const GLuint64EXT,
    ),
>;
pub type PFNGLPROGRAMUNIFORM3UI64VNVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        value: *const GLuint64EXT,
    ),
>;
pub type PFNGLPROGRAMUNIFORM4UI64VNVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        value: *const GLuint64EXT,
    ),
>;
pub type PFNGLVERTEXATTRIBDIVISORNVPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, divisor: GLuint)>;
pub type PFNGLGETINTERNALFORMATSAMPLEIVNVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        internalformat: GLenum,
        samples: GLsizei,
        pname: GLenum,
        bufSize: GLsizei,
        params: *mut GLint,
    ),
>;
pub type PFNGLGETMEMORYOBJECTDETACHEDRESOURCESUIVNVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        memory: GLuint,
        pname: GLenum,
        first: GLint,
        count: GLsizei,
        params: *mut GLuint,
    ),
>;
pub type PFNGLRESETMEMORYOBJECTPARAMETERNVPROC =
    ::core::option::Option<unsafe extern "C" fn(memory: GLuint, pname: GLenum)>;
pub type PFNGLTEXATTACHMEMORYNVPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, memory: GLuint, offset: GLuint64)>;
pub type PFNGLBUFFERATTACHMEMORYNVPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, memory: GLuint, offset: GLuint64)>;
pub type PFNGLTEXTUREATTACHMEMORYNVPROC =
    ::core::option::Option<unsafe extern "C" fn(texture: GLuint, memory: GLuint, offset: GLuint64)>;
pub type PFNGLNAMEDBUFFERATTACHMEMORYNVPROC =
    ::core::option::Option<unsafe extern "C" fn(buffer: GLuint, memory: GLuint, offset: GLuint64)>;
pub type PFNGLDRAWMESHTASKSNVPROC =
    ::core::option::Option<unsafe extern "C" fn(first: GLuint, count: GLuint)>;
pub type PFNGLDRAWMESHTASKSINDIRECTNVPROC =
    ::core::option::Option<unsafe extern "C" fn(indirect: GLintptr)>;
pub type PFNGLMULTIDRAWMESHTASKSINDIRECTNVPROC = ::core::option::Option<
    unsafe extern "C" fn(indirect: GLintptr, drawcount: GLsizei, stride: GLsizei),
>;
pub type PFNGLMULTIDRAWMESHTASKSINDIRECTCOUNTNVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        indirect: GLintptr,
        drawcount: GLintptr,
        maxdrawcount: GLsizei,
        stride: GLsizei,
    ),
>;
pub type PFNGLUNIFORMMATRIX2X3FVNVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    ),
>;
pub type PFNGLUNIFORMMATRIX3X2FVNVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    ),
>;
pub type PFNGLUNIFORMMATRIX2X4FVNVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    ),
>;
pub type PFNGLUNIFORMMATRIX4X2FVNVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    ),
>;
pub type PFNGLUNIFORMMATRIX3X4FVNVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    ),
>;
pub type PFNGLUNIFORMMATRIX4X3FVNVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    ),
>;
pub type GLdouble = f64;
pub type PFNGLGENPATHSNVPROC =
    ::core::option::Option<unsafe extern "C" fn(range: GLsizei) -> GLuint>;
pub type PFNGLDELETEPATHSNVPROC =
    ::core::option::Option<unsafe extern "C" fn(path: GLuint, range: GLsizei)>;
pub type PFNGLISPATHNVPROC =
    ::core::option::Option<unsafe extern "C" fn(path: GLuint) -> GLboolean>;
pub type PFNGLPATHCOMMANDSNVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        path: GLuint,
        numCommands: GLsizei,
        commands: *const GLubyte,
        numCoords: GLsizei,
        coordType: GLenum,
        coords: *const rs_ctypes::c_void,
    ),
>;
pub type PFNGLPATHCOORDSNVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        path: GLuint,
        numCoords: GLsizei,
        coordType: GLenum,
        coords: *const rs_ctypes::c_void,
    ),
>;
pub type PFNGLPATHSUBCOMMANDSNVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        path: GLuint,
        commandStart: GLsizei,
        commandsToDelete: GLsizei,
        numCommands: GLsizei,
        commands: *const GLubyte,
        numCoords: GLsizei,
        coordType: GLenum,
        coords: *const rs_ctypes::c_void,
    ),
>;
pub type PFNGLPATHSUBCOORDSNVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        path: GLuint,
        coordStart: GLsizei,
        numCoords: GLsizei,
        coordType: GLenum,
        coords: *const rs_ctypes::c_void,
    ),
>;
pub type PFNGLPATHSTRINGNVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        path: GLuint,
        format: GLenum,
        length: GLsizei,
        pathString: *const rs_ctypes::c_void,
    ),
>;
pub type PFNGLPATHGLYPHSNVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        firstPathName: GLuint,
        fontTarget: GLenum,
        fontName: *const rs_ctypes::c_void,
        fontStyle: GLbitfield,
        numGlyphs: GLsizei,
        type_: GLenum,
        charcodes: *const rs_ctypes::c_void,
        handleMissingGlyphs: GLenum,
        pathParameterTemplate: GLuint,
        emScale: GLfloat,
    ),
>;
pub type PFNGLPATHGLYPHRANGENVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        firstPathName: GLuint,
        fontTarget: GLenum,
        fontName: *const rs_ctypes::c_void,
        fontStyle: GLbitfield,
        firstGlyph: GLuint,
        numGlyphs: GLsizei,
        handleMissingGlyphs: GLenum,
        pathParameterTemplate: GLuint,
        emScale: GLfloat,
    ),
>;
pub type PFNGLWEIGHTPATHSNVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        resultPath: GLuint,
        numPaths: GLsizei,
        paths: *const GLuint,
        weights: *const GLfloat,
    ),
>;
pub type PFNGLCOPYPATHNVPROC =
    ::core::option::Option<unsafe extern "C" fn(resultPath: GLuint, srcPath: GLuint)>;
pub type PFNGLINTERPOLATEPATHSNVPROC = ::core::option::Option<
    unsafe extern "C" fn(resultPath: GLuint, pathA: GLuint, pathB: GLuint, weight: GLfloat),
>;
pub type PFNGLTRANSFORMPATHNVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        resultPath: GLuint,
        srcPath: GLuint,
        transformType: GLenum,
        transformValues: *const GLfloat,
    ),
>;
pub type PFNGLPATHPARAMETERIVNVPROC =
    ::core::option::Option<unsafe extern "C" fn(path: GLuint, pname: GLenum, value: *const GLint)>;
pub type PFNGLPATHPARAMETERINVPROC =
    ::core::option::Option<unsafe extern "C" fn(path: GLuint, pname: GLenum, value: GLint)>;
pub type PFNGLPATHPARAMETERFVNVPROC = ::core::option::Option<
    unsafe extern "C" fn(path: GLuint, pname: GLenum, value: *const GLfloat),
>;
pub type PFNGLPATHPARAMETERFNVPROC =
    ::core::option::Option<unsafe extern "C" fn(path: GLuint, pname: GLenum, value: GLfloat)>;
pub type PFNGLPATHDASHARRAYNVPROC = ::core::option::Option<
    unsafe extern "C" fn(path: GLuint, dashCount: GLsizei, dashArray: *const GLfloat),
>;
pub type PFNGLPATHSTENCILFUNCNVPROC =
    ::core::option::Option<unsafe extern "C" fn(func: GLenum, ref_: GLint, mask: GLuint)>;
pub type PFNGLPATHSTENCILDEPTHOFFSETNVPROC =
    ::core::option::Option<unsafe extern "C" fn(factor: GLfloat, units: GLfloat)>;
pub type PFNGLSTENCILFILLPATHNVPROC =
    ::core::option::Option<unsafe extern "C" fn(path: GLuint, fillMode: GLenum, mask: GLuint)>;
pub type PFNGLSTENCILSTROKEPATHNVPROC =
    ::core::option::Option<unsafe extern "C" fn(path: GLuint, reference: GLint, mask: GLuint)>;
pub type PFNGLSTENCILFILLPATHINSTANCEDNVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        numPaths: GLsizei,
        pathNameType: GLenum,
        paths: *const rs_ctypes::c_void,
        pathBase: GLuint,
        fillMode: GLenum,
        mask: GLuint,
        transformType: GLenum,
        transformValues: *const GLfloat,
    ),
>;
pub type PFNGLSTENCILSTROKEPATHINSTANCEDNVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        numPaths: GLsizei,
        pathNameType: GLenum,
        paths: *const rs_ctypes::c_void,
        pathBase: GLuint,
        reference: GLint,
        mask: GLuint,
        transformType: GLenum,
        transformValues: *const GLfloat,
    ),
>;
pub type PFNGLPATHCOVERDEPTHFUNCNVPROC = ::core::option::Option<unsafe extern "C" fn(func: GLenum)>;
pub type PFNGLCOVERFILLPATHNVPROC =
    ::core::option::Option<unsafe extern "C" fn(path: GLuint, coverMode: GLenum)>;
pub type PFNGLCOVERSTROKEPATHNVPROC =
    ::core::option::Option<unsafe extern "C" fn(path: GLuint, coverMode: GLenum)>;
pub type PFNGLCOVERFILLPATHINSTANCEDNVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        numPaths: GLsizei,
        pathNameType: GLenum,
        paths: *const rs_ctypes::c_void,
        pathBase: GLuint,
        coverMode: GLenum,
        transformType: GLenum,
        transformValues: *const GLfloat,
    ),
>;
pub type PFNGLCOVERSTROKEPATHINSTANCEDNVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        numPaths: GLsizei,
        pathNameType: GLenum,
        paths: *const rs_ctypes::c_void,
        pathBase: GLuint,
        coverMode: GLenum,
        transformType: GLenum,
        transformValues: *const GLfloat,
    ),
>;
pub type PFNGLGETPATHPARAMETERIVNVPROC =
    ::core::option::Option<unsafe extern "C" fn(path: GLuint, pname: GLenum, value: *mut GLint)>;
pub type PFNGLGETPATHPARAMETERFVNVPROC =
    ::core::option::Option<unsafe extern "C" fn(path: GLuint, pname: GLenum, value: *mut GLfloat)>;
pub type PFNGLGETPATHCOMMANDSNVPROC =
    ::core::option::Option<unsafe extern "C" fn(path: GLuint, commands: *mut GLubyte)>;
pub type PFNGLGETPATHCOORDSNVPROC =
    ::core::option::Option<unsafe extern "C" fn(path: GLuint, coords: *mut GLfloat)>;
pub type PFNGLGETPATHDASHARRAYNVPROC =
    ::core::option::Option<unsafe extern "C" fn(path: GLuint, dashArray: *mut GLfloat)>;
pub type PFNGLGETPATHMETRICSNVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        metricQueryMask: GLbitfield,
        numPaths: GLsizei,
        pathNameType: GLenum,
        paths: *const rs_ctypes::c_void,
        pathBase: GLuint,
        stride: GLsizei,
        metrics: *mut GLfloat,
    ),
>;
pub type PFNGLGETPATHMETRICRANGENVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        metricQueryMask: GLbitfield,
        firstPathName: GLuint,
        numPaths: GLsizei,
        stride: GLsizei,
        metrics: *mut GLfloat,
    ),
>;
pub type PFNGLGETPATHSPACINGNVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        pathListMode: GLenum,
        numPaths: GLsizei,
        pathNameType: GLenum,
        paths: *const rs_ctypes::c_void,
        pathBase: GLuint,
        advanceScale: GLfloat,
        kerningScale: GLfloat,
        transformType: GLenum,
        returnedSpacing: *mut GLfloat,
    ),
>;
pub type PFNGLISPOINTINFILLPATHNVPROC = ::core::option::Option<
    unsafe extern "C" fn(path: GLuint, mask: GLuint, x: GLfloat, y: GLfloat) -> GLboolean,
>;
pub type PFNGLISPOINTINSTROKEPATHNVPROC =
    ::core::option::Option<unsafe extern "C" fn(path: GLuint, x: GLfloat, y: GLfloat) -> GLboolean>;
pub type PFNGLGETPATHLENGTHNVPROC = ::core::option::Option<
    unsafe extern "C" fn(path: GLuint, startSegment: GLsizei, numSegments: GLsizei) -> GLfloat,
>;
pub type PFNGLPOINTALONGPATHNVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        path: GLuint,
        startSegment: GLsizei,
        numSegments: GLsizei,
        distance: GLfloat,
        x: *mut GLfloat,
        y: *mut GLfloat,
        tangentX: *mut GLfloat,
        tangentY: *mut GLfloat,
    ) -> GLboolean,
>;
pub type PFNGLMATRIXLOAD3X2FNVPROC =
    ::core::option::Option<unsafe extern "C" fn(matrixMode: GLenum, m: *const GLfloat)>;
pub type PFNGLMATRIXLOAD3X3FNVPROC =
    ::core::option::Option<unsafe extern "C" fn(matrixMode: GLenum, m: *const GLfloat)>;
pub type PFNGLMATRIXLOADTRANSPOSE3X3FNVPROC =
    ::core::option::Option<unsafe extern "C" fn(matrixMode: GLenum, m: *const GLfloat)>;
pub type PFNGLMATRIXMULT3X2FNVPROC =
    ::core::option::Option<unsafe extern "C" fn(matrixMode: GLenum, m: *const GLfloat)>;
pub type PFNGLMATRIXMULT3X3FNVPROC =
    ::core::option::Option<unsafe extern "C" fn(matrixMode: GLenum, m: *const GLfloat)>;
pub type PFNGLMATRIXMULTTRANSPOSE3X3FNVPROC =
    ::core::option::Option<unsafe extern "C" fn(matrixMode: GLenum, m: *const GLfloat)>;
pub type PFNGLSTENCILTHENCOVERFILLPATHNVPROC = ::core::option::Option<
    unsafe extern "C" fn(path: GLuint, fillMode: GLenum, mask: GLuint, coverMode: GLenum),
>;
pub type PFNGLSTENCILTHENCOVERSTROKEPATHNVPROC = ::core::option::Option<
    unsafe extern "C" fn(path: GLuint, reference: GLint, mask: GLuint, coverMode: GLenum),
>;
pub type PFNGLSTENCILTHENCOVERFILLPATHINSTANCEDNVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        numPaths: GLsizei,
        pathNameType: GLenum,
        paths: *const rs_ctypes::c_void,
        pathBase: GLuint,
        fillMode: GLenum,
        mask: GLuint,
        coverMode: GLenum,
        transformType: GLenum,
        transformValues: *const GLfloat,
    ),
>;
pub type PFNGLSTENCILTHENCOVERSTROKEPATHINSTANCEDNVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        numPaths: GLsizei,
        pathNameType: GLenum,
        paths: *const rs_ctypes::c_void,
        pathBase: GLuint,
        reference: GLint,
        mask: GLuint,
        coverMode: GLenum,
        transformType: GLenum,
        transformValues: *const GLfloat,
    ),
>;
pub type PFNGLPATHGLYPHINDEXRANGENVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        fontTarget: GLenum,
        fontName: *const rs_ctypes::c_void,
        fontStyle: GLbitfield,
        pathParameterTemplate: GLuint,
        emScale: GLfloat,
        baseAndCount: *mut GLuint,
    ) -> GLenum,
>;
pub type PFNGLPATHGLYPHINDEXARRAYNVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        firstPathName: GLuint,
        fontTarget: GLenum,
        fontName: *const rs_ctypes::c_void,
        fontStyle: GLbitfield,
        firstGlyphIndex: GLuint,
        numGlyphs: GLsizei,
        pathParameterTemplate: GLuint,
        emScale: GLfloat,
    ) -> GLenum,
>;
pub type PFNGLPATHMEMORYGLYPHINDEXARRAYNVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        firstPathName: GLuint,
        fontTarget: GLenum,
        fontSize: GLsizeiptr,
        fontData: *const rs_ctypes::c_void,
        faceIndex: GLsizei,
        firstGlyphIndex: GLuint,
        numGlyphs: GLsizei,
        pathParameterTemplate: GLuint,
        emScale: GLfloat,
    ) -> GLenum,
>;
pub type PFNGLPROGRAMPATHFRAGMENTINPUTGENNVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        genMode: GLenum,
        components: GLint,
        coeffs: *const GLfloat,
    ),
>;
pub type PFNGLGETPROGRAMRESOURCEFVNVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        programInterface: GLenum,
        index: GLuint,
        propCount: GLsizei,
        props: *const GLenum,
        bufSize: GLsizei,
        length: *mut GLsizei,
        params: *mut GLfloat,
    ),
>;
pub type PFNGLMATRIXFRUSTUMEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        mode: GLenum,
        left: GLdouble,
        right: GLdouble,
        bottom: GLdouble,
        top: GLdouble,
        zNear: GLdouble,
        zFar: GLdouble,
    ),
>;
pub type PFNGLMATRIXLOADIDENTITYEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(mode: GLenum)>;
pub type PFNGLMATRIXLOADTRANSPOSEFEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(mode: GLenum, m: *const GLfloat)>;
pub type PFNGLMATRIXLOADTRANSPOSEDEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(mode: GLenum, m: *const GLdouble)>;
pub type PFNGLMATRIXLOADFEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(mode: GLenum, m: *const GLfloat)>;
pub type PFNGLMATRIXLOADDEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(mode: GLenum, m: *const GLdouble)>;
pub type PFNGLMATRIXMULTTRANSPOSEFEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(mode: GLenum, m: *const GLfloat)>;
pub type PFNGLMATRIXMULTTRANSPOSEDEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(mode: GLenum, m: *const GLdouble)>;
pub type PFNGLMATRIXMULTFEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(mode: GLenum, m: *const GLfloat)>;
pub type PFNGLMATRIXMULTDEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(mode: GLenum, m: *const GLdouble)>;
pub type PFNGLMATRIXORTHOEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        mode: GLenum,
        left: GLdouble,
        right: GLdouble,
        bottom: GLdouble,
        top: GLdouble,
        zNear: GLdouble,
        zFar: GLdouble,
    ),
>;
pub type PFNGLMATRIXPOPEXTPROC = ::core::option::Option<unsafe extern "C" fn(mode: GLenum)>;
pub type PFNGLMATRIXPUSHEXTPROC = ::core::option::Option<unsafe extern "C" fn(mode: GLenum)>;
pub type PFNGLMATRIXROTATEFEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(mode: GLenum, angle: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat),
>;
pub type PFNGLMATRIXROTATEDEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(mode: GLenum, angle: GLdouble, x: GLdouble, y: GLdouble, z: GLdouble),
>;
pub type PFNGLMATRIXSCALEFEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(mode: GLenum, x: GLfloat, y: GLfloat, z: GLfloat)>;
pub type PFNGLMATRIXSCALEDEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(mode: GLenum, x: GLdouble, y: GLdouble, z: GLdouble),
>;
pub type PFNGLMATRIXTRANSLATEFEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(mode: GLenum, x: GLfloat, y: GLfloat, z: GLfloat)>;
pub type PFNGLMATRIXTRANSLATEDEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(mode: GLenum, x: GLdouble, y: GLdouble, z: GLdouble),
>;
pub type PFNGLPOLYGONMODENVPROC =
    ::core::option::Option<unsafe extern "C" fn(face: GLenum, mode: GLenum)>;
pub type PFNGLREADBUFFERNVPROC = ::core::option::Option<unsafe extern "C" fn(mode: GLenum)>;
pub type PFNGLFRAMEBUFFERSAMPLELOCATIONSFVNVPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, start: GLuint, count: GLsizei, v: *const GLfloat),
>;
pub type PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVNVPROC = ::core::option::Option<
    unsafe extern "C" fn(framebuffer: GLuint, start: GLuint, count: GLsizei, v: *const GLfloat),
>;
pub type PFNGLRESOLVEDEPTHVALUESNVPROC = ::core::option::Option<unsafe extern "C" fn()>;
pub type PFNGLSCISSOREXCLUSIVENVPROC = ::core::option::Option<
    unsafe extern "C" fn(x: GLint, y: GLint, width: GLsizei, height: GLsizei),
>;
pub type PFNGLSCISSOREXCLUSIVEARRAYVNVPROC =
    ::core::option::Option<unsafe extern "C" fn(first: GLuint, count: GLsizei, v: *const GLint)>;
pub type PFNGLBINDSHADINGRATEIMAGENVPROC =
    ::core::option::Option<unsafe extern "C" fn(texture: GLuint)>;
pub type PFNGLGETSHADINGRATEIMAGEPALETTENVPROC = ::core::option::Option<
    unsafe extern "C" fn(viewport: GLuint, entry: GLuint, rate: *mut GLenum),
>;
pub type PFNGLGETSHADINGRATESAMPLELOCATIONIVNVPROC = ::core::option::Option<
    unsafe extern "C" fn(rate: GLenum, samples: GLuint, index: GLuint, location: *mut GLint),
>;
pub type PFNGLSHADINGRATEIMAGEBARRIERNVPROC =
    ::core::option::Option<unsafe extern "C" fn(synchronize: GLboolean)>;
pub type PFNGLSHADINGRATEIMAGEPALETTENVPROC = ::core::option::Option<
    unsafe extern "C" fn(viewport: GLuint, first: GLuint, count: GLsizei, rates: *const GLenum),
>;
pub type PFNGLSHADINGRATESAMPLEORDERNVPROC =
    ::core::option::Option<unsafe extern "C" fn(order: GLenum)>;
pub type PFNGLSHADINGRATESAMPLEORDERCUSTOMNVPROC = ::core::option::Option<
    unsafe extern "C" fn(rate: GLenum, samples: GLuint, locations: *const GLint),
>;
pub type PFNGLVIEWPORTARRAYVNVPROC =
    ::core::option::Option<unsafe extern "C" fn(first: GLuint, count: GLsizei, v: *const GLfloat)>;
pub type PFNGLVIEWPORTINDEXEDFNVPROC = ::core::option::Option<
    unsafe extern "C" fn(index: GLuint, x: GLfloat, y: GLfloat, w: GLfloat, h: GLfloat),
>;
pub type PFNGLVIEWPORTINDEXEDFVNVPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLfloat)>;
pub type PFNGLSCISSORARRAYVNVPROC =
    ::core::option::Option<unsafe extern "C" fn(first: GLuint, count: GLsizei, v: *const GLint)>;
pub type PFNGLSCISSORINDEXEDNVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        index: GLuint,
        left: GLint,
        bottom: GLint,
        width: GLsizei,
        height: GLsizei,
    ),
>;
pub type PFNGLSCISSORINDEXEDVNVPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLint)>;
pub type PFNGLDEPTHRANGEARRAYFVNVPROC =
    ::core::option::Option<unsafe extern "C" fn(first: GLuint, count: GLsizei, v: *const GLfloat)>;
pub type PFNGLDEPTHRANGEINDEXEDFNVPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, n: GLfloat, f: GLfloat)>;
pub type PFNGLGETFLOATI_VNVPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, index: GLuint, data: *mut GLfloat)>;
pub type PFNGLENABLEINVPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, index: GLuint)>;
pub type PFNGLDISABLEINVPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, index: GLuint)>;
pub type PFNGLISENABLEDINVPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, index: GLuint) -> GLboolean>;
pub type PFNGLVIEWPORTSWIZZLENVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        index: GLuint,
        swizzlex: GLenum,
        swizzley: GLenum,
        swizzlez: GLenum,
        swizzlew: GLenum,
    ),
>;
pub type PFNGLFRAMEBUFFERTEXTUREMULTIVIEWOVRPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        attachment: GLenum,
        texture: GLuint,
        level: GLint,
        baseViewIndex: GLint,
        numViews: GLsizei,
    ),
>;
pub type PFNGLFRAMEBUFFERTEXTUREMULTISAMPLEMULTIVIEWOVRPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        attachment: GLenum,
        texture: GLuint,
        level: GLint,
        samples: GLsizei,
        baseViewIndex: GLint,
        numViews: GLsizei,
    ),
>;
pub type PFNGLALPHAFUNCQCOMPROC =
    ::core::option::Option<unsafe extern "C" fn(func: GLenum, ref_: GLclampf)>;
pub type PFNGLGETDRIVERCONTROLSQCOMPROC = ::core::option::Option<
    unsafe extern "C" fn(num: *mut GLint, size: GLsizei, driverControls: *mut GLuint),
>;
pub type PFNGLGETDRIVERCONTROLSTRINGQCOMPROC = ::core::option::Option<
    unsafe extern "C" fn(
        driverControl: GLuint,
        bufSize: GLsizei,
        length: *mut GLsizei,
        driverControlString: *mut GLchar,
    ),
>;
pub type PFNGLENABLEDRIVERCONTROLQCOMPROC =
    ::core::option::Option<unsafe extern "C" fn(driverControl: GLuint)>;
pub type PFNGLDISABLEDRIVERCONTROLQCOMPROC =
    ::core::option::Option<unsafe extern "C" fn(driverControl: GLuint)>;
pub type PFNGLEXTGETTEXTURESQCOMPROC = ::core::option::Option<
    unsafe extern "C" fn(textures: *mut GLuint, maxTextures: GLint, numTextures: *mut GLint),
>;
pub type PFNGLEXTGETBUFFERSQCOMPROC = ::core::option::Option<
    unsafe extern "C" fn(buffers: *mut GLuint, maxBuffers: GLint, numBuffers: *mut GLint),
>;
pub type PFNGLEXTGETRENDERBUFFERSQCOMPROC = ::core::option::Option<
    unsafe extern "C" fn(
        renderbuffers: *mut GLuint,
        maxRenderbuffers: GLint,
        numRenderbuffers: *mut GLint,
    ),
>;
pub type PFNGLEXTGETFRAMEBUFFERSQCOMPROC = ::core::option::Option<
    unsafe extern "C" fn(
        framebuffers: *mut GLuint,
        maxFramebuffers: GLint,
        numFramebuffers: *mut GLint,
    ),
>;
pub type PFNGLEXTGETTEXLEVELPARAMETERIVQCOMPROC = ::core::option::Option<
    unsafe extern "C" fn(
        texture: GLuint,
        face: GLenum,
        level: GLint,
        pname: GLenum,
        params: *mut GLint,
    ),
>;
pub type PFNGLEXTTEXOBJECTSTATEOVERRIDEIQCOMPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, pname: GLenum, param: GLint)>;
pub type PFNGLEXTGETTEXSUBIMAGEQCOMPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        level: GLint,
        xoffset: GLint,
        yoffset: GLint,
        zoffset: GLint,
        width: GLsizei,
        height: GLsizei,
        depth: GLsizei,
        format: GLenum,
        type_: GLenum,
        texels: *mut rs_ctypes::c_void,
    ),
>;
pub type PFNGLEXTGETBUFFERPOINTERVQCOMPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, params: *mut *mut rs_ctypes::c_void),
>;
pub type PFNGLEXTGETSHADERSQCOMPROC = ::core::option::Option<
    unsafe extern "C" fn(shaders: *mut GLuint, maxShaders: GLint, numShaders: *mut GLint),
>;
pub type PFNGLEXTGETPROGRAMSQCOMPROC = ::core::option::Option<
    unsafe extern "C" fn(programs: *mut GLuint, maxPrograms: GLint, numPrograms: *mut GLint),
>;
pub type PFNGLEXTISPROGRAMBINARYQCOMPROC =
    ::core::option::Option<unsafe extern "C" fn(program: GLuint) -> GLboolean>;
pub type PFNGLEXTGETPROGRAMBINARYSOURCEQCOMPROC = ::core::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        shadertype: GLenum,
        source: *mut GLchar,
        length: *mut GLint,
    ),
>;
pub type PFNGLFRAMEBUFFERFOVEATIONCONFIGQCOMPROC = ::core::option::Option<
    unsafe extern "C" fn(
        framebuffer: GLuint,
        numLayers: GLuint,
        focalPointsPerLayer: GLuint,
        requestedFeatures: GLuint,
        providedFeatures: *mut GLuint,
    ),
>;
pub type PFNGLFRAMEBUFFERFOVEATIONPARAMETERSQCOMPROC = ::core::option::Option<
    unsafe extern "C" fn(
        framebuffer: GLuint,
        layer: GLuint,
        focalPoint: GLuint,
        focalX: GLfloat,
        focalY: GLfloat,
        gainX: GLfloat,
        gainY: GLfloat,
        foveaArea: GLfloat,
    ),
>;
pub type PFNGLFRAMEBUFFERFETCHBARRIERQCOMPROC = ::core::option::Option<unsafe extern "C" fn()>;
pub type PFNGLTEXTUREFOVEATIONPARAMETERSQCOMPROC = ::core::option::Option<
    unsafe extern "C" fn(
        texture: GLuint,
        layer: GLuint,
        focalPoint: GLuint,
        focalX: GLfloat,
        focalY: GLfloat,
        gainX: GLfloat,
        gainY: GLfloat,
        foveaArea: GLfloat,
    ),
>;
pub type PFNGLSTARTTILINGQCOMPROC = ::core::option::Option<
    unsafe extern "C" fn(
        x: GLuint,
        y: GLuint,
        width: GLuint,
        height: GLuint,
        preserveMask: GLbitfield,
    ),
>;
pub type PFNGLENDTILINGQCOMPROC =
    ::core::option::Option<unsafe extern "C" fn(preserveMask: GLbitfield)>;
